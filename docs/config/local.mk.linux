# LM Build configuration for Linux

# Instructions:
#
#  - The HDF5 and Protobuf sections are required for building LM.  Fill in 
#    those sections with appropriate values.
#  - The CUDA, MPI, Python, SBML, and VMD sections are optional.
#    By default, CUDA, Python, and VMD are enabled.
#  - At the end is an advanced options section that contains more variables
#    to guide compilation.  You can probably get by without making changes
#    there, although if you do have trouble compiling, check there for
#    changes to make.

#################################################
#                                               #
#                                               #
# General Configuration                         #
#                                               #
#                                               #
#################################################

# Define a build directory for this configuration
BUILD_DIR := Build-linux

# Compilation flags
CCFLAGS := -m64 -O2 -fPIC -Wall -c -fmessage-length=0 -pthread -DLINUX -DCUDA_3D_GRID_LAUNCH

# Where to install to
INSTALL_PREFIX := /opt/lm

#################################################
#                                               #
#                                               #
# HDF5 Configuration (REQUIRED)                 #
#                                               #
#                                               #
#################################################

# HDF5_DIR: Set the base directory for the HDF5 library installation
HDF5_DIR := /usr/local


#################################################
#                                               #
#                                               #
# Protocol Buffers  Configuration (REQUIRED)    #
#                                               #
#                                               #
#################################################

# PROTOBUF_DIR: Path to protobuf installation
PROTOBUF_DIR := /usr/local


#################################################
#                                               #
#                                               #
# CUDA Configuration                            #
#                                               #
#                                               #
#################################################

# USE_CUDA: Set to 1 to enable CUDA support
USE_CUDA := 1

# CUDA_DIR: The base path for the CUDA Toolkit
CUDA_DIR := /usr/local/cuda

# CUDA_ARCH: Set the CUDA architectures to generate code for
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 
CUDA_ARCH += -gencode arch=compute_30,code=sm_30
CUDA_ARCH += -gencode arch=compute_35,code=sm_35
CUDA_ARCH += -gencode arch=compute_35,code=compute_35

# CUDA_FLAGS
CUDA_FLAGS := -m64 -O2 --ptxas-options=-v $(CUDA_ARCH) -DLINUX -Xcompiler -fPIC -DCUDA_3D_GRID_LAUNCH -DCUDA_DOUBLE_PRECISION -DTUNE_MPD_Y_BLOCK_Y_SIZE=8 -DTUNE_MPD_Z_BLOCK_Z_SIZE=8 -DTUNE_MPD_REACTION_BLOCK_Y_SIZE=8


#################################################
#                                               #
#                                               #
# MPI Configuration                             #
#                                               #
#                                               #
#################################################

# USE_MPI: set to 1 to enable MPI support
USE_MPI := 0

# If using OpenMPI, and mpicc is in your path, then no modification here is 
# necessary.  Otherwise, fill in appropriate flags here
MPI_COMPILE_FLAGS = -DOMPI_SKIP_MPICXX=1 $(shell mpicc --showme:compile)
MPI_LINK_FLAGS = $(shell mpicc --showme:link)


#################################################
#                                               #
#                                               #
# Python Configuration                          #
#                                               #
#                                               #
#################################################

# USE_PYTHON: set to 1 to enable python support.
# NOTE: Required for pyLM
USE_PYTHON := 1

# Path to swig, in order to compile the lm interface file
PYTHON_SWIG := /usr/local/bin/swig

# Have python-config in your path that matches the version of python
# that the python LM interface should be built against
PYTHON_INCLUDE_DIR := `python-config --includes`
PYTHON_LIB := `python-config --libs`

#################################################
#                                               #
#                                               #
# SBML Configuration                            #
#                                               #
#                                               #
#################################################

# Set to 1 to include SBML support
USE_SBML := 0

# Path to the SBML installation root
SBML_DIR := /usr/local


#################################################
#                                               #
#                                               #
# VMD Configuration                             #
#                                               #
#                                               #
#################################################

# Set to 1 to enable VMD
USE_VMD := 1

# VMD_DIR: Set lib dir for VMD
VMD_DIR := /usr/local/lib/vmd


#################################################
#                                               #
#                                               #
# Advanced Options                              #
#                                               #
#                                               #
#################################################
CXXFLAGS := $(CCFLAGS)
RM := rm -rf
CC := gcc
CCDEPENDFLAGS := -MMD -MP
CXXDEPENDFLAGS := -MMD -MP
CXX := g++
LD := g++
LDFLAGS := -pthread -lpthread -lrt
SHLD := g++
SHLDFLAGS := -shared -fPIC
SHLDOPTO := -o

#HDF5 
HDF5_INCLUDE_DIR := -I$(HDF5_DIR)/include
HDF5_LIB_DIR := -L$(HDF5_DIR)/lib
HDF5_LIB := -lz -lsz -lhdf5 -lhdf5_hl
#HDF5_LIB := -lz ${HDF5_DIR}/lib/libsz.a ${HDF5_DIR}/lib/libhdf5.a ${HDF5_DIR}/lib/libhdf5_hl.a

# Protobuf
PROTOBUF_PROTOC := $(PROTOBUF_DIR)/bin/protoc
PROTOBUF_INCLUDE_DIR := -I$(PROTOBUF_DIR)/include
PROTOBUF_LIB_DIR := -L$(PROTOBUF_DIR)/lib
PROTOBUF_LIB := -lprotobuf
#PROTOBUF_LIB := $(PROTOBUF_DIR)/lib/libprotobuf.a

#CUDA
CUDA_NVCC := $(CUDA_DIR)/bin/nvcc
CUDA_INCLUDE_DIR := -I$(CUDA_DIR)/include
CUDA_LIB_DIR := -L$(CUDA_DIR)/lib64
CUDA_LIB := -lcudart
#CUDA_LIB := -ldl $(CUDA_DIR)/lib/libcudart_static.a
CUDA_GENERATE_PTX_CODE := 0
CUDA_GENERATE_BIN_CODE := 0
CUDA_GENERATE_ASM_CODE := 0

# SBML
SBML_INCLUDE_DIR := -I$(SBML_DIR)/include
SBML_LIB_DIR := -L$(SBML_DIR)/lib
SBML_LIB := -lbz2 -liconv -lxml2 -lsbml 

# VMD
VMD_INCLUDE_DIR := -I$(VMD_DIR)/plugins/include
VMD_INSTALL_DIR := $(VMD_DIR)/plugins/LINUXAMD64/molfile

# Profiler support
USE_PROF := 0
# Use NVTX instead of built-in LPTF
USE_PROF_NVTX := 1
# Enable profiling of CUDA via LPTF
PROF_CUDA_ENABLE := 1
# LPTF parameters
PROF_MAX_THREADS := 9
PROF_MAX_EVENTS := 1000
PROF_OUT_FILE := prof.out

# Boost
USE_BOOST := 0
BOOST_TEST_CXXFLAGS := 
BOOST_TEST_INCLUDE_DIR := 
BOOST_TEST_LIB_DIR := 
BOOST_TEST_LIB := 
