/*****************************************************************************
*
* Copyright (c) 2000 - 2014, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-442911
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

// ************************************************************************* //
//                            avtLatticeMicrobesFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_LatticeMicrobes_FILE_FORMAT_H
#define AVT_LatticeMicrobes_FILE_FORMAT_H

#include <avtMTMDFileFormat.h>

#include <hdf5.h>
#include <hdf5_hl.h>

#include <vector>
#include <map>

/// @def HDF5_EXCEPTION_CHECK
/// @brief General check for HDF5 errors
#define HDF5_EXCEPTION_CHECK(hdf5_call) {herr_t _hdf5_ret_=hdf5_call; if (_hdf5_ret_ < 0) { H5Eprint1(stdout); throw InvalidVariableException("HDF5 error check. Bailing out of LM database reader.");}}
/// @def HDF5_EXCEPTION_CALL
/// @brief General call for throwing an HDF5 exception
#define HDF5_EXCEPTION_CALL(val,hdf5_call) val=hdf5_call; if (val < 0) {herr_t _hdf5_err_=(herr_t)val; val=0; H5Eprint1(stdout); throw InvalidVariableException("HDF error call. Bailing out of LM database reader.");}



// ****************************************************************************
//  Class: avtLatticeMicrobesFileFormat
//
//  Purpose:
//      Reads in LatticeMicrobes files as a plugin to VisIt.
//
//  Programmer: jpeterson -- generated by xml2avt
//  Creation:   Wed Jan 28 16:20:52 PST 2015
//
// ****************************************************************************

const uint LM_SUPPORTED_VERSION = 4;
const uint PARTICLES_PER_WORD = 4;

class avtLatticeMicrobesFileFormat : public avtMTMDFileFormat
{
  public:
    static int readerCounts;
                       avtLatticeMicrobesFileFormat(const char *);
    virtual           ~avtLatticeMicrobesFileFormat() 
    {
       cout << "Destructing plugin..." << endl;
       if(file > 0) {
         H5Fclose(file);
       }     
       cout << "Plugin destructed" << endl;
       avtLatticeMicrobesFileFormat::readerCounts--;
    }

    //
    // This is used to return unconvention data -- ranging from material
    // information to information about block connectivity.
    //
    // virtual void      *GetAuxiliaryData(const char *var, int timestep, 
    //                                     int domain, const char *type, void *args, 
    //                                     DestructorFunction &);
    //

    void                   ActivateTimestep();

    virtual void           GetCycles(std::vector<int> &);
    virtual void           GetTimes(std::vector<double> &);

    virtual int            GetNTimesteps(void);

    virtual const char    *GetType(void)   { return "LatticeMicrobes"; };
    virtual void           FreeUpResources(void); 

    virtual vtkDataSet    *GetMesh(int, int, const char *);
    virtual vtkDataArray  *GetVar(int, int, const char *);
    virtual vtkDataArray  *GetVectorVar(int, int, const char *);

  protected:
    //////////////////
    // DATA MEMBERS //
    //////////////////
    bool initialized;
    bool hasSimulationData;

    // File handle information
    hid_t file;
    std::string filename;
    hid_t parametersGroup;
    hid_t modelGroup;
    hid_t simulationsGroup;

    // Simulation information
    hsize_t numberSimulations;
    uint replicates;
    uint numberTimesteps;
    std::vector<int> lastTimesteps;
    double latticeWriteInterval;
    std::map<std::string,std::string> parameterMap;

    // Site and Particle Names
    std::vector<std::string> particleNames;
    std::vector<int> particleNumbers;
    std::vector<std::string> siteNames;

    // Lattice Information
    uint latticeXSize;
    uint latticeYSize;
    uint latticeZSize;
    double latticeSpacing;
    uint numberSpecies;
    uint numberReactions;
    uint numberSiteTypes;
    uint particlesPerSite;
	uint wordsPerSite;  // Defined as particlesPerSite/PARTICLES_PER_WORD


    ////////////////////////
    // Internal Functions //
    ////////////////////////
    void Initialize();  // Initialize the FileReader Only when required

    // Tests for the HDF5 File
    bool sufficientLibraryCapabilities();   // Does the linked HDF5 library have the necessary capabilities (e.g. encode/decode GZIP files)
    bool isFileValid(const char *filename, char *buffer, int bufferSize); // Does the Lattice Microbes file exist and have the correct format (at least correct magic number "LMH5")

    // Functions to read the varibles onto the lattice
    void readSiteData(float *data, const char *varname);
    void readParticleData(float *data, int timestate, int domain, int varIdx, const char *varname);
    void readOccupancyData(float *data, int timestate, int domain, const char *varname);


    virtual void           PopulateDatabaseMetaData(avtDatabaseMetaData *, int);
};


#endif
