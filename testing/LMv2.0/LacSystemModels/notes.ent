#### Extrinsic_Noise_Switching ####

    #### lac_extrinsic_noise ####
    
    # Create base lac reaction model from the sbml file.
    rm -f lac.lm && lm_sbml_import lac.lm lac.sbml
    
    # Modify the switching reaction types.
    lm_setrm lac.lm "ReactionTypes(0:1)=5" "ReactionRateConstants(0,1:8)=[3.1437e-1,5.68e-3,0.0,1.2e1,2.33e-3,4e-4,1.67,8e-16]" "ReactionRateConstants(1,1:8)=[-4.9995e-2,1.74e-5,0.0,1.2e1,2.33e-3,4e-4,1.0,8e-16]" "DependencyMatrix(3,0:1)=1"

    % Setup some parameters.
    Iexs=[(10.^[-6:0.02:-4])];
    nvars=[0.0 ([5e-2 1e-1 2e-1]).^2];
    ntaus=[5.00e1 5.00e3 5.00e5];
    nreactions=[2 3 4 5]; nmeans=[0.126 0.0444 0.0111 2.1e-4];
    states={'off','on'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'};
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(Iexs)-1])));
    disp(sprintf('Iexs=(%s);',sprintf('%8.2e ',Iexs)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(nvars)-1])));
    disp(sprintf('nvars=(%s);',sprintf('%8.2e ',nvars)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('ntaus=(%s);',sprintf('%8.2e ',ntaus)));
    disp(sprintf('#           %s           %s',sprintf('%1d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nmeans)-1])));
    disp(sprintf('nreactions=(%s); nmeans=(%s)',sprintf('%1d ',nreactions),sprintf('%8.2e ',nmeans)));
    
    # Run a high resolution simulation to look at the switching dynamics.
    Iexs=(0.000e+00 1.000e-06 5.000e-06 8.000e-06 9.000e-06 9.750e-06 1.000e-05 1.056e-05 1.100e-05 1.150e-05 1.200e-05 1.264e-05 1.300e-05 1.350e-05 1.400e-05 1.450e-05 1.500e-05 1.550e-05 1.600e-05 1.700e-05 1.800e-05 1.900e-05 2.000e-05 2.100e-05 2.200e-05 2.300e-05 2.400e-05 2.500e-05 2.600e-05 2.700e-05 2.800e-05 2.900e-05 3.000e-05 4.000e-05 1.000e-04 2.000e-04 3.500e-04 5.000e-04 7.500e-04 1.000e-03 );
    nreactions=(0 2 3 2 3 2 3 3); nvars=(0.0 1.76e-3 2.19e-4 1.76e-3 2.19e-4 1.76e-3 2.19e-4 2.19e-4); ntaus=(0.0 5.00e2 5.00e2 5.00e3 5.00e3 5.00e4 5.00e4 5.00e7);
    maxTime=5e6 writeInterval=2500 noiseRecalcFraction=1e-3 parameterWriteInterval=5e3
    replicates="1-1";
    %is=`seq -f "%g" 0 17`;
    %js=`seq -f "%g" 0 4`;
    is="8";
    js="0";
    for i in $is; do
        for j in $js; do
            Iex=${Iexs[i]};
            pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};                
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            # Start the off state.
            Y0=30;
            filename="ts_${nreaction}_${Iex}_${nvar}_${ntau}.lm";
            echo "${filename} at $Y0 with $nvar,$ntau";
            cp lac.lm data/lm/${filename};
            lm_setp data/lm/${filename} maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
            lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0,3)=${Iex}" "ReactionRateConstants(1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
            lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 -gr 1 logs/${filename}.log local 1 2 1 erobert3;
        done;
    done;    

    # Run a series of simulations to calculate the pdfs.
    #            0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100 
    Iexs=(1.00e-06 1.05e-06 1.10e-06 1.15e-06 1.20e-06 1.26e-06 1.32e-06 1.38e-06 1.45e-06 1.51e-06 1.58e-06 1.66e-06 1.74e-06 1.82e-06 1.91e-06 2.00e-06 2.09e-06 2.19e-06 2.29e-06 2.40e-06 2.51e-06 2.63e-06 2.75e-06 2.88e-06 3.02e-06 3.16e-06 3.31e-06 3.47e-06 3.63e-06 3.80e-06 3.98e-06 4.17e-06 4.37e-06 4.57e-06 4.79e-06 5.01e-06 5.25e-06 5.50e-06 5.75e-06 6.03e-06 6.31e-06 6.61e-06 6.92e-06 7.24e-06 7.59e-06 7.94e-06 8.32e-06 8.71e-06 9.12e-06 9.55e-06 1.00e-05 1.05e-05 1.10e-05 1.15e-05 1.20e-05 1.26e-05 1.32e-05 1.38e-05 1.45e-05 1.51e-05 1.58e-05 1.66e-05 1.74e-05 1.82e-05 1.91e-05 2.00e-05 2.09e-05 2.19e-05 2.29e-05 2.40e-05 2.51e-05 2.63e-05 2.75e-05 2.88e-05 3.02e-05 3.16e-05 3.31e-05 3.47e-05 3.63e-05 3.80e-05 3.98e-05 4.17e-05 4.37e-05 4.57e-05 4.79e-05 5.01e-05 5.25e-05 5.50e-05 5.75e-05 6.03e-05 6.31e-05 6.61e-05 6.92e-05 7.24e-05 7.59e-05 7.94e-05 8.32e-05 8.71e-05 9.12e-05 9.55e-05 1.00e-04 );
    #            0        1        2        3 
    nvars=(0.00e+00 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(5.00e+01 5.00e+03 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    maxTime=1e8 writeInterval=5e3 noiseRecalcFraction=1e-3 parameterWriteInterval=5e3
    replicates="1-1000";
    is=`seq -f "%g" 0 100`;
    js=`seq -f "%g" 0 3`;
    ks=`seq -f "%g" 2 2`;
    ls=`seq -f "%g" 1 1 `;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    Iex=${Iexs[i]};
                    nvar=${nvars[j]};
                    ntau=${ntaus[k]};
                    nreaction=${nreactions[l]}; nmean=${nmeans[l]};
                    nvarActual=`awk -v a="${nvar}" -v b="${nmean}" 'BEGIN{print (a * b * b)}'`
                    
                    # Run the simulations.
                    Y0=0;
                    filename="pdf_off_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ `lm_check_complete logs/${filename}.log` != 1000 ]; then
                        echo "${filename} with $nvarActual";
                        if [ -e "logs/${filename}.log" ]; then rm logs/${filename}.log; fi;
                        cp lac.lm data/lm/${filename};
                        lm_setp data/lm/${filename} fptTrackingList=3 maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                        lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0:1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvarActual},${ntau}]" > /dev/null;
                        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
                        lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 5 8 0 erobert3;
                    fi;
                    
                    # Run the simulations.
                    Y0=2000;
                    filename="pdf_on_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ `lm_check_complete logs/${filename}.log` != 1000 ]; then
                        echo "${filename} with $nvarActual";
                        if [ -e "logs/${filename}.log" ]; then rm logs/${filename}.log; fi;
                        cp lac.lm data/lm/${filename};
                        lm_setp data/lm/${filename} fptTrackingList=3 maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                        lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0:1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvarActual},${ntau}]" > /dev/null;
                        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
                        lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 5 8 0 erobert3;
                    fi;
                done;
            done;
        done;
    done;

    # Calculate the pdfs on the cluster.
    #            0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100 
    Iexs=(1.00e-06 1.05e-06 1.10e-06 1.15e-06 1.20e-06 1.26e-06 1.32e-06 1.38e-06 1.45e-06 1.51e-06 1.58e-06 1.66e-06 1.74e-06 1.82e-06 1.91e-06 2.00e-06 2.09e-06 2.19e-06 2.29e-06 2.40e-06 2.51e-06 2.63e-06 2.75e-06 2.88e-06 3.02e-06 3.16e-06 3.31e-06 3.47e-06 3.63e-06 3.80e-06 3.98e-06 4.17e-06 4.37e-06 4.57e-06 4.79e-06 5.01e-06 5.25e-06 5.50e-06 5.75e-06 6.03e-06 6.31e-06 6.61e-06 6.92e-06 7.24e-06 7.59e-06 7.94e-06 8.32e-06 8.71e-06 9.12e-06 9.55e-06 1.00e-05 1.05e-05 1.10e-05 1.15e-05 1.20e-05 1.26e-05 1.32e-05 1.38e-05 1.45e-05 1.51e-05 1.58e-05 1.66e-05 1.74e-05 1.82e-05 1.91e-05 2.00e-05 2.09e-05 2.19e-05 2.29e-05 2.40e-05 2.51e-05 2.63e-05 2.75e-05 2.88e-05 3.02e-05 3.16e-05 3.31e-05 3.47e-05 3.63e-05 3.80e-05 3.98e-05 4.17e-05 4.37e-05 4.57e-05 4.79e-05 5.01e-05 5.25e-05 5.50e-05 5.75e-05 6.03e-05 6.31e-05 6.61e-05 6.92e-05 7.24e-05 7.59e-05 7.94e-05 8.32e-05 8.71e-05 9.12e-05 9.55e-05 1.00e-04 );
    #            0        1        2        3 
    nvars=(0.00e+00 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(5.00e+01 5.00e+03 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    R=1000; ts=20000; states=(on off);
    is=`seq -f "%g" 0 100`;
    js=`seq -f "%g" 0 3`;
    ks=`seq -f "%g" 2 2`;
    ls=`seq -f "%g" 1 1 `;
    ms="0 1";
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    for m in $ms; do
                        Iex=${Iexs[i]};
                        nvar=${nvars[j]};
                        ntau=${ntaus[k]};
                        nreaction=${nreactions[l]};
                        filename="pdf_${states[m]}_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                        if [ -e "data/lm/${filename}" ]; then
                            echo "Processing $filename"
                            matlab-submit calc_pdf "'data/matlab/pdf.dat'" "'data/lm/${filename}'" $((3+1)) ${R} ${ts} $((i+1)) $((j+1)) $((k+1)) $((l+1)) $((m+1)) "logs/calc_pdf_${filename}.log" sif 1 erobert3;
                        fi
                    done;
                done;
            done;
        done;
    done;

    # Calculate the fixed points from the pdfs on the cluster.
    Iexs=(0.000e+00 1.000e-06 5.000e-06 8.000e-06 9.000e-06 9.750e-06 1.000e-05 1.056e-05 1.100e-05 1.150e-05 1.200e-05 1.264e-05 1.300e-05 1.350e-05 1.400e-05 1.450e-05 1.500e-05 1.550e-05 1.600e-05 1.700e-05 1.800e-05 1.900e-05 2.000e-05 2.100e-05 2.200e-05 2.300e-05 2.400e-05 2.500e-05 2.600e-05 2.700e-05 2.800e-05 2.900e-05 3.000e-05 4.000e-05 1.000e-04 2.000e-04 3.500e-04 5.000e-04 7.500e-04 1.000e-03 );
    nreactions=(0 2 3 2 3 2 3); nvars=(0.0 1.76e-3 2.19e-4 1.76e-3 2.19e-4 1.76e-3 2.19e-4); ntaus=(0.0 5.00e2 5.00e2 5.00e3 5.00e3 5.00e4 5.00e4);
    states=("off" "on");
    is=`seq -f "%g" 0 39`;
    js=`seq -f "%g" 3 6`;
    ks=`seq -f "%g" 0 1`;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                echo "Starting $i,$j,$k"
                matlab-submit calc_fp "'data/matlab/fp.dat'" "'data/matlab/pdf.dat'" $((i+1)) $((j+1)) $((k+1)) "logs/calc_fp_${i}_${j}_${k}.log" sif 1 erobert3;
            done;
        done;
    done;
    
    % Print the fixed points.
    tmp=zeros(length(Iexs),3);
    for i=[1:size(Iexs,2)]
        if fps{i,1,1}(1) > 0 && fps{i,1,2}(1) > 0 && fps{i,1,1}(3) > 0 && fps{i,1,2}(3) > 0
            tmp(i,1) = fps{i,1,1}(1);
            if fps{i,1,1}(2) > 0 && fps{i,1,2}(2) > 0
                tmp(i,2) = round((fps{i,1,1}(2)+fps{i,1,2}(2))/2);
            elseif fps{i,1,1}(2) > 0
                tmp(i,2) = fps{i,1,1}(2);
            elseif fps{i,1,2}(2) > 0
                tmp(i,2) = fps{i,1,2}(2);
            else
                error 'Ooops';
            end
            tmp(i,3) = fps{i,1,2}(3);
        elseif fps{i,1,1}(1) > 0 && fps{i,1,2}(1) > 0
            tmp(i,1) = fps{i,1,1}(1);
            tmp(i,2) = -1;
            tmp(i,3) = -1;
        elseif fps{i,1,1}(3) > 0 && fps{i,1,2}(3) > 0
            tmp(i,1) = -1;
            tmp(i,2) = -1;
            tmp(i,3) = fps{i,1,2}(3);
        end
    end    
    disp(sprintf('p1s=(%s);\np2s=(%s);\np3s=(%s);',sprintf('%4d ',round(reshape(tmp(:,1),size(tmp,1),1))),sprintf('%4d ',round(reshape(tmp(:,2),size(tmp,1),1))),sprintf('%4d ',round(reshape(tmp(:,3),size(tmp,1),1)))));

    # Run a series of simulations to calculate the switching times.
    Iexs=(0.000e+00 1.000e-06 5.000e-06 8.000e-06 9.000e-06 9.750e-06 1.000e-05 1.056e-05 1.100e-05 1.150e-05 1.200e-05 1.264e-05 1.300e-05 1.350e-05 1.400e-05 1.450e-05 1.500e-05 1.550e-05 1.600e-05 1.700e-05 1.800e-05 1.900e-05 2.000e-05 2.100e-05 2.200e-05 2.300e-05 2.400e-05 2.500e-05 2.600e-05 2.700e-05 2.800e-05 2.900e-05 3.000e-05 4.000e-05 1.000e-04 2.000e-04 3.500e-04 5.000e-04 7.500e-04 1.000e-03 );
    p1s=(  16   18   25   32   35   38   38   40   43   45   47   49   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 );
    p2s=(  -1   -1   -1   -1   -1 1117 1008  824  677  580  545  570   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 );
    p3s=(  -1   -1   -1   -1   -1 1467 1601 1783 1869 1942 1996 2053 2062 2090 2123 2143 2170 2181 2197 2224 2243 2267 2271 2284 2297 2299 2312 2315 2317 2326 2327 2335 2335 2361 2386 2387 2388 2391 2392 2389 );
    nreactions=(0 2 3 2 3 2 3); nvars=(0.0 1.76e-3 2.19e-4 1.76e-3 2.19e-4 1.76e-3 2.19e-4); ntaus=(0.0 5.00e2 5.00e2 5.00e3 5.00e3 5.00e4 5.00e4);
    maxTime=1e10 writeInterval=1e8 noiseRecalcFraction=1e-3 parameterWriteInterval=1e8
    replicates="1-10000";
    #is=`seq -f "%g" 8 8`;
    #js=`seq -f "%g" 0 0`;
    is="8";
    js="0";
    for i in $is; do
        for j in $js; do
            Iex=${Iexs[i]};
            pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};                
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            if [ $p2 -ge 0 ]; then
            
                # Start the off state.
                #Y0=${p1}; Ymax=${p3};
                #filename="fpt_off_on_${nreaction}_${Iex}_${nvar}_${ntau}.lm";
                #echo "${filename} from $Y0 to $Ymax";
                #cp lac.lm data/lm/${filename};
                #lm_setp data/lm/${filename} Ymax=${Ymax} maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                #lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0,3)=${Iex}" "ReactionRateConstants(1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
                #lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
                #lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 4 8 0 erobert3;
                #lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 8 1 erobert3;
            
                # Start the on state.
                Y0=${p3}; Ymin=${p1};
                filename="fpt_on_off_${nreaction}_${Iex}_${nvar}_${ntau}.lm";
                echo "${filename} from $Y0 to $Ymin";
                cp lac.lm data/lm/${filename};
                lm_setp data/lm/${filename} Ymin=${Ymin} maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0,3)=${Iex}" "ReactionRateConstants(1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
                #lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
                #lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 4 8 0 erobert3;
                lm-submit data/lm/${filename} -m lm::cme::LacHillSwitch -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 8 1 erobert3;
            fi;
        done;
    done;
    

    # Calculate the Pts.
    species=3; maxCount=6000; R=10000; i=0; j=0; k=0;
    filename="lac_noise";
    outputFilename="'data/matlab/pt.dat'";
    inputFilename="'data/lm/${filename}.lm'";
    logFilename="logs/pt_${filename}.log";
    if [ -e "data/lm/${filename}.lm" ]; then
        echo "Calculating pt from ${inputFilename} into ${outputFilename}";
        matlab-submit calc_pt ${outputFilename} ${inputFilename} $((species+1)) ${maxCount} ${R} $((i+1)) $((j+1)) $((k+1)) ${logFilename} sif 1 erobert3;
    fi
    
    # Calculate the mean first passage times on the cluster.
    Iexs=(0.000e+00 1.000e-06 5.000e-06 8.000e-06 9.000e-06 9.750e-06 1.000e-05 1.056e-05 1.100e-05 1.150e-05 1.200e-05 1.264e-05 1.300e-05 1.350e-05 1.400e-05 1.450e-05 1.500e-05 1.550e-05 1.600e-05 1.700e-05 1.800e-05 1.900e-05 2.000e-05 2.100e-05 2.200e-05 2.300e-05 2.400e-05 2.500e-05 2.600e-05 2.700e-05 2.800e-05 2.900e-05 3.000e-05 4.000e-05 1.000e-04 2.000e-04 3.500e-04 5.000e-04 7.500e-04 1.000e-03 );
    p1s=(  16   18   25   32   35   38   38   40   43   45   47   49   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 );
    p2s=(  -1   -1   -1   -1   -1 1117 1008  824  677  580  545  570   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 );
    p3s=(  -1   -1   -1   -1   -1 1467 1601 1783 1869 1942 1996 2053 2062 2090 2123 2143 2170 2181 2197 2224 2243 2267 2271 2284 2297 2299 2312 2315 2317 2326 2327 2335 2335 2361 2386 2387 2388 2391 2392 2389 );
    nreactions=(0 2 3 2 3 2 3); nvars=(0.0 1.76e-3 2.19e-4 1.76e-3 2.19e-4 1.76e-3 2.19e-4); ntaus=(0.0 5.00e2 5.00e2 5.00e3 5.00e3 5.00e4 5.00e4);
    transitions=("off_on" "on_off");
    is=`seq -f "%g" 8 8`;
    js=`seq -f "%g" 0 0`;
    ks=`seq -f "%g" 1 1`;
    R=10000; tf=1e10;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                Iex=${Iexs[i]};
                pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};                
                nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
                transition=${transitions[k]}
                filename="fpt_${transition}_${nreaction}_${Iex}_${nvar}_${ntau}.lm";
                outputFilename="'data/matlab/mfpt.dat'";
                inputFilename="'data/lm/${filename}'";
                logFilename="logs/calc_${filename}.log";
                if [ -e "data/lm/${filename}" ]; then
                    echo "Calculating mfpt from ${inputFilename} into ${outputFilename}";
                    matlab-submit calc_mfpt ${outputFilename} ${inputFilename} 3 ${R} ${tf} ${p1} ${p2} ${p3} $((i+1)) $((j+1)) $((k+1)) ${logFilename} odin 1 erobert3;
                fi
            done;
        done;
    done;
    
    % Load the data.
    Pts=cellload('data/matlab/pt.dat',1,1,1,3);
    pdfs=cellload('data/matlab/pdf.dat',101,4,3,4,2);
    fps=cellload('data/matlab/fp.dat',40,7,2);
    mfpt=cellload('data/matlab/mfpt.dat',9,1,2);
    
    % Plot an individual trajectory.
    i=9; j=1; R=1;
    Iex=Iexs(i);
    nvar=nvars(j); ntau=ntaus(j);
    filename=sprintf('data/lm/ts_0_%9.3e_0.0_0.0.lm',Iex);
    disp(sprintf('Loading %s',filename));
    samples=[1:1:2000];
    ts=cast(h5read(filename,sprintf('/Simulations/%07d/SpeciesCountTimes',R)),'double');
    data=cast(permute(h5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
    for t=[1:1]
        subplot(3,1,1);
        N=pdfs{i,j,1}(1,:);
        X=pdfs{i,j,1}(2,:);
        plot(N, X);
        xlabel('LacY Count'); ylabel('Probability');
        hold('on');
        plot(data(t,4), X(data(t,4)), 'or', 'MarkerEdgeColor','k','MarkerFaceColor','r','MarkerSize',10);
        hold('off');
        subplot(3,1,2);
        plotstep(ts,data(:,4),'b');
        ax=axis; axis([ts(1) ts(end) ax(3) ax(4)]); xlabel('Time (s^{-1})'); ylabel('LacY Count');
        ax=axis; axis([8e5 12e5 ax(3) ax(4)]); xlabel('Time (s^{-1})'); ylabel('LacY Count');
        %hold('on');
        %plot([ts(t) ts(t)], [ax(3) ax(4)], 'r', 'LineWidth',2);
        %hold('off');
        subplot(3,1,3);
        plotstep(ts,data(:,3),'b');
        ax=axis; axis([ts(1) ts(end) ax(3) ax(4)]); xlabel('Time (s^{-1})'); ylabel('LacY Count');
        ax=axis; axis([8e5 12e5 ax(3) ax(4)]); xlabel('Time (s^{-1})'); ylabel('LacY Count');
        %saveas(gcf,sprintf('figures/matlab/switching/%04d.png',t), 'png');
    end
    
    # Resize the frames (1200x901 -> 600x450).
    identify 0001.png
    for frame in `seq -f "%04g" 1001 2001`; do
        echo "Resizing $frame";
        convert ${frame}.png -resize x600 resized-${frame}.png;
    done;
    identify resized-0001.png 
    
    # Create a movie from the frames.
    rm ../../switching.mov;
    ffmpeg -i resized-%04d.png -r 25 -b 2000000 -f mov -vcodec mpeg4 ../../switching.mov;

    
    % Plot Pt.
    i=1; si=1;
    Pt=Pts{i,si,1,1}(1:6000,1:1:87);
    logimage(Pt,5);
    
    % Plot the final pdf.
    rows=1; cols=1; plotIndex=1;
    for i=[1]
        for si=[1]
            subplot(rows,cols,plotIndex);
            X=Pts{i,si,1,1}(:,end)';
            N=Pts{i,si,1,2};
            bar(N, X);
            m=sum(N.*X);
            v=sum(((N-m).^2).*X);
            ax=axis; axis([0 500 0 5e-2]); xlabel('p'); ylabel('P_y'); title(sprintf('PDF (\\mu=%0.2e,\\sigma^2=%0.2e)',m,v));
            plotIndex=plotIndex+1;
        end
    end
    
    % Plot the pdfs.
    rows=3; cols=1; plotIndex=1;
    for i=[20]
        for si=[2]
            for j=[1 5 7]
                Iex=Iexs(i); 
                subplot(rows,cols,plotIndex);
                if size(pdfs{i,j,si},1) > 0
                    p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1;
                    N=pdfs{i,j,si}(1,:);
                    X=pdfs{i,j,si}(2,:);
                    loglog(N, X);
                    m=sum(N.*X);
                    v=sum(((N-m).^2).*X);
                    %ax=axis; axis([0 3000 1e-7 1e-1]); xlabel('Y'); ylabel('P(Y)'); title(sprintf('PDF (state=%s,I_{ex}=%9.3e)',states{si},Iex));
                    if fps{i,j,si}(1) > 0, vline(fps{i,j,si}(1),'g',sprintf('%d',fps{i,j,si}(1)));, end
                    if fps{i,j,si}(2) > 0, vline(fps{i,j,si}(2),'r',sprintf('%d',fps{i,j,si}(2)));, end
                    if fps{i,j,si}(3) > 0, vline(fps{i,j,si}(3),'g',sprintf('%d',fps{i,j,si}(3)));, end
                    if p1 > 0, vline(p1,'g:');, end
                    if p2 > 0, vline(p2,'r:');, end
                    if p3 > 0, vline(p3,'g:');, end
                    %disp(sprintf('y    =(%s);',sprintf('%8d ',N)));
                    %disp(sprintf('P(y) =(%s);',sprintf('%8.2e ',X)));
                else
                    newplot;
                end
                plotIndex=plotIndex+1;
                if plotIndex > rows*cols
                    plotIndex=1;
                    pause;
                end
            end
        end
    end

    % Plot the fixed points as a function of Iex.
    xs=[1e-6:1e-7:19.9e-6 2e-5:1e-7:9.9e-5 1e-4:1e-5:9.9e-4 1e-3:1e-4:1e-3];
    p1xs=[];
    p1ys=[];
    p2xs=[];
    p2ys=[];
    p3xs=[];
    p3ys=[];
    for x=xs
        [p1,p2,p3]=lac_switch_fp(x,a,b,kap0min,kap0max,h0,I050,kap1min,kap1max,h1,I150,kit,kid,KM,V);
        if p1 >= 0
            p1xs(end+1)=x;
            p1ys(end+1)=p1;
        end
        if p2 >= 0
            p2xs(end+1)=x;
            p2ys(end+1)=p2;
        end
        if p3 >= 0
            p3xs(end+1)=x;
            p3ys(end+1)=p3;
        end
    end
    loglog(p1xs, p1ys, 'g');
    hold('on');
    loglog(p2xs, p2ys, 'r');
    loglog(p3xs, p3ys, 'g');
    symbols={'o','x','v','*','^'};
    for j=[1]
        sp1xs=[];
        sp1ys=[];
        sp2xs=[];
        sp2ys=[];
        sp3xs=[];
        sp3ys=[];
        for i=[1:size(Iexs,2)]
            if fps{i,j,1}(1) > 0 && fps{i,j,2}(1) > 0
                if fps{i,j,1}(1) ~= fps{i,j,2}(1), disp(sprintf('Different fps %d %d',fps{i,j,1}(1),fps{i,j,2}(1)));, end
                sp1xs(end+1)=Iexs(i);
                sp1ys(end+1)=fps{i,j,1}(1);
            end
            if fps{i,j,1}(2) > 0 && fps{i,j,2}(2) > 0
                if fps{i,j,1}(2) ~= fps{i,j,2}(2), disp(sprintf('Different fps %d %d',fps{i,j,1}(2),fps{i,j,2}(2)));, end
                sp2xs(end+1)=Iexs(i);
                sp2ys(end+1)=round((fps{i,j,1}(2)+fps{i,j,2}(2))/2);
            end
            if fps{i,j,1}(3) > 0 && fps{i,j,2}(3) > 0
                if fps{i,j,1}(3) ~= fps{i,j,2}(3), disp(sprintf('Different fps %d %d',fps{i,j,1}(3),fps{i,j,2}(3)));, end
                sp3xs(end+1)=Iexs(i);
                sp3ys(end+1)=fps{i,j,2}(3);
            end
        end
        scatter(sp1xs,sp1ys,sprintf('g%s'),symbols{j});
        scatter(sp2xs,sp2ys,sprintf('r%s'),symbols{j});
        scatter(sp3xs,sp3ys,sprintf('g%s'),symbols{j});
    end
    hold('off');
    axis([1e-6-1e-7 xs(end) 10 3000]); xlabel('[I_{ex}] ({\mu}M)'); ylabel('Protein Count'); title('Fixed point position');
    
    % Plot the mftps.
    rows=2; cols=1; plotIndex=1; tf=1e10;
    for ti=[1:2]
        for i=[9]
            for j=[1]
                Iex=Iexs(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*p3; pMaxi=pMax+1;
                nvar=nvars(j); ntau=ntaus(j);
                subplot(rows,cols,plotIndex);
                if size(mfpt{i,j,ti},1) > 0
                    X=mfpt{i,j,ti}(1,:);
                    semilogy(X, mfpt{i,j,ti}(5,:), 'b');
                    %hold('on');
                    %loglog(X, mfpt{i,j,ti}(3,:), 'b:');
                    %loglog(X, mfpt{i,j,ti}(4,:), 'b:');
                    %loglog(X, mfpt{i,j,ti}(5,:), 'g');
                    %loglog(X, mfpt{i,j,ti}(6,:), 'g:');
                    %loglog(X, mfpt{i,j,ti}(7,:), 'g:');
                    %hold('off');
                    ax=axis; axis([0 3000 1e-2 tf*10]); ylabel('Time (s)'); title(sprintf('MFPT (%s,I_{ex}=%0.2e,\\sigma^2_c=%0.0f,\\tau_c=%0.2e,fpt_{P2}=%0.2e)',transitionStrings{ti},Iex,nvar,ntau,mfpt{i,j,ti}(5,p2i)));
                    %vline(p1);
                    %vline(p2);
                    %vline(p3);                
                    if fps{i,j,si}(1) > 0, vline(fps{i,j,si}(1),'g',sprintf('%d',fps{i,j,si}(1)));, end
                    if fps{i,j,si}(2) > 0, vline(fps{i,j,si}(2),'r',sprintf('%d',fps{i,j,si}(2)));, end
                    if fps{i,j,si}(3) > 0, vline(fps{i,j,si}(3),'g',sprintf('%d',fps{i,j,si}(3)));, end
                end
                plotIndex=plotIndex+1;
            end
        end
    end

    % Plot the mfpt as a function of Iex.
    rows=3; cols=3; col=1; is=[6:12]; js=[1 2 5];
    for j=js
        xs=zeros(size(is,2),2);
        ys=zeros(size(is,2),2);
        yl=zeros(size(is,2),2);
        yu=zeros(size(is,2),2);
        for ti=[1 2]
            subplot(rows,cols,(ti-1)*cols+col);
            for i=is
                Iex=Iexs(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*p3; pMaxi=pMax+1;
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,ti},1) > 0
                    xs(i-is(1)+1,ti)=Iex;
                    ys(i-is(1)+1,ti)=mfpt{i,j,ti}(5,p2i).*d1;
                    yl(i-is(1)+1,ti)=mfpt{i,j,ti}(6,p2i).*d1;
                    yu(i-is(1)+1,ti)=mfpt{i,j,ti}(7,p2i).*d1;
                end
            end
            semilogy(xs(:,ti),ys(:,ti),'ro');
            ploterrorbar(xs(:,ti),yl(:,ti),yu(:,ti),'r','-');
            axis([Iexs(is(1))-0.01*Iexs(is(1)) Iexs(is(end))+0.01*Iexs(is(1)) 1e0 1e5]); xlabel('I_{ex}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT'));
            %disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
            %disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
            %disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
            %disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
        end
        subplot(rows,cols,2*cols+col);
        plot(xs(:,1),ys(:,1)./(ys(:,1)+ys(:,2)),'rx-');
        plot(xs(:,1),ys(:,1)./(ys(:,1)+ys(:,2)),'rx-');
        hold('on');
        plot(xs(:,1),ys(:,2)./(ys(:,1)+ys(:,2)),'bx-');
        hold('off');
        axis([Iexs(is(1))-0.01*Iexs(is(1)) Iexs(is(end))+0.01*Iexs(is(1)) 0 1]); xlabel('I_{ex}'); ylabel('P(state)');
        col=col+1;
    end
    
    
    #### lac_extrinsic_noise_phase_space ####
    
    # Create base lac reaction model from the sbml file.
    rm -f lac.lm && lm_sbml_import lac.lm lac.sbml
    
    # Modify the switching reaction types.
    lm_setrm lac.lm "ReactionTypes(0:1)=5" "ReactionRateConstants(0,1:8)=[3.1437e-1,5.68e-3,0.0,1.2e1,2.33e-3,4e-4,1.67,8e-16]" "ReactionRateConstants(1,1:8)=[-4.9995e-2,1.74e-5,0.0,1.2e1,2.33e-3,4e-4,1.0,8e-16]" "DependencyMatrix(3,0:1)=1"

    % Setup some parameters.
    Iexs=[(10.^[-6:0.02:-4])];
    nvars=[0.0 ([5e-2 1e-1 2e-1]).^2];
    ntaus=[5.00e1 5.00e3 5.00e5];
    nreactions=[2 3 4 5]; nmeans=[0.126 0.0444 0.0111 2.1e-4];
    states={'on','off'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'};
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(Iexs)-1])));
    disp(sprintf('Iexs=(%s);',sprintf('%8.2e ',Iexs)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(nvars)-1])));
    disp(sprintf('nvars=(%s);',sprintf('%8.2e ',nvars)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('ntaus=(%s);',sprintf('%8.2e ',ntaus)));
    disp(sprintf('#           %s           %s',sprintf('%1d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nmeans)-1])));
    disp(sprintf('nreactions=(%s); nmeans=(%s)',sprintf('%1d ',nreactions),sprintf('%8.2e ',nmeans)));
    
    # Run a series of simulations to calculate the pdfs.
    #            0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100 
    Iexs=(1.00e-06 1.05e-06 1.10e-06 1.15e-06 1.20e-06 1.26e-06 1.32e-06 1.38e-06 1.45e-06 1.51e-06 1.58e-06 1.66e-06 1.74e-06 1.82e-06 1.91e-06 2.00e-06 2.09e-06 2.19e-06 2.29e-06 2.40e-06 2.51e-06 2.63e-06 2.75e-06 2.88e-06 3.02e-06 3.16e-06 3.31e-06 3.47e-06 3.63e-06 3.80e-06 3.98e-06 4.17e-06 4.37e-06 4.57e-06 4.79e-06 5.01e-06 5.25e-06 5.50e-06 5.75e-06 6.03e-06 6.31e-06 6.61e-06 6.92e-06 7.24e-06 7.59e-06 7.94e-06 8.32e-06 8.71e-06 9.12e-06 9.55e-06 1.00e-05 1.05e-05 1.10e-05 1.15e-05 1.20e-05 1.26e-05 1.32e-05 1.38e-05 1.45e-05 1.51e-05 1.58e-05 1.66e-05 1.74e-05 1.82e-05 1.91e-05 2.00e-05 2.09e-05 2.19e-05 2.29e-05 2.40e-05 2.51e-05 2.63e-05 2.75e-05 2.88e-05 3.02e-05 3.16e-05 3.31e-05 3.47e-05 3.63e-05 3.80e-05 3.98e-05 4.17e-05 4.37e-05 4.57e-05 4.79e-05 5.01e-05 5.25e-05 5.50e-05 5.75e-05 6.03e-05 6.31e-05 6.61e-05 6.92e-05 7.24e-05 7.59e-05 7.94e-05 8.32e-05 8.71e-05 9.12e-05 9.55e-05 1.00e-04 );
    #            0        1        2        3 
    nvars=(0.00e+00 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(5.00e+01 5.00e+03 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    maxTime=1e8 writeInterval=5e3 noiseRecalcFraction=1e-3 parameterWriteInterval=5e3
    replicates="1-1000";
    is=`seq -f "%g" 0 100`;
    js=`seq -f "%g" 2 2`;
    ks=`seq -f "%g" 1 1`;
    ls=`seq -f "%g" 1 1 `;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    Iex=${Iexs[i]};
                    nvar=${nvars[j]};
                    ntau=${ntaus[k]};
                    nreaction=${nreactions[l]}; nmean=${nmeans[l]};
                    nvarActual=`awk -v a="${nvar}" -v b="${nmean}" 'BEGIN{print (a * b * b)}'`
                    
                    # Run the simulations.
                    Y0=0;
                    filename="pdf_off_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ `lm_check_complete logs/${filename}.log` != 1000 ]; then
                        echo "${filename} with $nvarActual";
                        if [ -e "logs/${filename}.log" ]; then rm logs/${filename}.log; fi;
                        cp lac.lm data/lm/${filename};
                        lm_setp data/lm/${filename} fptTrackingList=3 maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                        lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0:1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvarActual},${ntau}]" > /dev/null;
                        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
                        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 5 8 0 erobert3;
                        lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log thor 5 2 0 erobert3;
                    fi;
                    
                    # Run the simulations.
                    Y0=2000;
                    filename="pdf_on_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ `lm_check_complete logs/${filename}.log` != 1000 ]; then
                        echo "${filename} with $nvarActual";
                        if [ -e "logs/${filename}.log" ]; then rm logs/${filename}.log; fi;
                        cp lac.lm data/lm/${filename};
                        lm_setp data/lm/${filename} fptTrackingList=3 maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                        lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0:1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvarActual},${ntau}]" > /dev/null;
                        lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
                        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 5 8 0 erobert3;
                    fi;
                done;
            done;
        done;
    done;

    # Calculate the pdfs on the cluster.
    #            0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100 
    Iexs=(1.00e-06 1.05e-06 1.10e-06 1.15e-06 1.20e-06 1.26e-06 1.32e-06 1.38e-06 1.45e-06 1.51e-06 1.58e-06 1.66e-06 1.74e-06 1.82e-06 1.91e-06 2.00e-06 2.09e-06 2.19e-06 2.29e-06 2.40e-06 2.51e-06 2.63e-06 2.75e-06 2.88e-06 3.02e-06 3.16e-06 3.31e-06 3.47e-06 3.63e-06 3.80e-06 3.98e-06 4.17e-06 4.37e-06 4.57e-06 4.79e-06 5.01e-06 5.25e-06 5.50e-06 5.75e-06 6.03e-06 6.31e-06 6.61e-06 6.92e-06 7.24e-06 7.59e-06 7.94e-06 8.32e-06 8.71e-06 9.12e-06 9.55e-06 1.00e-05 1.05e-05 1.10e-05 1.15e-05 1.20e-05 1.26e-05 1.32e-05 1.38e-05 1.45e-05 1.51e-05 1.58e-05 1.66e-05 1.74e-05 1.82e-05 1.91e-05 2.00e-05 2.09e-05 2.19e-05 2.29e-05 2.40e-05 2.51e-05 2.63e-05 2.75e-05 2.88e-05 3.02e-05 3.16e-05 3.31e-05 3.47e-05 3.63e-05 3.80e-05 3.98e-05 4.17e-05 4.37e-05 4.57e-05 4.79e-05 5.01e-05 5.25e-05 5.50e-05 5.75e-05 6.03e-05 6.31e-05 6.61e-05 6.92e-05 7.24e-05 7.59e-05 7.94e-05 8.32e-05 8.71e-05 9.12e-05 9.55e-05 1.00e-04 );
    #            0        1        2        3 
    nvars=(0.00e+00 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(5.00e+01 5.00e+03 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    R=1000; ts=20000; states=(on off);
    is=`seq -f "%g" 0 100`;
    js=`seq -f "%g" 2 2`;
    ks=`seq -f "%g" 1 1`;
    ls=`seq -f "%g" 1 1 `;
    ms="0 1";
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    for m in $ms; do
                        Iex=${Iexs[i]};
                        nvar=${nvars[j]};
                        ntau=${ntaus[k]};
                        nreaction=${nreactions[l]};
                        filename="pdf_${states[m]}_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                        if [ -e "data/lm/${filename}" ]; then
                            echo "Processing $filename"
                            matlab-submit calc_pdf "'data/matlab/pdf.dat'" "'data/lm/${filename}'" $((3+1)) ${R} ${ts} $((i+1)) $((j+1)) $((k+1)) $((l+1)) $((m+1)) "logs/calc_pdf_${filename}.log" sif 1 erobert3;
                        fi
                    done;
                done;
            done;
        done;
    done;

    # Calculate the fixed points from the pdfs on the cluster.
    #            0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100 
    Iexs=(1.00e-06 1.05e-06 1.10e-06 1.15e-06 1.20e-06 1.26e-06 1.32e-06 1.38e-06 1.45e-06 1.51e-06 1.58e-06 1.66e-06 1.74e-06 1.82e-06 1.91e-06 2.00e-06 2.09e-06 2.19e-06 2.29e-06 2.40e-06 2.51e-06 2.63e-06 2.75e-06 2.88e-06 3.02e-06 3.16e-06 3.31e-06 3.47e-06 3.63e-06 3.80e-06 3.98e-06 4.17e-06 4.37e-06 4.57e-06 4.79e-06 5.01e-06 5.25e-06 5.50e-06 5.75e-06 6.03e-06 6.31e-06 6.61e-06 6.92e-06 7.24e-06 7.59e-06 7.94e-06 8.32e-06 8.71e-06 9.12e-06 9.55e-06 1.00e-05 1.05e-05 1.10e-05 1.15e-05 1.20e-05 1.26e-05 1.32e-05 1.38e-05 1.45e-05 1.51e-05 1.58e-05 1.66e-05 1.74e-05 1.82e-05 1.91e-05 2.00e-05 2.09e-05 2.19e-05 2.29e-05 2.40e-05 2.51e-05 2.63e-05 2.75e-05 2.88e-05 3.02e-05 3.16e-05 3.31e-05 3.47e-05 3.63e-05 3.80e-05 3.98e-05 4.17e-05 4.37e-05 4.57e-05 4.79e-05 5.01e-05 5.25e-05 5.50e-05 5.75e-05 6.03e-05 6.31e-05 6.61e-05 6.92e-05 7.24e-05 7.59e-05 7.94e-05 8.32e-05 8.71e-05 9.12e-05 9.55e-05 1.00e-04 );
    #            0        1        2        3 
    nvars=(0.00e+00 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(5.00e+01 5.00e+03 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    states=(on off);
    is=`seq -f "%g" 0 100`;
    js=`seq -f "%g" 0 3`;
    ks=`seq -f "%g" 2 2`;
    ls=`seq -f "%g" 1 1 `;
    ms="0 1";
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    for m in $ms; do
                        echo "Processing $i,$j,$k,$l,$m"
                        matlab-submit calc_fp "'data/matlab/fp.dat'" "'data/matlab/pdf.dat'" $((i+1)) $((j+1)) $((k+1)) $((l+1)) $((m+1)) "logs/calc_fp_${i}_${j}_${k}_${l}_${m}.log" sif 1 erobert3;
                    done;
                done;
            done;
        done;
    done;
    
    % Print the fixed points.
    tmp=zeros(length(Iexs),3);
    for i=[1:size(Iexs,2)]
        if fps{i,1,1}(1) > 0 && fps{i,1,2}(1) > 0 && fps{i,1,1}(3) > 0 && fps{i,1,2}(3) > 0
            tmp(i,1) = fps{i,1,1}(1);
            if fps{i,1,1}(2) > 0 && fps{i,1,2}(2) > 0
                tmp(i,2) = round((fps{i,1,1}(2)+fps{i,1,2}(2))/2);
            elseif fps{i,1,1}(2) > 0
                tmp(i,2) = fps{i,1,1}(2);
            elseif fps{i,1,2}(2) > 0
                tmp(i,2) = fps{i,1,2}(2);
            else
                error 'Ooops';
            end
            tmp(i,3) = fps{i,1,2}(3);
        elseif fps{i,1,1}(1) > 0 && fps{i,1,2}(1) > 0
            tmp(i,1) = fps{i,1,1}(1);
            tmp(i,2) = -1;
            tmp(i,3) = -1;
        elseif fps{i,1,1}(3) > 0 && fps{i,1,2}(3) > 0
            tmp(i,1) = -1;
            tmp(i,2) = -1;
            tmp(i,3) = fps{i,1,2}(3);
        end
    end    
    disp(sprintf('p1s=(%s);\np2s=(%s);\np3s=(%s);',sprintf('%4d ',round(reshape(tmp(:,1),size(tmp,1),1))),sprintf('%4d ',round(reshape(tmp(:,2),size(tmp,1),1))),sprintf('%4d ',round(reshape(tmp(:,3),size(tmp,1),1)))));
    
    % Load the data.
    pdfs=cellload('data/matlab/pdf.dat',101,4,3,4,2);
    fps=cellload('data/matlab/fp.dat',101,4,3,4,2);
        
    % Plot the pdfs.
    rows=4; cols=4; plotIndex=1;
    colors=getplotcolors();
    for k=[3]
        for l=[2]
            for i=[1:101]
                for m=[1:2]
                    for j=[1:4]
                        Iex=Iexs(i);
                        nvar=nvars(j);
                        ntau=ntaus(k);
                        nreaction=nreactions(l);
                        subplot(rows,cols,plotIndex);
                        if size(pdfs{i,j,k,l,m},1) > 0
                            N=pdfs{i,j,k,l,m}(1,:);
                            X=pdfs{i,j,k,l,m}(2,:);
                            loglog(N, X, '-', 'Color', colors{j});
                            hold('on');
                        end
                    end
                    hold('off');
                    ax=axis; axis([0 1e4 1e-8 1e-1]); xlabel('p'); ylabel('P(p)'); title(sprintf('%s,I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',states{m},Iex,sqrt(nvar),ntau,nreaction));
                    plotIndex=plotIndex+1;
                    if plotIndex > rows*cols
                        plotIndex=1;
                        pause;
                    end
                end
            end
        end
    end

    % Plot the fixed points as a function of Iex.
    xs=[1e-6:1e-7:19.9e-6 2e-5:1e-7:9.9e-5 1e-4:1e-5:9.9e-4 1e-3:1e-4:1e-3];
    p1xs=[];
    p1ys=[];
    p2xs=[];
    p2ys=[];
    p3xs=[];
    p3ys=[];
    for x=xs
        [p1,p2,p3]=lac_switch_fp(x,a,b,kap0min,kap0max,h0,I050,kap1min,kap1max,h1,I150,kit,kid,KM,V);
        if p1 >= 0
            p1xs(end+1)=x;
            p1ys(end+1)=p1;
        end
        if p2 >= 0
            p2xs(end+1)=x;
            p2ys(end+1)=p2;
        end
        if p3 >= 0
            p3xs(end+1)=x;
            p3ys(end+1)=p3;
        end
    end
    loglog(p1xs, p1ys, 'g');
    hold('on');
    loglog(p2xs, p2ys, 'r');
    loglog(p3xs, p3ys, 'g');
    symbols={'o','x','v','*','^'};
    for j=[1]
        sp1xs=[];
        sp1ys=[];
        sp2xs=[];
        sp2ys=[];
        sp3xs=[];
        sp3ys=[];
        for i=[1:size(Iexs,2)]
            if fps{i,j,1}(1) > 0 && fps{i,j,2}(1) > 0
                if fps{i,j,1}(1) ~= fps{i,j,2}(1), disp(sprintf('Different fps %d %d',fps{i,j,1}(1),fps{i,j,2}(1)));, end
                sp1xs(end+1)=Iexs(i);
                sp1ys(end+1)=fps{i,j,1}(1);
            end
            if fps{i,j,1}(2) > 0 && fps{i,j,2}(2) > 0
                if fps{i,j,1}(2) ~= fps{i,j,2}(2), disp(sprintf('Different fps %d %d',fps{i,j,1}(2),fps{i,j,2}(2)));, end
                sp2xs(end+1)=Iexs(i);
                sp2ys(end+1)=round((fps{i,j,1}(2)+fps{i,j,2}(2))/2);
            end
            if fps{i,j,1}(3) > 0 && fps{i,j,2}(3) > 0
                if fps{i,j,1}(3) ~= fps{i,j,2}(3), disp(sprintf('Different fps %d %d',fps{i,j,1}(3),fps{i,j,2}(3)));, end
                sp3xs(end+1)=Iexs(i);
                sp3ys(end+1)=fps{i,j,2}(3);
            end
        end
        scatter(sp1xs,sp1ys,sprintf('g%s'),symbols{j});
        scatter(sp2xs,sp2ys,sprintf('r%s'),symbols{j});
        scatter(sp3xs,sp3ys,sprintf('g%s'),symbols{j});
    end
    hold('off');
    axis([1e-6-1e-7 xs(end) 10 3000]); xlabel('[I_{ex}] ({\mu}M)'); ylabel('Protein Count'); title('Fixed point position');
    


    #### lac_npf_extrinsic_noise ####
    
    # Create base lac reaction model from the sbml file.
    rm -f lac_npf.lm && lm_sbml_import lac_npf.lm lac_npf.sbml
    
    # Modify the switching reaction types.
    lm_setrm lac_npf.lm "ReactionTypes(0:1)=4" "ReactionRateConstants(0,1:4)=[3.1437e-1,5.68e-3,0.0,1.67]" "ReactionRateConstants(1,1:4)=[-4.9995e-2,1.74e-5,0.0,1.0]"    

    % Setup some parameters.
    %nvars=[0.0 (10.^[-4:0.2:-2.2]).^2 (10.^[-2:0.2:0]).^2];
    Iexs=[0 (10.^[-6:0.5:-2])];
    nvars=[0.0 ([1e-2 5e-2 1e-1 2e-1]).^2];
    ntaus=[5.00e1 5.00e2 5.00e3 5.00e4 5.00e5];
    nreactions=[2 3 4 5]; nmeans=[0.126 0.0444 0.0111 2.1e-4];
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(Iexs)-1])));
    disp(sprintf('Iexs=(%s);',sprintf('%8.2e ',Iexs)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(nvars)-1])));
    disp(sprintf('nvars=(%s);',sprintf('%8.2e ',nvars)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('ntaus=(%s);',sprintf('%8.2e ',ntaus)));
    disp(sprintf('#           %s           %s',sprintf('%1d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nmeans)-1])));
    disp(sprintf('nreactions=(%s); nmeans=(%s)',sprintf('%1d ',nreactions),sprintf('%8.2e ',nmeans)));
    
    # Run a series of simulations to calculate the pdfs.
    #            0        1        2        3        4        5        6        7        8        9 
    Iexs=(0.00e+00 1.00e-06 3.16e-06 1.00e-05 3.16e-05 1.00e-04 3.16e-04 1.00e-03 3.16e-03 1.00e-02 );
    #            0        1        2        3        4 
    nvars=(0.00e+00 1.00e-04 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2        3        4 
    ntaus=(5.00e+01 5.00e+02 5.00e+03 5.00e+04 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    maxTime=1e8 writeInterval=5e3 noiseRecalcFraction=1e-3 parameterWriteInterval=5e3
    replicates="1-1000";
    is=`seq -f "%g" 3 4 7`;
    js=`seq -f "%g" 0 4`;
    ks=`seq -f "%g" 2 2`;
    ls=`seq -f "%g" 0 3`;
    Y0=0;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    Iex=${Iexs[i]};
                    nvar=${nvars[j]};
                    ntau=${ntaus[k]};
                    nreaction=${nreactions[l]}; nmean=${nmeans[l]};
                    nvarActual=`awk -v a="${nvar}" -v b="${nmean}" 'BEGIN{print (a * b * b)}'`
                    
                    # Run the simulations.
                    filename="pdf_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ ! -e "logs/${filename}.log" ]; then
                        echo "${filename} with $nvarActual";
                        cp lac_npf.lm data/lm/${filename};
                        lm_setp data/lm/${filename} fptTrackingList=3 maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                        lm_setrm data/lm/${filename} "InitialSpeciesCounts(3)=${Y0}" "ReactionRateConstants(0:1,3)=${Iex}" "ReactionRateNoise(${nreaction},:)=[${nvarActual},${ntau}]" > /dev/null;
                        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
                        lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 10 8 0 erobert3;
                    fi;
                done;
            done;
        done;
    done;

    # Calculate the pdfs on the cluster.
    #            0        1        2        3        4        5        6        7        8        9 
    Iexs=(0.00e+00 1.00e-06 3.16e-06 1.00e-05 3.16e-05 1.00e-04 3.16e-04 1.00e-03 3.16e-03 1.00e-02 );
    #            0        1        2        3        4 
    nvars=(0.00e+00 1.00e-04 2.50e-03 1.00e-02 4.00e-02 );
    #            0        1        2        3        4 
    ntaus=(5.00e+01 5.00e+02 5.00e+03 5.00e+04 5.00e+05 );
    #           0 1 2 3                   0        1        2        3 
    nreactions=(2 3 4 5 ); nmeans=(1.26e-01 4.44e-02 1.11e-02 2.10e-04 )
    R=1000; ts=20000;
    is=`seq -f "%g" 3 4 7`;
    js=`seq -f "%g" 0 4`;
    ks=`seq -f "%g" 2 2`;
    ls=`seq -f "%g" 0 3`;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    Iex=${Iexs[i]};
                    nvar=${nvars[j]};
                    ntau=${ntaus[k]};
                    nreaction=${nreactions[l]};
                    filename="pdf_${Iex}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ -e "data/lm/${filename}" ]; then
                        echo "Processing $filename"
                        matlab-submit calc_pdf "'data/matlab/pdf.dat'" "'data/lm/${filename}'" $((3+1)) ${R} ${ts} $((i+1)) $((j+1)) $((k+1)) $((l+1)) "logs/calc_pdf_${filename}.log" sif 1 erobert3;
                    fi
                done;
            done;
        done;
    done;
    
    % Load the data.
    pdfs=cellload('data/matlab/pdf.dat',10,5,5,4);
    
    % Plot an individual trajectory.
    i=8; j=6; k=5; l=4; R=2;
    Iex=Iexs(i);
    nvar=nvars(j);
    ntau=ntaus(k);
    nreaction=nreactions(l); nmean=nmeans(l);
    filename=sprintf('data/lm/pdf_%8.2e_%d_%8.2e_%8.2e.lm',Iex,nreaction,nvar,ntau);
    disp(sprintf('Loading %s',filename));
    ts=cast(h5read(filename,sprintf('/Simulations/%07d/SpeciesCountTimes',R)),'double');
    data=cast(permute(h5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
    pdata=cast(permute(h5read(filename,sprintf('/Simulations/%07d/ParameterValues/%07d',R,nreaction)),[2,1]),'double');
    samples=[1:10:20000];
    samples=[13200:1:13400];
    subplot(3,2,1);
    plotstep(pdata(samples,1),pdata(samples,2)+nmean,'b');
    hline(nmean);
    ax=axis; axis([ts(samples(1)) ts(samples(end)) 0 nmean*2]); xlabel('Time (s)'); ylabel('k'); title(sprintf('I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',Iex,sqrt(nvar),ntau,nreaction));
    subplot(3,2,2);
    plotstep(pdata(samples,1),(pdata(samples,2)+nmean)./nmean,'b');
    ax=axis; axis([ts(samples(1)) ts(samples(end)) 0 2]); xlabel('Time (s)'); ylabel('k/\mu'); title(sprintf('I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',Iex,sqrt(nvar),ntau,nreaction));
    subplot(3,2,3);
    plotstep(ts(samples),data(samples,4),'b');
    ax=axis; axis([ts(samples(1)) ts(samples(end)) 0 10000]); xlabel('Time (s)'); ylabel('Proteins');
    subplot(3,2,4);
    plotstep(ts(samples),data(samples,3),'b');
    ax=axis; axis([ts(samples(1)) ts(samples(end)) 0 50]); xlabel('Time (s)'); ylabel('mRNA');
    subplot(3,2,5);
    counts=data(:,4);
    upperC=max(counts)+100-mod(max(counts),500);
    binSize=1;
    [C,X]=hist(counts,[0:binSize:upperC]);
    D=C./(sum(C)*(X(2)-X(1)));
    loglog(X,D);
    ax=axis; axis([0 10000 1e-5 1e-2]); xlabel('Proteins'); ylabel('P');
    subplot(3,2,6);
    counts=data(:,3);
    upperC=max(counts)+100-mod(max(counts),500);
    binSize=1;
    [C,X]=hist(counts,[0:binSize:upperC]);
    D=C./(sum(C)*(X(2)-X(1)));
    loglog(X,D);
    ax=axis; axis([0 50 1e-5 1e-0]); xlabel('mRNA'); ylabel('P');
    
    % Plot the noisy parameters.
    rows=4; cols=4; plotIndex=1;
    R=1;
    for i=[8]
        for j=[3:6]
            for k=[5]
                for l=[1:4]
                    Iex=Iexs(i);
                    nvar=nvars(j);
                    ntau=ntaus(k);
                    nreaction=nreactions(l); nmean=nmeans(l);
                    subplot(rows,cols,plotIndex);
                    filename=sprintf('data/lm/pdf_%8.2e_%d_%8.2e_%8.2e.lm',Iex,nreaction,nvar,ntau);
                    disp(sprintf('Loading %s',filename));
                    data=[];
                    data=cast(permute(h5read(filename,sprintf('/Simulations/%07d/ParameterValues/%07d',R,nreaction)),[2,1]),'double');
                    plot(data(2:end,1),data(2:end,2)+nmean);
                    hline(nmean);
                    ax=axis; axis([0 5000000 0 nmean*2]); xlabel('t (s)'); ylabel('k'); title(sprintf('I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',Iex,sqrt(nvar),ntau,nreaction));
                    plotIndex=plotIndex+1;
                end
            end
        end
    end
    
    % Plot the correlation time and variance of a parameter during a simulation.
    rows=2; cols=4; plotIndex=1;
    Rs=[1];
    for i=[8]
        for j=[6]
            for k=[5]
                for l=[1:4]
                    for R=Rs
                        Iex=Iexs(i);
                        nvar=nvars(j);
                        ntau=ntaus(k);
                        nreaction=nreactions(l); nmean=nmeans(l);
                        filename=sprintf('data/lm/pdf_%8.2e_%d_%8.2e_%8.2e.lm',Iex,nreaction,nvar,ntau);
                        disp(sprintf('Loading %s',filename));
                        data=cast(permute(h5read(filename,sprintf('/Simulations/%07d/ParameterValues/%07d',R,nreaction)),[2,1]),'double');
                        subplot(rows,cols,plotIndex);
                        plot(data(2:end,1),data(2:end,2)+nmean,'-');
                        hold('on');
                        plot([data(1,1) data(end,1)], [1 1].*mean(nmean+data(:,2))-sqrt(var(data(:,2))), 'k--');
                        plot([data(1,1) data(end,1)], [1 1].*mean(nmean+data(:,2))+sqrt(var(data(:,2))), 'k--');
                        hold('off');
                        axis([data(1,1) data(end,1) 0 nmean*2]); title(sprintf('I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',Iex,sqrt(nvar),ntau,nreaction)); legend(sprintf('\\mu %8.2e (%8.2e)',mean(nmean+data(:,2)),nmean), sprintf('\\sigma/\\mu %8.2e (%8.2e)',sqrt(var(nmean+data(:,2)))/mean(nmean+data(:,2)),sqrt(nvar)), 'Location','Northeast');
                        plotIndex=plotIndex+1;
                        subplot(rows,cols,plotIndex);
                        dt=data(2,1)-data(1,1);
                        [cr,ct]=xcorr(data(:,2),'coeff');
                        cr=cr(find(ct==0):end);
                        ct=(ct(find(ct==0):end)).*dt;
                        s = fitoptions('Method','NonlinearLeastSquares', 'Lower',[1e-3], 'Upper',[1e10], 'Startpoint',[ntau]);
                        f = fittype('exp(-x/tau)','options',s,'coeff',{'tau'});
                        [fo,gof]=fit(ct',cr,f);
                        fitvalues=coeffvalues(fo);
                        taufit=fitvalues(1);
                        semilogx(ct,cr);
                        hold('on');
                        semilogx(ct, exp(-ct./taufit), 'r--');
                        semilogx(ct, exp(-ct./ntau), 'k:');
                        hold('off');
                        ax=axis; axis([0 data(end,1) 0 1e0]); legend('Cross-correlation', sprintf('Fit (%8.2e)',taufit), sprintf('Exp (%8.2e)',ntau), 'Location','Northeast');
                        plotIndex=plotIndex+1;
                    end
                end
            end
        end
    end

    % Plot the pdfs.
    rows=2; cols=2; plotIndex=1;
    for i=[8]
        for j=[1:6]
            for k=[5]
                for l=[1:4]
                    Iex=Iexs(i);
                    nvar=nvars(j);
                    ntau=ntaus(k);
                    nreaction=nreactions(l);
                    subplot(rows,cols,plotIndex);
                    if size(pdfs{i,j,k,l},1) > 0
                        N=pdfs{i,j,k,l}(1,:);
                        X=pdfs{i,j,k,l}(2,:);
                        semilogy(N, X);
                        ax=axis; axis([0 1e4 1e-8 1e-2]); xlabel('p'); ylabel('P(p)'); title(sprintf('I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',Iex,sqrt(nvar),ntau,nreaction));
                    else
                        newplot;
                    end
                    plotIndex=plotIndex+1;
                    if plotIndex > rows*cols
                        plotIndex=1;
                        pause;
                    end
                end
            end
        end
    end

    % Plot the pdfs with all noisy reactions on the same plot.
    rows=2; cols=5; plotIndex=1;
    colors=getplotcolors();
    symbols={'o','x','v','*','^'};
    for i=[4 8]
        for k=[3 5]
            for j=[1:5]
                Iex=Iexs(i);
                nvar=nvars(j);
                ntau=ntaus(k);
                subplot(rows,cols,plotIndex);
                legendHandles=[];
                legendStrings=cell(0,1);
                for l=[1:4]
                    if size(pdfs{i,j,k,l},1) > 0
                        N=pdfs{i,j,k,l}(1,:);
                        X=pdfs{i,j,k,l}(2,:);
                        loglog(N, X, '-', 'Color', colors{l});
                        hold('on');
                    end
                end
                hold('off');
                ax=axis; axis([0 10000 1e-8 3e-2]); xlabel('p'); ylabel('P(p)'); title(sprintf('I_{ex}=%8.2e,\\sigma/\\mu=%8.2e,\\tau=%8.2e)',Iex,sqrt(nvar),ntau));
                plotIndex=plotIndex+1;
                if plotIndex > rows*cols
                    plotIndex=1;
                    pause;
                end
            end
        end
    end
    
    % Plot the noise versus the mean copy number.
    colors=getplotcolors();
    symbols={'o','x','v','*','^','+','>'};
    legendStrings=cell(0,1);
    for j=[1 3 5 7]
        xs=[];
        ys=[];
        for i=[1:size(Iexs,2)]
            Iex=Iexs(i); 
            N=pdfs{i,j,1}(1,:);
            X=pdfs{i,j,1}(2,:);
            m=sum(N.*X);
            v=sum(((N-m).^2).*X);
            xs(end+1) = m;
            ys(end+1) = v/(m^2);
        end
        loglog(xs, ys, symbols{size(legendStrings,1)+1}, 'Color',colors{mod(size(legendStrings,1),length(colors))+1});
        legendStrings{end+1,1}=sprintf('\\sigma^2_n=%0.2e,\\tau_n=%0.2e',nvars(j),ntaus(j));
        hold('on');
    end
    xs=[1e0:1e0:1e4];
    loglog(xs, 1./xs, ':');
    loglog(xs, (xs.*0)+1e-1, ':');
    hold('off');
    axis([1e-2 1e4 1e-4 1e2]); xlabel('\mu'); ylabel('\sigma^2/\mu^2'); legend(legendStrings);
    
    

    #### self_regulating_gene_switch ####
    
    % Setup some parameters.
    a0s=[30 6 6 6 6]; a1s=[3000 240 250 265 3000]; p0s=[1400 115 115 115 450]; states={'off','on'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'};

    % Get the fixed points.
    fp=zeros(length(a0s),3);
    for i=[1:length(a0s)]
        a0=a0s(i); a1=a1s(i); p0=p0s(i);
        [p1,p2,p3]=self_regulating_gene_switch_fp(a0,a1,p0);
        fp(i,:)=[p1 p2 p3];
    end
    disp(sprintf('p1s=(%s);\np2s=(%s);\np3s=(%s);',sprintf('%4d ',round(reshape(fp(:,1),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,2),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,3),size(fp,1),1)))));
    
    % Plot the rate of change in the protein as a function of the protein count.
    rows=2; cols=3; plotIndex=1;
    for i=[1:length(a0s)]
        subplot(rows,cols,plotIndex);
        for ai=[1:1]
            a0=a0s(i); a1=a1s(i); p0=p0s(i);
            p=[0:floor(a1)];
            dP = self_regulating_gene_switch_dpdt(p,a0,a1,p0);
            lastP=find(dP>=-max(dP)*3,1,'last');
            plot(p(1:lastP),dP(1:lastP),'b');
            vline(fp(i,1));
            vline(fp(i,2));
            vline(fp(i,3));
            hold('on');
        end
        hline(0,'k-');
        hold('off');
        %xlabel('Protein Count (N)'); ylabel('dN/dt'); title(sprintf('Protein Rate of Change (a_0=%0.2f,a_{00}=%0.2f,n_{50}=%0.2f,h=%0.2f,b=%0.2f)',a0,a00,n50,h,b)); %legend(legendStrings,'Location','NorthEast');
        plotIndex=plotIndex+1;
    end
    
    # Run a series of simulations to calculate the pdfs.
    is="4"; a0s=(30.00 6.00 6.00 6.00 6.00); a1s=(3000.00 240.00 250.00 265.00 260.00); p0s=(1400 115 115 115 115);
    p1s=(  32    7    7    7    7 ); p2s=( 904   72   65   57   59 ); p3s=(2064  161  178  201  194 );
    writeInterval=1e0; maxTime=1e3;
    replicates="1-10000";
    for i in $is; do
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=$i; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                
        # Start the off state.
        initialProtein=${p1}; maxProtein=${p2};
        filename="pdf_off_${a0}_${a1}_${p0}.lm5";
        echo "${filename} with $p1 $p2 $p3 start $initialProtein"
        rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
        lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;

        # Start the on state.
        initialProtein=${p3}; minProtein=${p2};
        filename="pdf_on_${a0}_${a1}_${p0}.lm5";
        echo "${filename} with $p1 $p2 $p3 start $initialProtein"
        rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
        lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
    done;
    
    # Run a series of simulations to calculate the switching times.
    is="4"; a0s=(30.00 6.00 6.00 6.00 6.00); a1s=(3000.00 240.00 250.00 265.00 260.00); p0s=(1400 115 115 115 115);
    p1s=(  32    7    7    7    7 ); p2s=( 904   72   65   57   59 ); p3s=(2064  161  178  201  194 );
    writeInterval=1e5; maxTime=1e8;
    replicates="1-23";
    for i in $is; do
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=$i; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                
        # Start the off state.
        initialProtein=${p1}; maxProtein=${p3};
        filename="fpt_off_on_${a0}_${a1}_${p0}.lm5";
        echo "${filename} with $p1 $p2 $p3 start $initialProtein";
        rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
        lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
    
        # Start the on state.
        initialProtein=${p3}; minProtein=${p1};
        filename="fpt_on_off_${a0}_${a1}_${p0}.lm5";
        echo "${filename} with $p1 $p2 $p3 start $initialProtein";
        rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
        lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
    done;
    
    # Run a series of simulations to calculate the switching probability.
    a0=0.4; b=10.0; gamma=16; d1=0.002083;
    ais="0 1 2 3"; a00s=(20.0 28.0 36.0 44.0);
    his="0"; hs=(3.00);
    nis="0"; n50s=(100);
    p1s=(   4    4    4    4 ); p2s=(  96   66   55   48 ); p3s=( 164  266  352  435 );
    pss=(5 5 5 5); pfs=(96 66 55 48); mss=(0 0 0 0); mfs=(5 5 5 5);
    writeInterval=1e5; maxTime=1e8;
    replicates="1-10000";
    for ai in $ais; do
        for hi in $his; do
            for ni in $nis; do
                a00=${a00s[ai]};
                h=${hs[hi]};
                n50=${n50s[ni]};
                pi=$ai; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                minProtein=${p1}; maxProtein=${p3};
                ps=`seq -f "%g" ${pss[pi]} ${pfs[pi]}`;
                ms=`seq -f "%g" ${mss[pi]} ${mfs[pi]}`;
                for p in $ps; do
                    for m in $ms; do 
                        initialProtein=$p; initialMRNA=$m;
                        filename="switch_prob_${a0}_${a00}_${h}_${n50}_${b}_${gamma}_${d1}_${p}_${m}.lm5";
                        echo "${filename} with $p1 $p2 $p3 at $p $m"
                        rm -f data/lm/switch_prob/${filename} && lm_setp data/lm/switch_prob/${filename} 2 a0=${a0} a00=${a00} h=${h} n50=${n50} b=${b} gamma=${gamma} d1=${d1} initialProtein=${initialProtein} initialMRNA=${initialMRNA} maxProtein=${maxProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
                        lm-submit data/lm/switch_prob/${filename} -m lm::cme::HillSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 1 8 0 erobert3; #-gr 0
                        sleep 2;
                    done;
                done;
            done;
        done;
    done;
    
    # Run a series of simulations to generate switching trajectories.
    a0=0.4; b=10.0; gamma=16; d1=0.002083;
    ais="3"; a00s=(20.0 28.0 36.0 44.0);
    his="0"; hs=(3.00);
    nis="0"; n50s=(100);
    p1s=(   4    4    4    4 ); p2s=(  96   66   55   48 ); p3s=( 164  266  352  435 );
    maxTime=1e8;
    replicates="1-100";
    for ai in $ais; do
        for hi in $his; do
            for ni in $nis; do
                a00=${a00s[ai]};
                h=${hs[hi]};
                n50=${n50s[ni]};
                pi=$ai; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                
                # Start the off state.
                initialProtein=${p1}; maxProtein=${p3};
                filename="traj_off_on_${a0}_${a00}_${h}_${n50}_${b}_${gamma}_${d1}.lm5";
                echo "${filename} with $p1 $p2 $p3 start $initialProtein"
                rm -f data/lm/${filename} && lm_setp data/lm/${filename} 2 a0=${a0} a00=${a00} h=${h} n50=${n50} b=${b} gamma=${gamma} d1=${d1} initialProtein=${initialProtein} maxProtein=${maxProtein} maxTime=${maxTime};
                lm-submit data/lm/${filename} -m lm::cme::HillSwitch -r ${replicates} -cr 1 -gr 1 logs/${filename}.log local 1 2 1 erobert3;
    
                # Start the on state.
                #initialProtein=${p3}; minProtein=${p2};
                #filename="pdf_${m}_on_${a}_${b}_${kap0}_${kap00}_${h0}_${n050}_${kap11}_${kap1}_${h1}_${n150}_${d1}_${gamma}.lm5";
                #echo "${filename} with $p1 $p2 $p3 start $initialProtein"
                #rm -f data/lm/${filename} && lm_setp data/lm/${filename} 4 proteinModel=${m} a=${a} b=${b} kap0=${kap0} kap00=${kap00} h0=${h0} n050=${n050} kap11=${kap11} kap1=${kap1} h1=${h1} n150=${n150} d1=${d1} gamma=${gamma} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
                #lm-submit data/lm/${filename} -m lm::cme::TwoStateHillSwitch -r ${replicates} logs/${filename}.log odin 8 8 0 erobert3;
            done;
        done;
    done;

    % Calculate the pdfs.
    pdfs=cell(length(a0s),length(states),2);
    Rs=[1:10000]; tf=1e3;
    for i=[5]
        for si=[1:length(states)]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; 
            filename=sprintf('data/lm/pdf_%s_%0.2f_%0.2f_%d.lm5',states{si},a0,a1,p0);
            disp(sprintf('Loading %s',filename));
            counts=zeros(tf*length(Rs),1);
            countsUsed=0;
            for R=Rs
                if mod(R,1000) == 0, disp(sprintf('Replicate %d',R));, end
                data=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
                first=6;
                last=length(data)-2;
                if last < 999, disp(sprintf('Sort run %d: %d',R,length(data)));, end
                counts((countsUsed+1):(countsUsed+1+last-first),1)=data(first:last,1);
                countsUsed=countsUsed+last-first+1;
            end
            [N,X]=hist(counts(1:countsUsed,1),[0:max(counts(1:countsUsed,1))]);
            pdfs{i,si,1}=X;
            pdfs{i,si,2}=[N./(sum(N)*(X(2)-X(1)))];
        end
    end

    % Calculate the mean first passage times.
    mfpt=cell(length(a0s),length(states),1);
    Rs=[1:23]; tf=1e8;
    for i=[2:5]
        for ti=[1:2]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            filename=sprintf('data/lm/fpt_%s_%0.2f_%0.2f_%d.lm5',transitions{ti},a0,a1,p0);
            disp(sprintf('Loading %s',filename));
            fpts=ones(pMaxi,length(Rs));
            truncated=ones(pMaxi,length(Rs));
            for ri=[1:length(Rs)]
                R=Rs(ri);
                counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
                minCount=counts(1); maxCount=counts(end);
                fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
                if maxCount > pMax, fpt=fpt(1:end-(maxCount-pMax));, maxCount=pMax;, end
                fpts(:,ri)=max(fpt);
                minIndex=minCount+1; maxIndex=maxCount+1;
                fpts(minIndex:maxIndex,ri)=fpt;
                truncated(minIndex:maxIndex,ri)=0;
            end
            mfpt{i,ti}=zeros(7,pMaxi);
            mfpt{i,ti}(1,:)=[0:pMax];
            mfpt{i,ti}(2,:)=mean(fpts,2);
            mfpt{i,ti}(3,:)=max(fpts,[],2);
            mfpt{i,ti}(4,:)=min(fpts,[],2);
            for j=[1:size(fpts,1)]
                [tmpm,tmpc]=expfit(fpts(j,:),[],truncated(j,:));
                mfpt{i,ti}(5,j)=tmpm;
                mfpt{i,ti}(6,j)=tmpc(1);
                mfpt{i,ti}(7,j)=tmpc(2);
            end
        end
    end
    
    # Calculate the switching probability.
    a0=0.4; b=10.0; gamma=16; d1=0.002083;
    ais="1 2 3"; a00s=(20.0 28.0 36.0 44.0);
    his="0"; hs=(3.00);
    nis="0"; n50s=(100);
    p1s=(   4    4    4    4 ); p2s=(  96   66   55   48 ); p3s=( 164  266  352  435 );
    pss=(5 5 5 5); pfs=(96 66 55 48); mss=(0 0 0 0); mfs=(5 5 5 5);
    numReplicates=10000;
    for ai in $ais; do
        for hi in $his; do
            for ni in $nis; do
                a00=${a00s[ai]};
                h=${hs[hi]};
                n50=${n50s[ni]};
                pi=$ai; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                matlab-submit calc_switch_prob "'data/matlab/swpr.dat'" $a0 $a00 $((ai+1)) $h $((hi+1)) $n50 $((ni+1)) $b $gamma $d1 $p1 $p3 ${pss[pi]} ${pfs[pi]} ${mss[pi]} ${mfs[pi]} 1 $numReplicates "logs/calc_switch_prob_${ai}_${hi}_${ni}.log" eir 1 erobert3;
            done;
        done;
    done;

    % Save the data.
    save('data/matlab/pdfs.mat','pdfs');
    save('data/matlab/mfpt.mat','mfpt');
    
    % Load the data.
    load('data/matlab/pdfs.mat','pdfs');
    load('data/matlab/mfpt.mat','mfpt');
    
    % Plot the pdfs.
    rows=2; cols=1; plotIndex=1;
    for i=[5]
        for si=[1:length(states)]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; 
            subplot(rows,cols,plotIndex);
            N=pdfs{i,si,1};
            X=pdfs{i,si,2};
            semilogy(N, X);
            m=sum(N.*X);
            v=sum(((N-m).^2).*X);
            ax=axis; axis([ax(1) ax(2) 1e-8 1e0]); xlabel('p'); ylabel('P(p)'); title(sprintf('PDF (state=%s,a_0=%0.2f,a_{1}=%0.2f,p_{0}=%0.2f,\\mu=%0.2e,\\sigma^2=%0.2e)',states{si},a0,a1,p0,m,v));
            plotIndex=plotIndex+1;
        end
    end

    % Plot a first passage time distribution.
    i=1; ni=1; hi=1; Rs=[1:1000]; tf=1e8;
    a00=a00s(ai); h=hs(hi); n50=n50s(ni); p1=round(fp(ai,ni,hi,1)); p2=round(fp(ai,ni,hi,2)); p3=round(fp(ai,ni,hi,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; 
    filename=sprintf('data/lm/off_on_%0.1f_%0.1f_%0.2f_%d_%0.1f_%d_%0.6f.lm5',a0,a00,h,n50,b,gamma,d1);
    disp(sprintf('Loading %s',filename));
    fpts=ones(p3i,length(Rs)).*tf;
    for ri=[1:length(Rs)]
        R=Rs(ri);
        counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/01/Counts',R)),[2,1]),'double');
        minCount=counts(1); maxCount=counts(end);
        fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/01/Times',R)),[2,1]),'double');
        bi=minCount+1; ei=maxCount+1;
        fpts(bi:ei,ri)=fpt;
    end
    [N,X]=hist(fpts(p2i,:),20);
    D=N./(sum(N)*(X(2)-X(1)));
    bar(X,D);
    m1=mean(fpts(p2i,:));
    %[m2,c2]=expfit(fpts(p2i,:));
    hold('on');
    %plot(X,exppdf(X,m1),'r');
    %plot(X,exppdf(X,m2),'g');
    %plot(X,exppdf(X,c2(1)),'g:');
    %plot(X,exppdf(X,c2(2)),'g:');
    %hold('off');
    legend('Data',sprintf('Mean: %0.04e',m1));%,sprintf('Fit: %0.04e',m2));

    % Plot the mftps.
    rows=2; cols=1; plotIndex=1;
    for i=[5]
        for ti=[1:2]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; 
            subplot(rows,cols,plotIndex);
            if size(mfpt{i,ti},1) > 0
                loglog(mfpt{i,ti}(1,:), mfpt{i,ti}(2,:), 'b');
                hold('on');
                loglog(mfpt{i,ti}(1,:), mfpt{i,ti}(3,:), 'b:');
                loglog(mfpt{i,ti}(1,:), mfpt{i,ti}(4,:), 'b:');
                loglog(mfpt{i,ti}(1,:), mfpt{i,ti}(5,:), 'g');
                loglog(mfpt{i,ti}(1,:), mfpt{i,ti}(6,:), 'g:');
                loglog(mfpt{i,ti}(1,:), mfpt{i,ti}(7,:), 'g:');
                hold('off');
                ax=axis; axis([0 mfpt{i,ti}(1,end) 1e-2 tf*1.1]); xlabel('Number Proteins (n)'); ylabel('Time (s)'); title(sprintf('MFPT (transition=%s,a_0=%0.2f,a_{1}=%0.2f,p_{0}=%0.2f,fpt_{P2}=%0.2e)',transitionStrings{ti},a0,a1,p0,mfpt{i,ti}(5,p2i)));
                vline(p1);
                vline(p2);
                vline(p3);                
            end
            plotIndex=plotIndex+1;
        end
    end
    
    % Plot the mfpt as a function of a00.
    symbols={'b^-','b>-','bv-','ro-','ms-'}; ni=1; hi=1;
    for mi=[1]
        xs=[];
        ys=[];
        cl=[];
        cu=[];
        for ai=[1:length(a00s)]
            a00=a00s(ai); h=hs(hi); n50=n50s(ni); p1=round(fp(ai,ni,hi,1)); p2=round(fp(ai,ni,hi,2)); p3=round(fp(ai,ni,hi,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; 
            if size(mfpt{ai,ni,hi},1) > 0
                xs(end+1)=a00;
                ys(end+1)=mfpt{ai,ni,hi}(2,p2i);
                %ys(end+1)=mfpt{ai,ni,hi}(5,p2i);
                %cl(end+1)=mfpt{ai,ni,hi}(6,p2i);
                %cu(end+1)=mfpt{ai,ni,hi}(7,p2i);
            end
        end
        semilogy(xs, ys./60, symbols{mi});
        hold('on');
        %ploterrorbar(xs, ys, cl, cu, 'k', '-');
    end
    hold('off');
    axis([a00s(1)*0.9 a00s(end)*1.1 1e0 tf]); xlabel('a_{00}'); ylabel('\tau (min)'); %title(sprintf('P2 Off->On MFPT')); legend('Burst \gamma=2','Burst \gamma=50','Burst \gamma=100','Constant','Geometric');    

    % Plot the probability of switching from a given starting location.
    ai=1; ni=1; hi=1; a00=a00s(ai); h=hs(hi); n50=n50s(ni); p1=round(fp(ai,ni,hi,1)); p2=round(fp(ai,ni,hi,2)); p3=round(fp(ai,ni,hi,3));
    subplot(2,1,1);
    mis=[1:1:size(swpr{ai,ni,hi,3},2)];
    colors=getplotcolors();
    legendStrings=cell(0,1);
    for mi=mis
        size(legendStrings,1)
        mod(size(legendStrings,1),length(colors))
        semilogy(swpr{ai,ni,hi,1},(1.0-swpr{ai,ni,hi,3}(:,mi)),'Color',colors{mod(size(legendStrings,1),length(colors))+1});
        legendStrings{end+1,1}=sprintf('m=%d',swpr{ai,ni,hi,2}(mi));
        hold('on');
    end
    hold('off');
    ax=axis; axis([0 ax(2) 0 ax(4)]); xlabel('Number Proteins (n)'); ylabel('P(switch|n,m)'); title(sprintf('P(switch|n,m) (a_0=%0.2f,a_{00}=%0.2f,n_{50}=%0.2f,h=%0.2f,b=%0.2f,\\gamma=%0.2f,d_1=%0.4e)',a0,a00,n50,h,b,gamma,d1)); legend(legendStrings,'Location','NorthWest');
    subplot(2,1,2);
    logswpr=log10((1.0-swpr{ai,ni,hi,3})');
    logswpr(find(logswpr==-Inf))=min(logswpr(find(logswpr>-Inf)));
    [c,h]=contourf(swpr{ai,ni,hi,1},swpr{ai,ni,hi,2},logswpr,[0:-0.25:-10]); clabel(c,h,'color','w'); colorbar;
    ax=axis; axis([0 ax(2) 0 ax(4)]); xlabel('Number Proteins (n)'); ylabel('Number mRNA (m)'); title(sprintf('Log_{10} P(switch|n,m)'));
    vline(p1, 'k:');
    vline(p2, 'k:');
    vline(p3, 'k:');
    
    % Plot the probability of switching from a given starting location.
    ai=1; ni=1; hi=1; a00=a00s(ai); h=hs(hi); n50=n50s(ni); p1=round(fp(ai,ni,hi,1)); p2=round(fp(ai,ni,hi,2)); p3=round(fp(ai,ni,hi,3));
    subplot(2,1,1);
    mis=[1:1:size(swpr{ai,ni,hi,3},2)];
    colors=getplotcolors();
    legendStrings=cell(0,1);
    
    
    cdf=(1.0-swpr{ai,ni,hi,3}(:,10));
    semilogy(swpr{ai,ni,hi,1}(1:end-1),diff(cdf),'Color',colors{mod(size(legendStrings,1),length(colors))+1});
    
    
    
    
    
    
    for mi=mis
        size(legendStrings,1)
        mod(size(legendStrings,1),length(colors))
        
        legendStrings{end+1,1}=sprintf('m=%d',swpr{ai,ni,hi,2}(mi));
        hold('on');
    end
    hold('off');
    ax=axis; axis([0 ax(2) 0 ax(4)]); xlabel('Number Proteins (n)'); ylabel('P(switch|n,m)'); title(sprintf('P(switch|n,m) (a_0=%0.2f,a_{00}=%0.2f,n_{50}=%0.2f,h=%0.2f,b=%0.2f,\\gamma=%0.2f,d_1=%0.4e)',a0,a00,n50,h,b,gamma,d1));legend(legendStrings,'Location','NorthWest');
    subplot(2,1,2);
    logswpr=log10((1.0-swpr{ai,ni,hi,3})');
    logswpr(find(logswpr==-Inf))=min(logswpr(find(logswpr>-Inf)));
    [c,h]=contourf(swpr{ai,ni,hi,1},swpr{ai,ni,hi,2},logswpr,[0:-0.25:-10]); clabel(c,h,'color','w'); colorbar;
    ax=axis; axis([0 ax(2) 0 ax(4)]); xlabel('Number Proteins (n)'); ylabel('Number mRNA (m)'); title(sprintf('Log_{10} P(switch|n,m)'));
    vline(p1, 'k:');
    vline(p2, 'k:');
    vline(p3, 'k:');


    % Plot the probability of a trajectory switching as a function of time.
    ai=1; ni=1; hi=1; a00=a00s(ai); h=hs(hi); n50=n50s(ni); p1=round(fp(ai,ni,hi,1)); p2=round(fp(ai,ni,hi,2)); p3=round(fp(ai,ni,hi,3));
    Rs=[11:20];
    for R=Rs
        filename=sprintf('data/lm/traj_off_on_%0.1f_%0.1f_%0.2f_%d_%0.1f_%d_%0.6f.lm5',a0,a00,h,n50,b,gamma,d1);
        ts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCountTimes',R)),[2,1]),'double');
        data=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
        subplot(3,1,1);
        plot(ts,data(:,1), 'b');
        subplot(3,1,2);
        plot(ts,data(:,2), 'b');
        subplot(3,1,3);
        pdata=zeros(length(ts),1);
        for tindex=[1:length(ts)]
            pindex=find(swpr{ai,ni,hi,1}==data(tindex,2));
            mindex=find(swpr{ai,ni,hi,2}==data(tindex,1));
            if length(pindex) > 0 && length(mindex) > 0
                pdata(tindex) = 1.0-swpr{ai,ni,hi,3}(pindex,mindex);
            end
        end
        plot(ts, pdata, 'b');
        pause;
    end
    
    % Plot the joint probability of switching and being at a specific position in phase space.
    ai=1; ni=1; hi=1; a00=a00s(ai); h=hs(hi); n50=n50s(ni); p1=round(fp(ai,ni,hi,1)); p2=round(fp(ai,ni,hi,2)); p3=round(fp(ai,ni,hi,3));
    pr1m=swpr{ai,ni,hi,2};
    pr1p=swpr{ai,ni,hi,1};
    pr1=zeros(pr1p(end)+1,pr1m(end)+1);
    pr1(pr1p+1,pr1m+1)=(1.0-swpr{ai,ni,hi,3});
    pr2=zeros(size(pr1,1),size(pr1,2));
    pr2(1:size(pdfs{ai,ni,hi,si,3},2),1:size(pdfs{ai,ni,hi,si,3},1))=pdfs{ai,ni,hi,si,3}';
    prj=pr1.*pr2;
    contourf([0:size(prj,1)-1],[0:size(prj,2)-1],prj');
    colormap('default');
    plot([0:size(prj,1)-1], sum(prj,2));
    

    #### srgs_a1_dependence ####
    
    % Setup some parameters.
    N=1000;
    eps=0.1;
    p0=N*(1/sqrt(3))*(1-(3/2)*eps^2)
    a0=(N/9)*(1-6*eps^2)
    a1=N
    
    n*eps^4 > 10
    
    # predicted tau = 4*sqrt(2/3)*(pi/eps^2)*exp((27/16)*N*exp^4)
    
    # correlation time = 100
   
    
    a1s=[500 600 700 800]; a0s=0.0511111.*a1s; p0s=0.499408.*a1s; nvar=0.0; tau=1e3; states={'off','on'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'}; tfs=[1e10 1e8];
    disp(sprintf('a0s=(%s); a1s=(%s); p0s=(%s);',sprintf('%e ',a0s),sprintf('%d ',a1s),sprintf('%e ',p0s)));

    % Get the fixed points.
    fp=zeros(length(a1s),3);
    for pi=[1:length(a1s)]
        a0=a0s(pi); a1=a1s(pi); p0=p0s(pi);
        [p1,p2,p3]=self_regulating_gene_switch_fp(a0,a1,p0);
        fp(pi,:)=[p1 p2 p3];
    end
    disp(sprintf('p1s=(%s); p2s=(%s); p3s=(%s);',sprintf('%4d ',round(reshape(fp(:,1),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,2),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,3),size(fp,1),1)))));
    
    % Plot the rate of change in the protein as a function of the protein count.
    rows=1; cols=1; plotIndex=1;
    for i=[1:length(a1s)]
        subplot(rows,cols,plotIndex);
        for ai=[1:1]
            a0=a0s(i); a1=a1s(i); p0=p0s(i);
            
    N=1000;
    eps=0.2;
    p0=N*(1/sqrt(3))*(1-(3/2)*eps^2)
    a0=(N/9)*(1-6*eps^2)
    a1=N
            
            
            p=[0:floor(a1)];
            dP = self_regulating_gene_switch_dpdt(p,a0,a1,p0);
            lastP=find(dP>=-max(dP)*3,1,'last');
            plot(p(1:lastP),dP(1:lastP),'b');
            vline(fp(i,1));
            vline(fp(i,2));
            vline(fp(i,3));
            hold('on');
        end
        hline(0,'k-');
        hold('off');
        %xlabel('Protein Count (N)'); ylabel('dN/dt'); title(sprintf('Protein Rate of Change (a_0=%0.2f,a_{00}=%0.2f,n_{50}=%0.2f,h=%0.2f,b=%0.2f)',a0,a00,n50,h,b)); %legend(legendStrings,'Location','NorthEast');
        plotIndex=plotIndex+1;
    end
    
    # Run a series of simulations to calculate the switching times.
    nvar=0.0; tau=1e+03;
    is=`seq -f "%g" 0 3`;
       a1s=(500 600 700 800 ); a0s=(2.555555e+01 3.066666e+01 3.577777e+01 4.088888e+01 ); p0s=(2.497040e+02 2.996448e+02 3.495856e+02 3.995264e+02 );
    offons=(  1   1   1   1 );
    onoffs=(  1   1   1   1 );
    p1s=(  34   41   48   55 ); p2s=( 144  173  202  231 ); p3s=( 321  386  450  514 );
    replicates="1-50";
    for i in $is; do
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
        if [ ${offons[i]} -eq 1 ]; then
            # Start the off state.
            writeInterval=1e5; maxTime=1e10;
            initialProtein=${p1}; maxProtein=${p3};
            filename="fpt_off_on_${a0}_${a1}_${p0}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 7 8 0 erobert3;
        fi;
        if [ ${onoffs[i]} -eq 1 ]; then
            # Start the on state.
            writeInterval=1e5; maxTime=1e8;
            initialProtein=${p3}; minProtein=${p1};
            filename="fpt_on_off_${a0}_${a1}_${p0}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 7 8 0 erobert3;
        fi;
    done;
    
    % Plot a first passage time distribution.
    rows=3; cols=2; plotIndex=1; Rs=[1:50];
    for i=[1 2 3]
        for ti=[1 2]
            subplot(rows,cols,plotIndex);
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            filename=sprintf('data/lm/fpt_%s_%0e_%0d_%e_%03.1f_%5.0e.lm5',transitions{ti},a0,a1,p0,nvar,tau);
            fpts=ones(pMaxi,length(Rs));
            truncated=ones(pMaxi,length(Rs));
            for ri=[1:length(Rs)]
                R=Rs(ri);
                counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
                minCount=counts(1); maxCount=counts(end);
                fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
                if maxCount > pMax, fpt=fpt(1:end-(maxCount-pMax));, maxCount=pMax;, end
                if ti == 1 && maxCount < p3
                    disp(sprintf('Run %d for %d,%s was truncated: max value %d < %d',R,p0,transitions{ti},maxCount,p3));
                    fpts(:,ri)=tfs(ti);
                elseif ti == 2 && minCount > p1
                    disp(sprintf('Run %d for %d,%s was truncated: min value %d > %d',R,p0,transitions{ti},minCount,p1));
                    if ri == 7
                        fpts(:,ri)=1e9;
                    else
                        fpts(:,ri)=tfs(ti);
                    end
                else
                    fpts(:,ri)=max(fpt);
                end
                minIndex=minCount+1; maxIndex=maxCount+1;
                fpts(minIndex:maxIndex,ri)=fpt;
                truncated(minIndex:maxIndex,ri)=0;
            end
            [N,X]=hist(fpts(p2i,:),20);
            D=N./(sum(N)*(X(2)-X(1)));
            bar(X,D);
            m1=mean(fpts(p2i,:));
            [m2,c2]=expfit(fpts(p2i,:),[],truncated(p2i,:));
            hold('on');
            h=[];
            h(1)=plot(X,exppdf(X,m1),'r');
            h(2)=plot(X,exppdf(X,m2),'g');
            h(3)=plot(X,exppdf(X,c2(1)),'g:');
            h(4)=plot(X,exppdf(X,c2(2)),'g:');
            hold('off');
            ylabel('\tau_{P2}'); title(sprintf('FPT (%s,a_{1}=%0.2f)',transitionStrings{ti},a1)); legend(h,sprintf('Mean: %0.04e',m1),sprintf('Fit: %0.04e',m2),sprintf('-95%% CI: %0.04e',c2(1)),sprintf('+95%% CI: %0.04e',c2(2)));
            plotIndex=plotIndex+1;
        end
    end

    % Calculate the mean first passage times.
    %mfpt=cell(length(a1s),length(transitions));
    Rs=[1:50];
    for i=[3]
        for ti=[1 2]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            filename=sprintf('data/lm/fpt_%s_%0e_%0d_%e_%03.1f_%5.0e.lm5',transitions{ti},a0,a1,p0,nvar,tau);
            if exist(filename)
                disp(sprintf('Loading %s',filename));
                fpts=ones(pMaxi,length(Rs));
                truncated=ones(pMaxi,length(Rs));
                for ri=[1:length(Rs)]
                    R=Rs(ri);
                    counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
                    minCount=counts(1); maxCount=counts(end);
                    fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
                    if maxCount > pMax, fpt=fpt(1:end-(maxCount-pMax));, maxCount=pMax;, end
                    if ti == 1 && maxCount < p3
                        disp(sprintf('Run %d for %d,%s was truncated: max value %d < %d',R,p0,transitions{ti},maxCount,p3));
                        fpts(:,ri)=tfs(ti);
                    elseif ti == 2 && minCount > p1
                        disp(sprintf('Run %d for %d,%s was truncated: min value %d > %d',R,p0,transitions{ti},minCount,p1));
                    if ri == 7
                        fpts(:,ri)=1e9;
                    else
                        fpts(:,ri)=tfs(ti);
                    end
                    else
                        fpts(:,ri)=max(fpt);
                    end
                    minIndex=minCount+1; maxIndex=maxCount+1;
                    fpts(minIndex:maxIndex,ri)=fpt;
                    truncated(minIndex:maxIndex,ri)=0;
                end
                mfpt{i,ti}=zeros(7,pMaxi);
                mfpt{i,ti}(1,:)=[0:pMax];
                mfpt{i,ti}(2,:)=mean(fpts,2);
                mfpt{i,ti}(3,:)=max(fpts,[],2);
                mfpt{i,ti}(4,:)=min(fpts,[],2);
                for j=[1:size(fpts,1)]
                    [tmpm,tmpc]=expfit(fpts(j,:),0.01,truncated(j,:));
                    mfpt{i,ti}(5,j)=tmpm;
                    mfpt{i,ti}(6,j)=tmpc(1);
                    mfpt{i,ti}(7,j)=tmpc(2);
                end
            end
        end
    end
    
    % Save the data.
    save('data/matlab/mfpt.mat','mfpt');
    
    % Load the data.
    load('data/matlab/mfpt.mat','mfpt');

    % Plot the mftps.
    rows=3; cols=2; plotIndex=1;
    for i=[1:3]
        for ti=[1 2]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            subplot(rows,cols,plotIndex);
            if size(mfpt{i,ti},1) > 0
                N=mfpt{i,ti}(1,:);
                loglog(N, mfpt{i,ti}(2,:), 'b');
                hold('on');
                loglog(N, mfpt{i,ti}(3,:), 'b:');
                loglog(N, mfpt{i,ti}(4,:), 'b:');
                loglog(N, mfpt{i,ti}(5,:), 'g');
                loglog(N, mfpt{i,ti}(6,:), 'g:');
                loglog(N, mfpt{i,ti}(7,:), 'g:');
                hold('off');
                ax=axis; axis([0 N(end) 1e-2 tfs(ti)*10]); ylabel('Time (s)'); title(sprintf('MFPT (%s,a_{1}=%0.2f,fpt_{P2}=%0.2e)',transitionStrings{ti},a1,mfpt{i,ti}(5,p2i)));
                vline(p1);
                vline(p2);
                vline(p3);                
            end
            plotIndex=plotIndex+1;
        end
    end
    
    % Plot the mfpt as a function of a1.
    rows=2; cols=1; plotIndex=1;
    wkb=[5.02505, 5.61868, 6.21231, 6.80593;
        5.02505, 5.61868, 6.21231, 6.80593]
    for ti=[1 2]
        subplot(rows,cols,plotIndex);
        xs=[];
        ys=[];
        yfits=[];
        yl=[];
        yu=[];
        cs=[];
        for i=[1:3]
            a0=a0s(i); a1=a1s(i); p0=p0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            if size(mfpt{i,ti},1) > 0
                xs(end+1)=a1;
                ys(end+1)=mfpt{i,ti}(2,p2i);
                yfits(end+1)=mfpt{i,ti}(5,p2i);
                yl(end+1)=mfpt{i,ti}(6,p2i);
                yu(end+1)=mfpt{i,ti}(7,p2i);
                cs(end+1)=wkb(ti,i);
            end
        end
        semilogy(xs,yfits,'r.');
        hold('on');
        semilogy(xs,10.^cs,'bo-');
        ploterrorbar(xs,yfits,yl,yu,'r','-');
        hold('off');
        ax=axis; axis([a1s(1)-0.5 a1s(end)+0.5 ax(3) ax(4)]); xlabel('a_1'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT')); legend('Simulation', 'Theory', 'Location','Northwest');
        plotIndex=plotIndex+1;
        disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
        disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
        disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
        disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    end


   #### srgs_epsilon_dependence ####
    
    % n*eps^4 > 10
    
    % predicted tau = 4*sqrt(2/3)*(pi/eps^2)*exp((27/16)*N*exp^4)
    
    % correlation time = 100
    
    % Setup some parameters.
    N=2500; epsilons=[0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25]; a0s=(N/9).*(1-6.*epsilons.^2); a1s=N.*ones(size(epsilons)); p0s=N*(1/sqrt(3)).*(1-(3/2).*epsilons.^2); states={'off','on'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'}; tfs=[1e9 1e9]; ptaus = 4.*sqrt(2/3).*(pi./(epsilons.^2)).*exp((27/16).*N.*(epsilons.^4));
    nvars=[0.0];
    taus=[1e3];
    for i=[5e-2 1e-1 1.5e-1 4e0 2.5e1 5e1 1e2 1e3]
        for j=[5^2 10^2 15^2 20^2 25^2 30^2 40^2 50^2 75^2 100^2]
            nvars(end+1)=j;
            taus(end+1)=i;
        end
    end
    tau_recalcs=taus./1000;
    disp(sprintf('N=%d; epsilons=(%s); a0s=(%s); a1s=(%s); p0s=(%s);',N,sprintf('%5.3f ',epsilons),sprintf('%e ',a0s),sprintf('%d ',a1s),sprintf('%e ',p0s)));
    disp(sprintf('#            %s\nnvars=(      %s);\ntaus=(       %s);\ntau_recalcs=(%s);',sprintf('%7d ',[0:length(nvars)-1]),sprintf('%7.1f ',nvars),sprintf('%7.1e ',taus),sprintf('%7.1e ',tau_recalcs)));
    
    % Get the fixed points.
    fp=zeros(length(epsilons),3);
    for i=[1:length(epsilons)]
        a0=a0s(i); a1=a1s(i); p0=p0s(i);
        [p1,p2,p3]=self_regulating_gene_switch_fp(a0,a1,p0);
        fp(i,:)=[p1 p2 p3];
    end
    disp(sprintf('p1s=(%s); p2s=(%s); p3s=(%s);',sprintf('%4d ',round(reshape(fp(:,1),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,2),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,3),size(fp,1),1)))));
    
    % Plot the rate of change in the protein as a function of the protein count.
    rows=2; cols=3; plotIndex=1;
    for i=[1:length(epsilons)]
        subplot(rows,cols,plotIndex);
        epsilon=epsilons(i); a0=a0s(i); a1=a1s(i); p0=p0s(i);
        p=[0:floor(a1)];
        dP = self_regulating_gene_switch_dpdt(p,a0,a1,p0);
        lastP=find(dP>=-max(dP)*3,1,'last');
        plot(p(1:lastP),dP(1:lastP),'b');
        vline(fp(i,1));
        vline(fp(i,2));
        vline(fp(i,3));
        hold('on');
        hline(0,'k-');
        hold('off');
        plotIndex=plotIndex+1;
        xlabel('N'); ylabel('dN/dt'); title(sprintf('Protein Rate of Change (N=%d,epsilon=%0.2f,ptau=%0.2e)',N,epsilon,ptaus(i)));
    end

    # Run a series of simulations to calculate the pdfs.
    N=2500; epsilons=(0.190 0.200 0.210 0.220 0.230 0.240 0.250 ); a0s=(2.176111e+02 2.111111e+02 2.042778e+02 1.971111e+02 1.896111e+02 1.817778e+02 1.736111e+02 ); a1s=(2500 2500 2500 2500 2500 2500 2500 ); p0s=(1.365217e+03 1.356773e+03 1.347896e+03 1.338587e+03 1.328844e+03 1.318668e+03 1.308059e+03 );
    nvars=(          0.0    25.0   100.0   225.0   400.0   625.0    25.0   100.0   225.0   400.0   625.0    25.0   100.0   225.0   400.0   625.0    25.0   100.0   225.0   400.0   625.0    25.0   100.0   225.0   400.0   625.0    25.0   100.0   225.0   400.0   625.0    25.0   100.0   225.0   400.0   625.0 );
    taus=(       1.0e+03 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 );
    tau_recalcs=(1.0e+00 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 );
    p1s=( 389  368  347  326  306  286  266 ); p2s=( 788  783  778  773  767  761  755 ); p3s=(1323 1349 1375 1401 1427 1453 1479 );
    writeInterval=1e0; maxTime=1e3; parameterWriteInterval=1e-1;
    %is=`seq -f "%g" 0 0`;
    %js=`seq -f "%g" 16 16`;
    is="0";
    js="16";
    replicates="1-1";
    for i in $is; do
        epsilon=${epsilons[i]};
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
        
        for j in $js; do
            nvar=${nvars[j]}; tau=${taus[j]}; tau_recalc=${tau_recalcs[j]};
    
            # Start the off state.
            initialProtein=${p1}; maxProtein=${p2};
            filename="test_pdf_off_${N}_${epsilon}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} parameterWriteInterval=${parameterWriteInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 3 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 27 8 0 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log local 1 8 1 erobert3;
    
            # Start the on state.
            #initialProtein=${p3}; minProtein=${p2};
            #filename="pdf_on_${N}_${epsilon}_${nvar}_${tau}.lm5";
            #echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            #rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} parameterWriteInterval=${parameterWriteInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 3 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 27 8 0 erobert3;
        done;
    done;
    
    # Run a series of simulations to calculate the switching times.
    N=2500; epsilons=(0.150 0.160 0.170 0.180 0.190 0.200 0.210 0.220 0.230 0.240 0.250 ); a0s=(2.402778e+02 2.351111e+02 2.296111e+02 2.237778e+02 2.176111e+02 2.111111e+02 2.042778e+02 1.971111e+02 1.896111e+02 1.817778e+02 1.736111e+02 ); a1s=(2500 2500 2500 2500 2500 2500 2500 2500 2500 2500 2500 ); p0s=(1.394662e+03 1.387950e+03 1.380805e+03 1.373228e+03 1.365217e+03 1.356773e+03 1.347896e+03 1.338587e+03 1.328844e+03 1.318668e+03 1.308059e+03 );
    #                  0       1       2       3       4       5       6       7       8       9      10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31      32      33      34      35      36      37      38      39      40      41      42      43      44      45      46      47      48      49      50      51      52      53      54      55      56      57      58      59      60      61      62      63      64      65      66      67      68      69      70      71      72      73      74      75      76      77      78      79      80 
    nvars=(          0.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0 );
    taus=(       1.0e+03 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 );
    tau_recalcs=(1.0e+00 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 );
    p1s=( 476  454  432  410  389  368  347  326  306  286  266 ); p2s=( 805  801  797  793  788  783  778  773  767  761  755 ); p3s=(1218 1245 1271 1297 1323 1349 1375 1401 1427 1453 1479 );
    is=`seq -f "%g" 6 6`;
    js=`seq -f "%g" 12 12`;
    replicates="1-150";
    for i in $is; do
        epsilon=${epsilons[i]};
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
        
        for j in $js; do
            nvar=${nvars[j]}; tau=${taus[j]}; tau_recalc=${tau_recalcs[j]};
    
            # Start the off state.
            writeInterval=1e5; maxTime=1e9;
            initialProtein=${p1}; maxProtein=${p3};
            filename="fpt_off_on_${N}_${epsilon}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 6 8 0 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log ge1,ge2 45 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log cse 2 12 0 erobert3 00:10:00;
            
            # Start the on state.
            writeInterval=1e5; maxTime=1e9;
            initialProtein=${p3}; minProtein=${p1};
            filename="fpt_on_off_${N}_${epsilon}_${nvar}_${tau}.lm5";
            #echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            #rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 6 8 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log ge1,ge2 45 2 0 erobert3;
        done;
    done;
    
    % Calculate the pdfs.
    %pdfs=cell(length(epsilons),length(nvars),length(states),2);
    Rs=[1:10000]; tf=1e3;
    for i=[1]
        for j=[12:16]
            for si=[1:length(states)]
                epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                nvar=nvars(j); tau=taus(j);
                filename=sprintf('data/lm/pdf_%s_%0d_%05.3f_%03.1f_%5.0e.lm5',states{si},N,epsilon,nvar,tau);
                disp(sprintf('Loading %s',filename));
                counts=zeros(tf*length(Rs),1);
                countsUsed=0;
                shortRuns=0;
                for R=Rs
                    if mod(R,1000) == 0, disp(sprintf('Replicate %d',R));, end
                    data=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
                    first=6;
                    last=length(data)-2;
                    if last < 999, shortRuns=shortRuns+1;, end
                    counts((countsUsed+1):(countsUsed+1+last-first),1)=data(first:last,1);
                    countsUsed=countsUsed+last-first+1;
                end
                disp(sprintf('Short runs: %d',shortRuns));
                [C,X]=hist(counts(1:countsUsed,1),[0:max(counts(1:countsUsed,1))]);
                pdfs{i,j,si,1}=X;
                pdfs{i,j,si,2}=[C./(sum(C)*(X(2)-X(1)))];
            end
        end
    end

    % Calculate the mean first passage times.
    %mfpt=cell(length(epsilons),length(nvars),length(transitions));
    Rs=[1:150];
    for i=[6:7]
        for j=[1:length(nvars)]
            for ti=[1 2]
                epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                nvar=nvars(j); tau=taus(j);
                filename=sprintf('data/lm/fpt_%s_%0d_%05.3f_%03.1f_%7.1e.lm5',transitions{ti},N,epsilon,nvar,tau);
                try
                    if exist(filename)
                        disp(sprintf('Loading %s',filename));
                        fpts=ones(pMaxi,length(Rs));
                        truncated=ones(pMaxi,length(Rs));
                        for ri=[1:length(Rs)]
                            R=Rs(ri);
                            counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
                            minCount=counts(1); maxCount=counts(end);
                            fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
                            if maxCount > pMax, fpt=fpt(1:end-(maxCount-pMax));, maxCount=pMax;, end
                            if ti == 1 && maxCount < p3
                                disp(sprintf('Run %d for %d,%s was truncated: max value %d < %d',R,p0,transitions{ti},maxCount,p3));
                                fpts(:,ri)=tfs(ti);
                            elseif ti == 2 && minCount > p1
                                disp(sprintf('Run %d for %d,%s was truncated: min value %d > %d',R,p0,transitions{ti},minCount,p1));
                            if ri == 7
                                fpts(:,ri)=1e9;
                            else
                                fpts(:,ri)=tfs(ti);
                            end
                            else
                                fpts(:,ri)=max(fpt);
                            end
                            minIndex=minCount+1; maxIndex=maxCount+1;
                            fpts(minIndex:maxIndex,ri)=fpt;
                            truncated(minIndex:maxIndex,ri)=0;
                        end
                        mfpt{i,j,ti}=zeros(7,pMaxi);
                        mfpt{i,j,ti}(1,:)=[0:pMax];
                        mfpt{i,j,ti}(2,:)=mean(fpts,2);
                        mfpt{i,j,ti}(3,:)=max(fpts,[],2);
                        mfpt{i,j,ti}(4,:)=min(fpts,[],2);
                        for k=[1:size(fpts,1)]
                            [tmpm,tmpc]=expfit(fpts(k,:),0.01,truncated(k,:));
                            mfpt{i,j,ti}(5,k)=tmpm;
                            mfpt{i,j,ti}(6,k)=tmpc(1);
                            mfpt{i,j,ti}(7,k)=tmpc(2);
                        end
                    end
                catch
                    disp(sprintf('ERROR: Could not load %s',filename));
                end
            end
        end
    end
    
    % Save the data.
    save('data/matlab/pdfs.mat','pdfs');
    save('data/matlab/mfpt.mat','mfpt');
    
    % Load the data.
    load('data/matlab/pdfs.mat','pdfs');
    load('data/matlab/mfpt.mat','mfpt');

    % Plot the pdfs.
    rows=2; cols=3; plotIndex=1;
    jsets=[1 12 13 14 15 16; 1 7 8 9 10 11; 1 2 3 4 5 6;]; % Grouped by variance.
    %jsets=[7 2; 8 3; 9 4; 10 5; 11 6;]; % Group by correlation time.
    colors=getplotcolors();
    for si=[1:length(states)]
        for i=[1]
            for jsi=[1:size(jsets,1)]
                legendStrings=cell(0,1);
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    subplot(rows,cols,plotIndex);
                    C=pdfs{i,j,si,1};
                    X=pdfs{i,j,si,2};
                    semilogy(C, X, 'Color', colors{mod(size(legendStrings,1),length(colors))+1});
                    m=sum(C.*X);
                    v=sum(((C-m).^2).*X);
                    legendStrings{end+1,1}=sprintf('\\sigma^2_c=%0.0f,\\tau_c=%0.1e,\\mu=%0.0f',nvar,tau,m);
                    hold('on');
                end
                hold('off');
                vline(p2);
                if si == 1
                    axis([0 p2+100 1e-7 1e1]);
                    vline(p1);
                else
                    axis([p2-50 N 1e-7 1e1]); 
                    vline(p3);
                end                
                xlabel('p'); ylabel('P(p)'); title(sprintf('PDF (state=%s,N=%d,epsilon=%0.3f)',states{si},N,epsilon)); legend(legendStrings,'Location','NorthEast');
                plotIndex=plotIndex+1;
            end
        end
    end
    
    % Plot the P at a specific point as a function of nvar.
    p=700; si=1;
    js=[1 12 13 14 15 16; 1 7 8 9 10 11; 1 2 3 4 5 6];
    for i=[1]
        x=[];
        y=[];
        subplot(3,1,i)
        for j=js(i,:)
            x(end+1)=sqrt(nvars(j));
            y(end+1)=smooth(pdfs{1,j,si,2}(p));
        end
        plot(x,log(y));
        axis([0 25 -14 -8]);
    end
    

    % Plot the pdfs by correlation time.
    rows=2; cols=2; plotIndex=1; jsets=[1 7 8 9 10 11; 1 2 3 4 5 6;];
    colors=getplotcolors();
    for si=[1:length(states)]
        for i=[1]
            for jsi=[1:size(jsets,1)]
                legendStrings=cell(0,1);
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    subplot(rows,cols,plotIndex);
                    C=pdfs{i,j,si,1};
                    X=pdfs{i,j,si,2};
                    semilogy(C, X, 'Color', colors{mod(size(legendStrings,1),length(colors))+1});
                    m=sum(C.*X);
                    v=sum(((C-m).^2).*X);
                    legendStrings{end+1,1}=sprintf('\\sigma^2_c=%0.0f,\\tau_c=%0.1e,\\mu=%0.0f',nvar,tau,m);
                    hold('on');
                end
                hold('off');
                if si == 1
                    axis([0 p2+100 1e-7 1e1]);
                    vline(p1);
                else
                    axis([p2-50 N 1e-7 1e1]); 
                    vline(p3);
                end                
                vline(p2);
                xlabel('p'); ylabel('P(p)'); title(sprintf('PDF (state=%s,N=%d,epsilon=%0.3f)',states{si},N,epsilon)); legend(legendStrings,'Location','NorthEast');
                plotIndex=plotIndex+1;
            end
        end
    end

    % Plot the mftps.
    rows=3; cols=6; plotIndex=1; jsets=[1 12 13 14 15 16; 1 7 8 9 10 11; 1 2 3 4 5 6;];
    for ti=[2]
        for i=[1]
            for jsi=[1:size(jsets,1)]
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    subplot(rows,cols,plotIndex);
                    if size(mfpt{i,j,ti},1) > 0
                        X=mfpt{i,j,ti}(1,:);
                        loglog(X, mfpt{i,j,ti}(2,:), 'b');
                        hold('on');
                        loglog(X, mfpt{i,j,ti}(3,:), 'b:');
                        loglog(X, mfpt{i,j,ti}(4,:), 'b:');
                        loglog(X, mfpt{i,j,ti}(5,:), 'g');
                        loglog(X, mfpt{i,j,ti}(6,:), 'g:');
                        loglog(X, mfpt{i,j,ti}(7,:), 'g:');
                        hold('off');
                        ax=axis; axis([0 X(end) 1e-2 tfs(ti)*10]); ylabel('Time (s)'); title(sprintf('MFPT (%s,N=%d,\\epsilon=%0.3f,\\sigma^2_c=%0.0f,\\tau_c=%0.1e,fpt_{P2}=%0.2e)',transitionStrings{ti},N,epsilon,nvar,tau,mfpt{i,j,ti}(5,p2i)));
                        vline(p1);
                        vline(p2);
                        vline(p3);                
                    end
                    plotIndex=plotIndex+1;
                end
            end
        end
    end
    
    % Plot the mfpt as a function of epsilon.
    rows=2; cols=1; plotIndex=1;
    for ti=[1 2]
        subplot(rows,cols,plotIndex);
        xs=[];
        ys=[];
        yfits=[];
        yl=[];
        yu=[];
        cs=[];
        for i=[1:length(epsilons)]
            for j=[1]
                epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                nvar=nvars(j); tau=taus(j);
                if size(mfpt{i,j,ti},1) > 0
                    xs(end+1)=epsilon;
                    ys(end+1)=mfpt{i,j,ti}(2,p2i);
                    yfits(end+1)=mfpt{i,j,ti}(5,p2i);
                    yl(end+1)=mfpt{i,j,ti}(6,p2i);
                    yu(end+1)=mfpt{i,j,ti}(7,p2i);
                    cs(end+1)=ptaus(i);
                end
            end
        end
        semilogy(xs,yfits,'ro');
        hold('on');
        semilogy(xs,cs,'b-');
        prefactor=(yfits(1)./ptaus(1));
        semilogy(xs,prefactor.*cs,'m--');
        ploterrorbar(xs,yfits,yl,yu,'r','-');
        hold('off');
        ax=axis; axis([epsilons(1)-0.01 epsilons(end)+0.01 ax(3) ax(4)]); xlabel('epsilon'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT (N=%d)',N)); legend('Simulation', 'Theory', sprintf('Theory \\times %0.4f',prefactor), 'Location','Northwest');
        plotIndex=plotIndex+1;
        disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
        disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
        %disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
        %disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    end

    % Plot the mfpt as a function of the noise.
    rows=2; cols=8; row=1; col=1; plotIndex=1; jsets=[ 1 2:11; 1 12:21; 1 22:31; 1 32:41; 1 42:51; 1 52:61; 1 62:71; 1 72:81;];
    colors=getplotcolors();
    for ti=[1 2]
        for jsi=[1:size(jsets,1)]
            subplot(rows,cols,(row-1)*cols+col);
            for i=[1:7]
                xs=[];
                ys=[];
                yfits=[];
                yl=[];
                yu=[];
                cs=[];
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    if size(mfpt{i,j,ti},1) > 0
                        xs(end+1)=nvar;
                        ys(end+1)=mfpt{i,j,ti}(2,p2i);
                        yfits(end+1)=mfpt{i,j,ti}(5,p2i);
                        yl(end+1)=mfpt{i,j,ti}(6,p2i);
                        yu(end+1)=mfpt{i,j,ti}(7,p2i);
                    end
                end
                semilogy(xs,yfits,'o-','Color',colors{mod(i-1,length(colors))+2});
                hold('on');
                %ploterrorbar(xs,yfits,yl,yu,'r','-');
                disp(sprintf('%s,epsilon=%0.3f,tau_c=%0.1e',transitionStrings{ti},epsilon,tau));
                disp(sprintf('sigma^2_c  =(%s)',sprintf('%0.3e ',xs)));
                disp(sprintf('mfpt  =(%s)\n',sprintf('%0.3e ',log10(ys))));
            end
            hold('off');
            ax=axis; axis([-10 nvars(end)+10 1e1 1e6]); xlabel('\sigma^2_c'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT (N=%d,\\tau_c=%0.1e)',N,tau));
            col=col+1;
        end
        row=row+1; col=1;
    end
    
    
    for si=[1:length(states)]
        subplot(rows,cols,plotIndex);
        legendStrings=cell(length(nvars),1);
        for i=[1:length(nvars)]
            nvar=nvars(i); tau=taus(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1;
            N=pdfs{i,si,1};
            X=pdfs{i,si,2};
            semilogy(N, X, 'Color', colors{mod(i-1,length(colors))+1});
            legendStrings{i}=sprintf('\\sigma^2=%0.2f',nvar);
            hold('on');
        end
        hold('off');
        if si==1, axis([0 p2 1e-8 1e0]); else, axis([p2 p3*2 1e-8 1e0]); end,
        xlabel('p'); ylabel('P(p)'); title(sprintf('PDF (state=%s,a_0=%0.2f,a_{1}=%0.2f,p_{0}=%0.2f,\\tau=%0.2e)',states{si},a0,a1,p0,tau)); legend(legendStrings,'Location','NorthEast');
    
    
   #### srgs_epsilon_off_dependence ####


    % Setup some parameters.
    %N=500000; epsilons=[0.100 0.105 0.110 0.115 0.120 0.125 0.130 0.135 0.140 0.145]; x0s=[0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125]; alpha0s=(x0s.^2).*(1-(epsilons.^2))./4; alpha1s=ones(size(epsilons));  ptaus=exp((1/3).*N.*(x0s.^2).*(epsilons.^3));    
    %for i=[2.5e-2 5e-2 1e-1 1.5e-1 2.5e-1 1e0 5e0 2.5e1 5e1 1e2 1e3]
   
    % Setup some parameters.
    N=500000; epsilons=[0.100 0.105 0.110 0.115 0.120 0.125 0.130 0.135 0.140 0.145]; x0s=[0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125]; alpha0s=(x0s.^2).*(1-(epsilons.^2))./4; alpha1s=ones(size(epsilons));  ptaus=exp((1/3).*N.*(x0s.^2).*(epsilons.^3));    p0s=N.*x0s; a0s=N.*alpha0s; a1s=N.*alpha1s; states={'off'}; transitions={'off_on'}; transitionStrings={'off{\rightarrow}on'};
    nvars=[0.0];
    taus=[1e3];
    for i=[2.5e-2 5e-2 1e-1 1.5e-1 2.5e-1 1e0 5e0 2.5e1 5e1 1e2 1e3]
        for j=[1^2 2^2 3^2 4^2 5^2 6^2 7^2 8^2 9^2 10^2 15^2 20^2 25^2 50^2 100^2 150^2 200^2 250^2]
            nvars(end+1)=j;
            taus(end+1)=i;
        end
    end
    tau_recalcs=taus./1000;
    disp(sprintf('N=%d; epsilons=(%s); x0s=(%s); a0s=(%s); a1s=(%s); p0s=(%s);',N,sprintf('%5.3f ',epsilons),sprintf('%5.3f ',x0s),sprintf('%e ',a0s),sprintf('%d ',a1s),sprintf('%e ',p0s)));
    disp(sprintf('#            %s\nnvars=(      %s);\ntaus=(       %s);\ntau_recalcs=(%s);',sprintf('%7d ',[0:length(nvars)-1]),sprintf('%7.1f ',nvars),sprintf('%7.1e ',taus),sprintf('%7.1e ',tau_recalcs)));
    
    % Get the fixed points.
    fp=zeros(length(epsilons),3);
    for i=[1:length(epsilons)]
        a0=a0s(i); a1=a1s(i); p0=p0s(i);
        [p1,p2,p3]=self_regulating_gene_switch_fp(a0,a1,p0);
        fp(i,:)=[p1 p2 p3];
    end
    disp(sprintf('p1s=(%s); p2s=(%s); p3s=(%s);',sprintf('%4d ',round(reshape(fp(:,1),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,2),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,3),size(fp,1),1)))));

    % Plot the rate of change in the protein as a function of the protein count.
    rows=3; cols=4; plotIndex=1;
    for i=[1:length(epsilons)]
        subplot(rows,cols,plotIndex);
        epsilon=epsilons(i); x0=x0s(i); a0=a0s(i); a1=a1s(i); p0=p0s(i);
        p=[0:floor(a1)];
        dP = self_regulating_gene_switch_dpdt(p,a0,a1,p0);
        lastP=find(dP>=-max(dP)*3,1,'last');
        semilogx(p(1:lastP),dP(1:lastP),'b');
        vline(fp(i,1),'r:',sprintf('%0.2f',fp(i,1)));
        vline(fp(i,2),'r:',sprintf('%0.2f',fp(i,2)));
        vline(fp(i,3),'r:',sprintf('%0.2f',fp(i,3)));
        hold('on');
        hline(0,'k-');
        hold('off');
        plotIndex=plotIndex+1;
        xlabel('N'); ylabel('dN/dt'); title(sprintf('(N=%d,\\epsilon=%0.2f,x_0=%0.2f,\\tau_{pred}=%0.2e)',N,epsilon,x0,ptaus(i)));
    end

    % Plot the protein distribution using the Matlab Gillespie code.
    i=1; j=1;
    a0=a0s(i); a1=a1s(i); p0=p0s(i);
    n = [1 40];
    V=8e-16;
    S = [0  0;
         1 -1];
    p  = [{'prop_1st_order_hill'}       [1 a0 a1 2 2 p0];
          {'prop_1st_order'}            [2 1]];
    R=100;
    tf = 100;
    ts=[0:1:tf];
    C=zeros(R,length(ts));
    parfor i=[1:R]
        disp(sprintf('(%04d-%02d-%02d %02d:%02d:%05.02f): Running replicate %d of %d',clock,i,R));
        [et,edata]=gillespie_d(n, V, S', p, tf);
        [tt,tdata]=event_to_ts(et,edata,ts);
        C(i,:)=tdata(:,2);
    end
    subplot(1,1,1);
    counts=reshape(C,1,size(C,1)*size(C,2));
    upperC=max(counts)+100-mod(max(counts),100);
    binSize=1;
    [N,X]=hist(counts,[0:binSize:upperC]);
    D=N./(sum(N)*(X(2)-X(1)));
    loglog(X,D);
    ax=axis; axis([1 2500 1e-7 1e1]); ylabel('Probability Density'); xlabel('Protein Count');title(sprintf('a=%d,b=%4.2f,d1=%4.2e,gam=%d,kap0_{min}=%4.2e,kap0_{max}=%4.2e,h0=%d,n0_{50}=%d,kap1_{min}=%4.2e,kap1_{max}=%4.2e,h1=%d,n1_{50}=%d',a,b,d1,gam,kap0_min,kap0_max,h0,n0_50,kap1_min,kap1_max,h1,n1_50));
    vline(p1,'g-'); vline(p2,'r-'); vline(p3,'g-');
    
    # Run a series of simulations to look at the dynamics.
    N=10000; epsilons=(0.100 0.110 0.120 0.130 0.140 0.150 ); x0s=(0.300 0.300 0.300 0.300 0.300 0.300 ); a0s=(2.227500e+02 2.222775e+02 2.217600e+02 2.211975e+02 2.205900e+02 2.199375e+02 ); a1s=(10000 10000 10000 10000 10000 10000 ); p0s=(3.000000e+03 3.000000e+03 3.000000e+03 3.000000e+03 3.000000e+03 3.000000e+03 );
    #                  0       1       2       3       4       5       6       7       8       9      10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31      32      33      34      35      36      37      38      39      40      41      42      43      44      45      46      47      48      49      50      51      52      53      54      55      56      57      58      59      60      61      62      63      64      65      66      67      68      69      70      71      72      73      74      75      76      77      78      79      80 
    nvars=(          0.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0 );
    taus=(       1.0e+03 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 );
    tau_recalcs=(1.0e+00 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 );
    p1s=( 367  365  362  360  358  355 ); p2s=( 606  608  610  612  615  618 ); p3s=(9028 9028 9028 9027 9027 9027 );
    writeInterval=1e-1; parameterWriteInterval=1e-1; maxTime=1e5;
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 0 0`;
    replicates="1-1";
    for i in $is; do
        epsilon=${epsilons[i]};
        x0=${x0s[i]};
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
        
        for j in $js; do
            nvar=${nvars[j]}; tau=${taus[j]}; tau_recalc=${tau_recalcs[j]};
            initialProtein=${p1};
            filename="ts_off_${N}_${epsilon}_${x0}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} writeInterval=${writeInterval} parameterWriteInterval=${parameterWriteInterval} maxTime=${maxTime} > /dev/null;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 1 8 0 erobert3;
        done;
    done;
    
    # Run a series of simulations to calculate the pdfs.
    N=10000; epsilons=(0.100 0.110 0.120 0.130 0.140 0.150 ); x0s=(0.300 0.300 0.300 0.300 0.300 0.300 ); a0s=(2.227500e+02 2.222775e+02 2.217600e+02 2.211975e+02 2.205900e+02 2.199375e+02 ); a1s=(10000 10000 10000 10000 10000 10000 ); p0s=(3.000000e+03 3.000000e+03 3.000000e+03 3.000000e+03 3.000000e+03 3.000000e+03 );
    #                  0       1       2       3       4       5       6       7       8       9      10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31      32      33      34      35      36      37      38      39      40      41      42      43      44      45      46      47      48      49      50      51      52      53      54      55      56      57      58      59      60      61      62      63      64      65      66      67      68      69      70      71      72      73      74      75      76      77      78      79      80 
    nvars=(          0.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0    25.0   100.0   225.0   400.0   625.0   900.0  1600.0  2500.0  5625.0 10000.0 );
    taus=(       1.0e+03 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 4.0e+00 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 );
    tau_recalcs=(1.0e+00 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 4.0e-03 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 );
    p1s=( 367  365  362  360  358  355 ); p2s=( 606  608  610  612  615  618 ); p3s=(9028 9028 9028 9027 9027 9027 );
    writeInterval=1e0; parameterWriteInterval=1e0; maxTime=1e3;
    is=`seq -f "%g" 1 1`;
    js=`seq -f "%g" 0 0`;
    replicates="1-10000";
    for i in $is; do
        epsilon=${epsilons[i]};
        x0=${x0s[i]};
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
        for j in $js; do
            nvar=${nvars[j]}; tau=${taus[j]}; tau_recalc=${tau_recalcs[j]};
            initialProtein=${p1};
            filename="pdf_off_${N}_${epsilon}_${x0}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} writeInterval=${writeInterval} parameterWriteInterval=${parameterWriteInterval} maxTime=${maxTime} > /dev/null;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 3 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 10 8 0 erobert3;
        done;
    done;
    
    # Run a series of simulations to calculate the switching times.
    N=500000; epsilons=(0.100 0.105 0.110 0.115 0.120 0.125 0.130 0.135 0.140 0.145 ); x0s=(0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 ); a0s=(1.933594e+03 1.931592e+03 1.929492e+03 1.927295e+03 1.925000e+03 1.922607e+03 1.920117e+03 1.917529e+03 1.914844e+03 1.912061e+03 ); a1s=(500000 500000 500000 500000 500000 500000 500000 500000 500000 500000 ); p0s=(6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 6.250000e+04 );
    #                  0       1       2       3       4       5       6       7       8       9      10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31      32      33      34      35      36      37      38      39      40      41      42      43      44      45      46      47      48      49      50      51      52      53      54      55      56      57      58      59      60      61      62      63      64      65      66      67      68      69      70      71      72      73      74      75      76      77      78      79      80      81      82      83      84      85      86      87      88      89      90      91      92      93      94      95      96      97      98      99     100     101     102     103     104     105     106     107     108     109     110     111     112     113     114     115     116     117     118     119     120     121     122     123     124     125     126     127     128     129     130     131     132     133     134     135     136     137     138     139     140     141     142     143     144     145     146     147     148     149     150     151     152     153     154     155     156     157     158     159     160     161     162     163     164     165     166     167     168     169     170     171     172     173     174     175     176     177     178     179     180     181     182     183     184     185     186     187     188     189     190     191     192     193     194     195     196     197     198 
    nvars=(          0.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0 );
    taus=(       1.0e+03 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 1.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 2.5e-01 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 5.0e+00 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 2.5e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 1.0e+03 );
    tau_recalcs=(1.0e+00 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 2.5e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 5.0e-05 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.0e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 1.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 2.5e-04 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 1.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 5.0e-03 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 2.5e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1.0e+00 );
    p1s=(3424 3409 3394 3378 3362 3346 3330 3314 3297 3281 ); p2s=(4483 4498 4513 4529 4545 4561 4577 4593 4610 4627 ); p3s=(492093 492093 492093 492093 492093 492093 492093 492093 492093 492093 );
    is=`seq -f "%g" 8 8`;
    js=`seq -f "%g" 92 -1 91`;
    replicates="1-250";
    for i in $is; do
        epsilon=${epsilons[i]};
        x0=${x0s[i]};
        a0=${a0s[i]};
        a1=${a1s[i]};
        p0=${p0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};        
        for j in $js; do
            nvar=${nvars[j]}; tau=${taus[j]}; tau_recalc=${tau_recalcs[j]};
            writeInterval=1e1; parameterWriteInterval=1e1; maxTime=1e9;
            initialProtein=${p1}; maxProtein=${p3};
            filename="fpt_off_on_${N}_${epsilon}_${x0}_${nvar}_${tau}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein and noise $nvar,$tau ($tau_recalc)";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} parameterWriteInterval=${parameterWriteInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 10 8 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log trial 1 16 0 erobert3;
        done;
    done;
    
    % Calculate the pdfs.
    %pdfs=cell(length(epsilons),length(nvars),length(states),2);
    Rs=[1:10000]; tf=1e3;
    for i=[2]
        for j=[1]
            for si=[1:1]
                epsilon=epsilons(i); x0=x0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                nvar=nvars(j); tau=taus(j);
                filename=sprintf('data/lm/pdf_%s_%0d_%05.3f_%05.3f_%03.1f_%5.1e.lm5',states{si},N,epsilon,x0,nvar,tau);
                disp(sprintf('Loading %s',filename));
                counts=zeros(tf*length(Rs),1);
                countsUsed=0;
                shortRuns=0;
                for R=Rs
                    if mod(R,1000) == 0, disp(sprintf('Replicate %d',R));, end
                    data=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
                    first=2;
                    last=length(data);
                    if last < 999, shortRuns=shortRuns+1;, end
                    counts((countsUsed+1):(countsUsed+1+last-first),1)=data(first:last,1);
                    countsUsed=countsUsed+last-first+1;
                end
                disp(sprintf('Short runs: %d',shortRuns));
                [C,X]=hist(counts(1:countsUsed,1),[0:max(counts(1:countsUsed,1))]);
                pdfs{i,j,si,1}=X;
                pdfs{i,j,si,2}=[C./(sum(C)*(X(2)-X(1)))];
            end
        end
    end

    # Calculate the mean first passage times on the cluster.
    N=500000; epsilons=(0.145 ); x0s=(0.125 ); a0s=(1.912061e+03 ); a1s=(500000 ); p0s=(6.250000e+04 );
    #                  0       1       2       3       4       5       6       7       8       9      10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31      32      33      34      35      36 
    nvars=(          0.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0     1.0     4.0     9.0    16.0    25.0    36.0    49.0    64.0    81.0   100.0   225.0   400.0   625.0  2500.0 10000.0 22500.0 40000.0 62500.0 );
    taus=(       1.0e+03 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+02 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 5.0e+01 );
    tau_recalcs=(1.0e+00 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 1.0e-01 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 5.0e-02 );
    p1s=(3281 ); p2s=(4627 ); p3s=(492093 );
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 0 36`;
    k=0;
    R=100; tf=1e9;
    for i in $is; do
        epsilon=${epsilons[i]};
        x0=${x0s[i]};
        pi=${i}; p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};        
        for j in $js; do
            nvar=${nvars[j]}; tau=${taus[j]};
            filename="data/lm/fpt_off_on_${N}_${epsilon}_${x0}_${nvar}_${tau}.lm5";
            outputFilename="'data/matlab/mfpt.dat'";
            inputFilename="'data/lm/fpt_off_on_${N}_${epsilon}_${x0}_${nvar}_${tau}.lm5'";
            logFilename="logs/mfpt_calc_${N}_${epsilon}_${x0}_${nvar}_${tau}.log";
            if [ -e ${filename} ]; then
                echo "Calculating mfpt from ${inputFilename} into ${outputFilename}";
                matlab-submit calc_mfpt ${outputFilename} ${inputFilename} 0 ${R} ${tf} ${p1} ${p2} ${p3} $((i+1)) $((j+1)) $((k+1)) ${logFilename} sif 1 erobert3;
            fi
        done;
    done;
    
    % Save the data.
    save('data/matlab/pdfs.mat','pdfs');
    
    % Load the data.
    load('data/matlab/pdfs.mat','pdfs');
    mfpt=cellload('data/matlab/mfpt.dat',1,37,1);

    % Load an individual trajectory.
    i=1; j=1; si=1; R=1;
    epsilon=epsilons(i); x0=x0s(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
    nvar=nvars(j); tau=taus(j);
    filename=sprintf('data/lm/ts_%s_%0d_%05.3f_%05.3f_%03.1f_%5.1e.lm5',states{si},N,epsilon,x0,nvar,tau);
    disp(sprintf('Loading %s',filename));
    samples=[1:1e2:1e5];
    samples=[1:1:2000];
    ts=cast(h5read(filename,sprintf('/Simulations/%07d/SpeciesCountTimes',R),samples(1),length(samples),samples(2)-samples(1)),'double');
    data=cast(permute(h5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R),[1 samples(1)],[1 length(samples)],[1 samples(2)-samples(1)]),[2,1]),'double');
    
    % Plot an individual trajectory.
    subplot(2,1,1);
    plotstep(ts,data(:,1),'b');
    ax=axis; axis([ts(1) ts(end) 0 N]); xlabel('Time (s^{-1})'); ylabel('Protein Count');
    subplot(2,1,2);
    counts=data(:,1);
    upperC=max(counts)+100-mod(max(counts),500);
    binSize=1;
    [C,X]=hist(counts,[0:binSize:upperC]);
    D=C./(sum(C)*(X(2)-X(1)));
    plot(X,D);
    ax=axis; axis([0 upperC 0 ax(4)]); xlabel('Protein Count'); ylabel('Probability Density');
    
    % Plot the pdfs.
    rows=1; cols=1; plotIndex=1;
    %jsets=[1 12 13 14 15 16; 1 7 8 9 10 11; 1 2 3 4 5 6;]; % Grouped by variance.
    %jsets=[7 2; 8 3; 9 4; 10 5; 11 6;]; % Group by correlation time.
    jsets=[1];
    colors=getplotcolors();
    for si=[1:1]
        for i=[1]
            for jsi=[1:size(jsets,1)]
                legendStrings=cell(0,1);
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    subplot(rows,cols,plotIndex);
                    C=pdfs{i,j,si,1};
                    X=pdfs{i,j,si,2};
                    loglog(C, X, 'Color', colors{mod(size(legendStrings,1),length(colors))+1});
                    m=sum(C.*X);
                    v=sum(((C-m).^2).*X);
                    legendStrings{end+1,1}=sprintf('\\sigma^2_c=%0.0f,\\tau_c=%0.1e,\\mu=%0.0f',nvar,tau,m);
                    hold('on');
                end
                hold('off');
                axis([0 p3 1e-7 1e1]);
                vline(p1,'r:',sprintf('%d',p1));
                vline(p2,'r:',sprintf('%d',p2));
                xlabel('p'); ylabel('P(p)'); title(sprintf('PDF (state=%s,N=%d,epsilon=%0.3f)',states{si},N,epsilon)); legend(legendStrings,'Location','NorthEast');
                plotIndex=plotIndex+1;
            end
        end
    end
    
    % Plot the mftps.
    rows=4; cols=4; plotIndex=1; jsets=[33:37]; tf=1e9;
    for ti=[1]
        for i=[1]
            for jsi=[1:size(jsets,1)]
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    subplot(rows,cols,plotIndex);
                    if size(mfpt{i,j,ti},1) > 0
                        X=mfpt{i,j,ti}(1,:);
                        loglog(X, mfpt{i,j,ti}(2,:), 'b');
                        hold('on');
                        loglog(X, mfpt{i,j,ti}(3,:), 'b:');
                        loglog(X, mfpt{i,j,ti}(4,:), 'b:');
                        loglog(X, mfpt{i,j,ti}(5,:), 'g');
                        loglog(X, mfpt{i,j,ti}(6,:), 'g:');
                        loglog(X, mfpt{i,j,ti}(7,:), 'g:');
                        hold('off');
                        ax=axis; axis([0 X(end) 1e-2 tf*10]); ylabel('Time (s)'); title(sprintf('MFPT (%s,N=%d,\\epsilon=%0.3f,\\sigma^2_c=%0.0f,\\tau_c=%0.1e,fpt_{P2}=%0.2e)',transitionStrings{ti},N,epsilon,nvar,tau,mfpt{i,j,ti}(5,p2i)));
                        vline(p1);
                        vline(p2);
                        vline(p3);                
                    end
                    plotIndex=plotIndex+1;
                end
            end
        end
    end
    
    % Plot the mfpt as a function of epsilon.
    rows=1; cols=1; plotIndex=1;
    for ti=[1]
        subplot(rows,cols,plotIndex);
        colors=getplotcolors();
        legendStrings=cell(0,1);
        for j=[114:127]
            xs=[];
            ys=[];
            yfits=[];
            yl=[];
            yu=[];
            cs=[];
            for i=[1:10]
                epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                nvar=nvars(j); tau=taus(j);
                if size(mfpt{i,j,ti},1) > 0
                    xs(end+1)=epsilon;
                    ys(end+1)=mfpt{i,j,ti}(2,p2i);
                    yfits(end+1)=mfpt{i,j,ti}(5,p2i);
                    yl(end+1)=mfpt{i,j,ti}(6,p2i);
                    yu(end+1)=mfpt{i,j,ti}(7,p2i);
                    cs(end+1)=ptaus(i);
                end
            end
            semilogy(xs,yfits, 'o-', 'Color',colors{mod(size(legendStrings,1),length(colors))+1});
            legendStrings{end+1,1}=sprintf('\\sigma^2=%d',nvars(j));
            hold('on');
            ploterrorbar(xs,yl,yu,'k','-');
            disp(sprintf('%s,sigma^2_c=%d,tau_c=%0.1e',transitionStrings{ti},nvar,tau));
            disp(sprintf('epsilon=(%s)',sprintf('%0.3f ',xs)));
            disp(sprintf('mfpt   =(%s)\n',sprintf('%0.3e ',log10(ys))));
        end
        hold('off');
        ax=axis; axis([epsilons(1)-0.001 epsilons(end)+0.001 ax(3) ax(4)]); xlabel('epsilon'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT (\\tau=%e)',taus(j))); legend(legendStrings,'Location','NorthWest');
        plotIndex=plotIndex+1;
        %disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
        %disp(sprintf('y  =(%s);',sprintf('%0.3e ',ys)));
        %disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
        %disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    end

    % Plot the mfpt as a function of the noise.
    rows=2; cols=1; row=1; col=1; plotIndex=1; jsets=[1 2:19; 1 20:37];
    colors=getplotcolors();
    for ti=[1]
        for jsi=[1:size(jsets,1)]
            subplot(rows,cols,(row-1)*cols+col);
            for i=[1]
                xs=[];
                ys=[];
                yfits=[];
                yl=[];
                yu=[];
                cs=[];
                for j=jsets(jsi,:)
                    epsilon=epsilons(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
                    nvar=nvars(j); tau=taus(j);
                    if size(mfpt{i,j,ti},1) > 0
                        xs(end+1)=nvar;
                        ys(end+1)=mfpt{i,j,ti}(2,p2i);
                        yfits(end+1)=mfpt{i,j,ti}(5,p2i);
                        yl(end+1)=mfpt{i,j,ti}(6,p2i);
                        yu(end+1)=mfpt{i,j,ti}(7,p2i);
                    end
                end
                loglog(xs,yfits,'o-','Color',colors{mod(i-1,length(colors))+2});
                hold('on');
                ploterrorbar(xs,yl,yu,'k','-');
                disp(sprintf('%s,epsilon=%0.3f,tau_c=%0.1e',transitionStrings{ti},epsilon,tau));
                disp(sprintf('sigma^2_c  =(%s)',sprintf('%0.3e ',xs)));
                disp(sprintf('mfpt  =(%s)\n',sprintf('%0.3e ',log10(ys))));
            end
            hold('off');
            ax=axis; axis([1e0 nvars(end)+10 1e1 1e7]); xlabel('\sigma^2_c'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT (N=%d,\\tau_c=%0.1e)',N,tau));
            col=col+1;
        end
        row=row+1; col=1;
    end
    
    
    #### srgs_p0_dependence ####
    
    % Setup some parameters.
    a0=[6]; a1=[260]; p0s=[100:2:130]; states={'off','on'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'}; tfs=[1e10 1e8];
    disp(sprintf('p0s=(%s);',sprintf('%03d ',p0s)));

    % Get the fixed points.
    fp=zeros(length(p0s),3);
    for pi=[1:length(p0s)]
        p0=p0s(pi);
        [p1,p2,p3]=self_regulating_gene_switch_fp(a0,a1,p0);
        fp(pi,:)=[p1 p2 p3];
    end
    disp(sprintf('p1s=(%s);\np2s=(%s);\np3s=(%s);',sprintf('%4d ',round(reshape(fp(:,1),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,2),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,3),size(fp,1),1)))));
    
    % Plot the rate of change in the protein as a function of the protein count.
    rows=2; cols=3; plotIndex=1;
    for i=[1:length(a0s)]
        subplot(rows,cols,plotIndex);
        for ai=[1:1]
            a0=a0s(i); a1=a1s(i); p0=p0s(i);
            p=[0:floor(a1)];
            dP = self_regulating_gene_switch_dpdt(p,a0,a1,p0);
            lastP=find(dP>=-max(dP)*3,1,'last');
            plot(p(1:lastP),dP(1:lastP),'b');
            vline(fp(i,1));
            vline(fp(i,2));
            vline(fp(i,3));
            hold('on');
        end
        hline(0,'k-');
        hold('off');
        %xlabel('Protein Count (N)'); ylabel('dN/dt'); title(sprintf('Protein Rate of Change (a_0=%0.2f,a_{00}=%0.2f,n_{50}=%0.2f,h=%0.2f,b=%0.2f)',a0,a00,n50,h,b)); %legend(legendStrings,'Location','NorthEast');
        plotIndex=plotIndex+1;
    end
    
    # Run a series of simulations to calculate the switching times.
    a0=6.00; a1=260.00;
    pis=`seq -f "%g" 5 5`; p0s=(100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 );
          offons=(  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 );
          onoffs=(  0   0   0   0   0   1   1   1   1   1   1   1   1   1   1   1 );
    p1s=(   7    7    7    7    7    7    7    7    7    7    7    7    7    7    7    7 ); p2s=(  38   40   43   45   48   51   54   57   61   65   69   73   78   83   90   98 ); p3s=( 215  212  210  207  205  202  199  196  192  188  184  180  175  170  163  156 );
    replicates="1-50";
    for pi in $pis; do
        p0=${p0s[pi]};
        p1=${p1s[pi]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                
        if [ ${offons[pi]} -eq 11 ]; then
            # Start the off state.
            writeInterval=1e5; maxTime=1e10;
            initialProtein=${p1}; maxProtein=${p3};
            filename="fpt_off_on_${a0}_${a1}_${p0}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein and $p0";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 2 12 4 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 7 8 0 erobert3;
        fi;
    
        if [ ${onoffs[pi]} -eq 1 ]; then
            # Start the on state.
            writeInterval=1e5; maxTime=1e9;
            initialProtein=${p3}; minProtein=${p1};
            filename="fpt_on_off_${a0}_${a1}_${p0}.lm5";
            echo "${filename} with $p1 $p2 $p3 start $initialProtein";
            rm -f data/lm/${filename} && lm_setp data/lm/${filename} 1 a0=${a0} a1=${a1} p0=${p0} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
            lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 7 8 0 erobert3;
        fi;
    done;

    % Plot a first passage time distribution.
    rows=2; cols=2; plotIndex=1; Rs=[1:50];
    for pi=[7:10]
        for ti=[2]
            subplot(rows,cols,plotIndex);
            p0=p0s(pi); p1=round(fp(pi,1)); p2=round(fp(pi,2)); p3=round(fp(pi,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            filename=sprintf('data/lm/fpt_%s_%0.2f_%0.2f_%d.lm5',transitions{ti},a0,a1,p0);
            fpts=ones(pMaxi,length(Rs));
            truncated=ones(pMaxi,length(Rs));
            for ri=[1:length(Rs)]
                R=Rs(ri);
                counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
                minCount=counts(1); maxCount=counts(end);
                fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
                if maxCount > pMax, fpt=fpt(1:end-(maxCount-pMax));, maxCount=pMax;, end
                if ti == 1 && maxCount < p3
                    disp(sprintf('Run %d for %d,%s was truncated: max value %d < %d',R,p0,transitions{ti},maxCount,p3));
                    fpts(:,ri)=tfs(ti);
                elseif ti == 2 && minCount > p1
                    disp(sprintf('Run %d for %d,%s was truncated: min value %d > %d',R,p0,transitions{ti},minCount,p1));
                    if ri == 7
                        fpts(:,ri)=1e9;
                    else
                        fpts(:,ri)=tfs(ti);
                    end
                else
                    fpts(:,ri)=max(fpt);
                end
                minIndex=minCount+1; maxIndex=maxCount+1;
                fpts(minIndex:maxIndex,ri)=fpt;
                truncated(minIndex:maxIndex,ri)=0;
            end
            [N,X]=hist(fpts(p2i,:),20);
            D=N./(sum(N)*(X(2)-X(1)));
            bar(X,D);
            m1=mean(fpts(p2i,:));
            [m2,c2]=expfit(fpts(p2i,:),[],truncated(p2i,:));
            hold('on');
            h=[];
            h(1)=plot(X,exppdf(X,m1),'r');
            h(2)=plot(X,exppdf(X,m2),'g');
            h(3)=plot(X,exppdf(X,c2(1)),'g:');
            h(4)=plot(X,exppdf(X,c2(2)),'g:');
            hold('off');
            ylabel('\tau_{P2}'); title(sprintf('FPT (p_{0}=%0.2f)',p0)); legend(h,sprintf('Mean: %0.04e',m1),sprintf('Fit: %0.04e',m2),sprintf('-95%% CI: %0.04e',c2(1)),sprintf('+95%% CI: %0.04e',c2(2)));
            plotIndex=plotIndex+1;
        end
    end

    % Calculate the mean first passage times.
    mfpt=cell(length(p0s),length(transitions));
    Rs=[1:50];
    for pi=[1:length(p0s)]
        for ti=[1 2]
            p0=p0s(pi); p1=round(fp(pi,1)); p2=round(fp(pi,2)); p3=round(fp(pi,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            filename=sprintf('data/lm/fpt_%s_%0.2f_%0.2f_%d.lm5',transitions{ti},a0,a1,p0);
            if exist(filename)
                disp(sprintf('Loading %s',filename));
                fpts=ones(pMaxi,length(Rs));
                truncated=ones(pMaxi,length(Rs));
                for ri=[1:length(Rs)]
                    R=Rs(ri);
                    counts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
                    minCount=counts(1); maxCount=counts(end);
                    fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
                    if maxCount > pMax, fpt=fpt(1:end-(maxCount-pMax));, maxCount=pMax;, end
                    if ti == 1 && maxCount < p3
                        disp(sprintf('Run %d for %d,%s was truncated: max value %d < %d',R,p0,transitions{ti},maxCount,p3));
                        fpts(:,ri)=tfs(ti);
                    elseif ti == 2 && minCount > p1
                        disp(sprintf('Run %d for %d,%s was truncated: min value %d > %d',R,p0,transitions{ti},minCount,p1));
                    if ri == 7
                        fpts(:,ri)=1e9;
                    else
                        fpts(:,ri)=tfs(ti);
                    end
                    else
                        fpts(:,ri)=max(fpt);
                    end
                    minIndex=minCount+1; maxIndex=maxCount+1;
                    fpts(minIndex:maxIndex,ri)=fpt;
                    truncated(minIndex:maxIndex,ri)=0;
                end
                mfpt{pi,ti}=zeros(7,pMaxi);
                mfpt{pi,ti}(1,:)=[0:pMax];
                mfpt{pi,ti}(2,:)=mean(fpts,2);
                mfpt{pi,ti}(3,:)=max(fpts,[],2);
                mfpt{pi,ti}(4,:)=min(fpts,[],2);
                for j=[1:size(fpts,1)]
                    [tmpm,tmpc]=expfit(fpts(j,:),0.01,truncated(j,:));
                    mfpt{pi,ti}(5,j)=tmpm;
                    mfpt{pi,ti}(6,j)=tmpc(1);
                    mfpt{pi,ti}(7,j)=tmpc(2);
                end
            end
        end
    end
    
    % Save the data.
    save('data/matlab/mfpt.mat','mfpt');
    
    % Load the data.
    load('data/matlab/mfpt.mat','mfpt');

    % Plot the mftps.
    rows=2; cols=2; plotIndex=1;
    for pi=[7:10]
        for ti=[2]
            p0=p0s(pi); p1=round(fp(pi,1)); p2=round(fp(pi,2)); p3=round(fp(pi,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; tf=tfs(ti); 
            subplot(rows,cols,plotIndex);
            if size(mfpt{pi,ti},1) > 0
                N=mfpt{pi,ti}(1,:);
                loglog(N, mfpt{pi,ti}(2,:), 'b');
                hold('on');
                loglog(N, mfpt{pi,ti}(3,:), 'b:');
                loglog(N, mfpt{pi,ti}(4,:), 'b:');
                loglog(N, mfpt{pi,ti}(5,:), 'g');
                loglog(N, mfpt{pi,ti}(6,:), 'g:');
                loglog(N, mfpt{pi,ti}(7,:), 'g:');
                hold('off');
                ax=axis; axis([0 N(end) 1e-2 tf*10]); ylabel('Time (s)'); title(sprintf('MFPT (p_{0}=%0.2f,fpt_{P2}=%0.2e)',p0,mfpt{pi,ti}(5,p2i)));
                vline(p1);
                vline(p2);
                vline(p3);                
            end
            plotIndex=plotIndex+1;
        end
    end
    
    % Plot the mfpt as a function of p0.
    rows=2; cols=1; plotIndex=1;
    wkb=[3.49857, 3.82549, 4.1753, 4.5484, 4.94532, 5.36673, 5.81348, 6.28661, 6.78738, 7.31738, 7.87862, 8.47372, 9.10625, 9.78147, 10.5079, 11.3026;
        14.4558, 13.2373, 12.0615, 10.9296, 9.84316, 8.8037, 7.8132, 6.87393, 5.98863, 5.1606, 4.39402, 3.69426, 3.06861, 2.52767, 2.08871, 1.78611]
    for ti=[1 2]
        subplot(rows,cols,plotIndex);
        xs=[];
        ys=[];
        yfits=[];
        yl=[];
        yu=[];
        cs=[];
        for pi=[1:length(p0s)]
            p0=p0s(pi); p1=round(fp(pi,1)); p2=round(fp(pi,2)); p3=round(fp(pi,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; pMax=2*a1; pMaxi=pMax+1;
            if size(mfpt{pi,ti},1) > 0
                xs(end+1)=p0;
                ys(end+1)=mfpt{pi,ti}(2,p2i);
                yfits(end+1)=mfpt{pi,ti}(5,p2i);
                yl(end+1)=mfpt{pi,ti}(6,p2i);
                yu(end+1)=mfpt{pi,ti}(7,p2i);
                cs(end+1)=wkb(ti,pi);
            end
        end
        semilogy(xs,yfits,'r.');
        hold('on');
        semilogy(xs,10.^cs,'bo-');
        semilogy(xs,0.5.*(10.^cs),'b:');
        ploterrorbar(xs,yfits,yl,yu,'r','-');
        hold('off');
        ax=axis; axis([p0s(1)-0.5 p0s(end)+0.5 ax(3) ax(4)]); xlabel('p_0'); ylabel(sprintf('\\tau_{%s}',transitionStrings{ti})); title(sprintf('MFPT')); legend('Simulation', 'WKB', '0.5*WKB', 'Location','Northwest');
        plotIndex=plotIndex+1;
        disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
        disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
        disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
        disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    end

    #### srgs_ou_noise_testing ####
    
    % Setup some parameters.
    a0=[6]; a1=[260]; p0=[115]; nvars=[0 1 2]; taus=[1e3 1e3 1e3]; states={'off','on'}; transitions={'off_on','on_off'}; transitionStrings={'off{\rightarrow}on','on{\rightarrow}off'}; tfs=[1e3 1e3];
    disp(sprintf('nvars=(%s); taus=(%s);',sprintf('%03d ',nvars),sprintf('%03d ',taus)));

    % Get the fixed points.
    fp=zeros(length(nvars),3);
    for i=[1:length(nvars)]
        [p1 p2 p3]=self_regulating_gene_switch_fp(a0,a1,p0);
        fp(i,:)=[p1 p2 p3];
    end
    disp(sprintf('p1s=(%s); p2s=(%s); p3s=(%s);',sprintf('%4d ',round(reshape(fp(:,1),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,2),size(fp,1),1))),sprintf('%4d ',round(reshape(fp(:,3),size(fp,1),1)))));
    
    # Run a series of simulations to calculate the pdfs.
    a0=6.00; a1=260.00; p0=115;
    is=`seq -f "%g" 0 2`; nvars=(00.0 01.0 02.0 ); taus=(1e3 1e3 1e3 ); tau_recalcs=(1e-1 1e-1 1e-1);
    p1s=(   7    7    7 ); p2s=(  59   59   59 ); p3s=( 194  194  194 );
    replicates="1-1";
    for i in $is; do
        nvar=${nvars[i]};
        tau=${taus[i]}; tau_recalc=${tau_recalcs[i]};
        pi=${i}; p1=${p1s[i]}; p2=${p2s[pi]}; p3=${p3s[pi]};
                
        # Start the off state.
        writeInterval=1e0; maxTime=50;
        initialProtein=${p1}; maxProtein=${p2};
        filename="pdf_off_${a0}_${a1}_${p0}_${nvar}_${tau}.lm5";
        echo "${filename} with $p1 $p2 $p3 start $initialProtein";
        rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} maxProtein=${maxProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
        lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
        #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 5 8 0 erobert3;
    
        # Start the on state.
        writeInterval=1e0; maxTime=1e3;
        initialProtein=${p3}; minProtein=${p2};
        filename="pdf_on_${a0}_${a1}_${p0}_${nvar}_${tau}.lm5";
        echo "${filename} with $p1 $p2 $p3 start $initialProtein";
        rm -f data/lm/${filename} && lm_setp data/lm/${filename} 3 a0=${a0} a1=${a1} p0=${p0} nvar=${nvar} tau=${tau} tau_recalc=${tau_recalc} initialProtein=${initialProtein} minProtein=${minProtein} writeInterval=${writeInterval} maxTime=${maxTime} > /dev/null;
        lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 -gr 1/3 logs/${filename}.log eir 4 12 4 erobert3;
        #lm-submit data/lm/${filename} -m lm::cme::SelfRegulatingGeneSwitch -r ${replicates} -cr 1 logs/${filename}.log odin 5 8 0 erobert3;
    done;

    % Plot an individual trajectory.
    R=3; i=1; si=2;
    filename=sprintf('data/lm/pdf_%s_%0.2f_%0.2f_%d_%04.1f_1e3.lm5',states{si},a0,a1,p0,nvars(i));
    disp(filename);
    ts=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCountTimes',R)),[2,1]),'double');
    data=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
    samples=[1:1:length(ts)];
    subplot(2,1,1);
    plotstep(ts(samples),data(samples,1),'b');
    ax=axis; axis([ts(samples(1)) ts(samples(end)) 0 ax(4)]); xlabel('Time (1/d_1)'); ylabel('Protein Count');
    subplot(2,1,2);
    counts=data(1:end,1);
    upperC=max(counts)+100-mod(max(counts),100);
    binSize=1;
    [N,X]=hist(counts,[0:binSize:upperC]);
    D=N./(sum(N)*(X(2)-X(1)));
    plot(X,D);
    ax=axis; axis([0 upperC 0 ax(4)]); xlabel('Protein Count'); ylabel('Probability Density');
    
    % Calculate the pdfs.
    %pdfs=cell(length(nvars),length(states),2);
    Rs=[1:10000];
    for i=[1:3]
        for si=[1:length(states)]
            nvar=nvars(i); tau=taus(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1; 
            filename=sprintf('data/lm/pdf_%s_%0.2f_%0.2f_%d_%04.1f_1e3.lm5',states{si},a0,a1,p0,nvars(i));
            disp(sprintf('Loading %s',filename));
            counts=zeros(tfs(si)*length(Rs),1);
            countsUsed=0;
            for R=Rs
                if mod(R,1000) == 0, disp(sprintf('Replicate %d',R));, end
                data=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/SpeciesCounts',R)),[2,1]),'double');
                data=data(:,1);
                first=6;
                last=length(data)-1;
                if last < 999, disp(sprintf('Short run %d: %d',R,length(data)));, end
                counts((countsUsed+1):(countsUsed+1+last-first),1)=data(first:last,1);
                countsUsed=countsUsed+last-first+1;
            end
            [N,X]=hist(counts(1:countsUsed,1),[0:max(counts(1:countsUsed,1))]);
            pdfs{i,si,1}=X;
            pdfs{i,si,2}=[N./(sum(N)*(X(2)-X(1)))];
        end
    end

    % Save the data.
    save('data/matlab/pdfs.mat','pdfs');
    
    % Load the data.
    load('data/matlab/pdfs.mat','pdfs');
    
    % Plot the pdfs.
    rows=2; cols=1; plotIndex=1;
    colors=getplotcolors();
    for si=[1:length(states)]
        subplot(rows,cols,plotIndex);
        legendStrings=cell(length(nvars),1);
        for i=[1:length(nvars)]
            nvar=nvars(i); tau=taus(i); p1=round(fp(i,1)); p2=round(fp(i,2)); p3=round(fp(i,3)); p1i=p1+1; p2i=p2+1; p3i=p3+1;
            N=pdfs{i,si,1};
            X=pdfs{i,si,2};
            semilogy(N, X, 'Color', colors{mod(i-1,length(colors))+1});
            legendStrings{i}=sprintf('\\sigma^2=%0.2f',nvar);
            hold('on');
        end
        hold('off');
        if si==1, axis([0 p2 1e-8 1e0]); else, axis([p2 p3*2 1e-8 1e0]); end,
        xlabel('p'); ylabel('P(p)'); title(sprintf('PDF (state=%s,a_0=%0.2f,a_{1}=%0.2f,p_{0}=%0.2f,\\tau=%0.2e)',states{si},a0,a1,p0,tau)); legend(legendStrings,'Location','NorthEast');
        plotIndex=plotIndex+1;
    end


    #### ornstein_uhlenbeck_simulation ####
    
    % Generate an OU trajectory with constant dt steps.
    pvar=1000; tau=1e1; c=2*pvar/tau; dt=1e1; tf=1e4;
    t=[0:dt:tf]; x=zeros(length(t),1);
    mu=exp(-dt/tau);
    sigma=sqrt((c*tau/2)*(1-mu^2));
    for ti=[2:length(t)]
        x(ti)=x(ti-1)*mu + sigma*normrnd(0,1);
    end
    subplot(2,1,1);
    plot(t,x,'-');
    axis([0 tf -3*sqrt(pvar) 3*sqrt(pvar)]);
    subplot(2,1,2);
    [cr,ct]=xcorr(x,'coeff');
    cr=cr(find(ct==0):end);
    ct=(ct(find(ct==0):end)).*dt;
    s = fitoptions('Method','NonlinearLeastSquares', 'Lower',[1e-3], 'Upper',[1e3], 'Startpoint',[tau]);
    f = fittype('exp(-x/tau)','options',s,'coeff',{'tau'});
    [fo,gof]=fit(ct',cr,f);
    fitvalues=coeffvalues(fo);
    taufit=fitvalues(1);
    semilogx(ct,cr);
    hold('on');
    semilogx(ct, exp(-ct./taufit), 'r--');
    semilogx(ct, exp(-ct./tau), 'k:');
    hold('off');
    ax=axis; axis([0 tf 0 1e0]);
    disp(sprintf('Mean=%1.4e (0.0), Var=%0.4e (%0.4e), Autocorrelation time=%0.4e (%0.4e)',mean(x),var(x),c*tau/2,taufit,tau));

    % Generate an OU trajectory with exponentially distributed dt steps.
    pvar=10; tau=1e3; c=2*pvar/tau; dtmu=1e1; tf=1e5;
    et=[0]; ex=sqrt(pvar)*normrnd(0,1);
    while et(end) < tf
        dt=exprnd(dtmu);
        mu=exp(-dt/tau);
        sigma=sqrt((c*tau/2)*(1-mu^2));        
        et(end+1)=et(end)+dt;
        ex(end+1)=ex(end)*mu + sigma*normrnd(0,1);
    end
    subplot(2,1,1);
    plot(et,ex,'.');
    hline(0,'k');
    hline(3*sqrt(pvar),'k:');
    hline(-3*sqrt(pvar),'k:');
    ax=axis; axis([0 tf -4*sqrt(pvar) 4*sqrt(pvar)]);
    subplot(2,1,2);
    t=[0:dtmu:tf];
    [t,x]=event_to_ts(et',ex',t);
    [cr,ct]=xcorr(x,'coeff');
    cr=cr(find(ct==0):end);
    ct=(ct(find(ct==0):end)).*dtmu;
    s = fitoptions('Method','NonlinearLeastSquares', 'Lower',[1e-3], 'Upper',[1e3], 'Startpoint',[tau]);
    f = fittype('exp(-x/tau)','options',s,'coeff',{'tau'});
    [fo,gof]=fit(ct',cr,f);
    fitvalues=coeffvalues(fo);
    taufit=fitvalues(1);
    semilogx(ct,cr);
    hold('on');
    semilogx(ct, exp(-ct./taufit), 'r--');
    semilogx(ct, exp(-ct./tau), 'k:');
    hold('off');
    ax=axis; axis([0 tf 0 1e0]);
    disp(sprintf('Mean=%1.4e (0.0), Var=%0.4e (%0.4e), Autocorrelation time=%0.4e (%0.4e)',mean(x),var(x),c*tau/2,taufit,tau));

    % Generate an OU trajectory with exponentially distributed dt steps using variance instead of c.
    pvar=1; tau=1; dtmu=1e-1; tf=1e4;
    et=[0]; ex=sqrt(pvar)*normrnd(0,1);
    while et(end) < tf
        dt=exprnd(dtmu);
        mu=exp(-dt/tau);
        sigma=sqrt(pvar*(1-mu^2));        
        et(end+1)=et(end)+dt;
        ex(end+1)=ex(end)*mu + sigma*normrnd(0,1);
    end
    subplot(2,1,1);
    plot(et,ex,'.');
    hline(0,'k');
    hline(3*sqrt(pvar),'k:');
    hline(-3*sqrt(pvar),'k:');
    ax=axis; axis([0 tf -4*sqrt(pvar) 4*sqrt(pvar)]);
    subplot(2,1,2);
    t=[0:dtmu:tf];
    [t,x]=event_to_ts(et',ex',t);
    [cr,ct]=xcorr(x,'coeff');
    cr=cr(find(ct==0):end);
    ct=(ct(find(ct==0):end)).*dtmu;
    s = fitoptions('Method','NonlinearLeastSquares', 'Lower',[1e-3], 'Upper',[1e3], 'Startpoint',[tau]);
    f = fittype('exp(-x/tau)','options',s,'coeff',{'tau'});
    [fo,gof]=fit(ct',cr,f);
    fitvalues=coeffvalues(fo);
    taufit=fitvalues(1);
    semilogx(ct,cr);
    hold('on');
    semilogx(ct, exp(-ct./taufit), 'r--');
    semilogx(ct, exp(-ct./tau), 'k:');
    hold('off');
    ax=axis; axis([0 tf 0 1e0]);
    disp(sprintf('Mean=%1.4e (0.0), Var=%0.4e (%0.4e), Autocorrelation time=%0.4e (%0.4e)',mean(x),var(x),c*tau/2,taufit,tau));
    
    % Plot the distribution of changes.
    pvar=1; tau=1e0; dtmu=1e-3; tf=1e1;
    et=[0]; ex=sqrt(pvar)*normrnd(0,1);
    deltaX=[];
    while et(end) < tf
        dt=exprnd(dtmu);
        mu=exp(-dt/tau);
        sigma=sqrt(pvar*(1-mu^2));        
        et(end+1)=et(end)+dt;
        ex(end+1)=ex(end)*mu + sigma*normrnd(0,1);
        deltaX(end+1) = ex(end)-ex(end-1);
    end
    subplot(2,1,1);
    plot(et,ex,'.');
    hline(0,'k');
    hline(3*sqrt(pvar),'k:');
    hline(-3*sqrt(pvar),'k:');
    ax=axis; axis([0 tf -4*sqrt(pvar) 4*sqrt(pvar)]);
    subplot(2,1,2);
    hist(deltaX,100)
    
    % Plot the expected change as a function of dt step size.
    pvar=0.5; tau=1e0; c=2*pvar/tau; dt=[1e-4:1e-3:10*tau];
    x0=2.0;
    m=x0*exp(-dt./tau);
    v=(c*tau/2).*(1-exp(-2.*dt./tau));
    semilogx(dt,m./x0);
    hold('on');
    plot(dt,(m+sqrt(v))./x0,'b:');
    plot(dt,(m-sqrt(v))./x0,'b:');
    plot(dt,(m+3*sqrt(v))./x0,'r:');
    plot(dt,(m-3*sqrt(v))./x0,'r:');
    hold('off');
    
    % Transform a unit normal rng to a rng with a different variance.
    sigma=10;
    [N,X]=hist(normrnd(0,sigma,1000000,1),100);
    D=N./(sum(N)*(X(2)-X(1)));
    plot(X,D,'b');
    hold('on');
    [N,X]=hist(sigma.*normrnd(0,1,1000000,1),100);
    D=N./(sum(N)*(X(2)-X(1)));
    plot(X,D,'r');
    hold('off');
    
    
    
        
    #### srgs2_extrinsic_noise ####

    # Create reaction model from the sbml file.
    rm -f srgs2.lm && lm_sbml_import srgs2.lm srgs2.sbml
    
    # Modify the birth reaction type.
    lm_setrm srgs2.lm "ReactionTypes(0)=6" "DependencyMatrix(0,0)=[1]" "ReactionRateConstants(0,0:2)=[0.0 0.0 0.0]"
    
    % Plot some theoretical correlation noise times.
    x0=0.916; N=5000;
    nvar=[0:1e6];
    deltaS0=((N*((1-x0)^2))/2);
    lambda=log(1000);
    nnvar=(nvar./N);
    ptau1 = exp(deltaS0./((1+nnvar).^2));
    ptau2 = exp(deltaS0.*(1 - 2.*nnvar));
    ptau3 = exp((deltaS0)./(nnvar.^2));
    ptau4 = exp(lambda+(deltaS0-lambda)./((1+(nnvar)).^2));
    ptau5 = exp(deltaS0 - (2.*(deltaS0-lambda).*nnvar));
    ptau6 = exp(lambda+(deltaS0-lambda)./(nnvar.^2));
    subplot(2,2,1);
    loglog(nvar, ptau1);
    hold('on');
    loglog(nvar, ptau2, ':');
    loglog(nvar, ptau3, ':');
    hold('off');
    axis([0 nvar(end) 1e0 1e8]); ylabel('\tau');
    subplot(2,2,2);
    loglog(nvar, log(ptau1));
    hold('on');
    loglog(nvar, log(ptau2), ':');
    loglog(nvar, log(ptau3), ':');
    hold('off');
    axis([0 nvar(end) 1e0 1e2]); ylabel('ln \tau');
    subplot(2,2,3);
    loglog(nvar, ptau4);
    hold('on');
    loglog(nvar, ptau5, ':');
    loglog(nvar, ptau6, ':');
    hold('off');
    axis([0 nvar(end) 1e0 1e8]); ylabel('\tau');
    subplot(2,2,4);
    loglog(nvar, log(ptau4));
    hold('on');
    loglog(nvar, log(ptau5), ':');
    loglog(nvar, log(ptau6), ':');
    hold('off');
    axis([0 nvar(end) 1e0 1e2]); ylabel('ln \tau');
    
    % Plot the switching time as a function of n/a1.
    x0=0.93; N=[5000-4*166:5000+4*166];
    ptau=exp(((N.*((1-x0)^2))./2));
    subplot(2,2,1);
    semilogy(N, ptau);
    ax=axis; axis([ax(1) ax(2) 1e0 1e7]);
    
    % Setup some parameters.
    states={'off','on'}; transitions={'on_off'}; transitionStrings={'on{\rightarrow}off'};
    x0s=[0.90:0.005:0.96 ones(1,17).*0.95 0.96 0.93 0.913]; Ns=[ones(1,13).*5000 3000:500:11000 20000 6000 5000];
    a0s=Ns./100; n0s=round(Ns.*x0s); a1s=Ns;
    disp(sprintf('#    %s        %s        %s',sprintf('%3d ',[0:length(a0s)-1]),sprintf('%5d ',[0:length(n0s)-1]),sprintf('%5d ',[0:length(a1s)-1])));
    disp(sprintf('a0s=(%s); n0s=(%s); a1s=(%s);',sprintf('%3d ',a0s),sprintf('%5d ',n0s),sprintf('%5d ',a1s)));
    nvars=[0];
    ntaus=[0];
    for i=[1000.0 100.0 10.0 1e-1 5e-2 1e-2]
        for j=[(1/3)^2 (5/3)^2 (10/3)^2 (25/3)^2 (50/3)^2 (75/3)^2 (100/3)^2 (125/3)^2 (150/3)^2 (175/3)^2 (225/3)^2 (250/3)^2 100^2 125^2 (500/3)^2 200^2 500^2 1000^2]
            ntaus=[ntaus i];
            nvars=[nvars j];
        end
    end
    nreactions=zeros(size(nvars));
    disp(sprintf('#           %s          %s          %s',sprintf('%3d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nvars)-1]),sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('nreactions=(%s); nvars=(%s); ntaus=(%s);',sprintf('%3d ',nreactions),sprintf('%8.2e ',nvars),sprintf('%8.2e ',ntaus)));
    ptaus=zeros(length(Ns),length(nreactions));
    
    % Calculate the predicted taus for no noise.
    ptaus(:,1) = exp((Ns.*((1-x0s).^2))./2);
    
    % Calculate the predicted taus for long correlation time.
    for i=[2:55]
        lambda=log(ntaus(i));
        ptaus(:,i) = exp(lambda+(((Ns.*((1-x0s).^2))./2)-lambda)./((1+((nvars(i)./Ns))).^2));
    end

    % Calculate the predicted taus for short correlation time
    for i=[56:109]
        ptaus(:,i) = exp(((Ns.*((1-x0s).^2))./2)./(1+(nvars(i)./Ns).*ntaus(i)));
    end

    % Plot the predicted switching times.
    subplot(3,4,1);
    semilogy(x0s(1:13), ptaus(1:13));
    subplot(3,4,2);
    semilogy(Ns(14:28), ptaus(14:28));
    subplot(3,4,3);
    semilogy(sqrt(nvars(1:13)), ptaus(5,1:13), 'ob-');
    subplot(3,4,4);
    semilogy(nvars(1:13), ptaus(5,1:13), 'ob-');
    subplot(3,4,5);
    semilogy(sqrt(nvars(26:37)), ptaus(7,26:37), 'ob-');
    ax=axis; axis([ax(1) ax(2) 1e3 1e7]);
    subplot(3,4,6);
    semilogy(nvars(26:37), ptaus(7,26:37), 'ob-');
    ax=axis; axis([ax(1) ax(2) 1e3 1e7]);
    subplot(3,4,7);
    semilogy(sqrt(nvars(38:49)), ptaus(7,38:49), 'ob-');
    ax=axis; axis([ax(1) ax(2) 1e3 1e7]);
    subplot(3,4,8);
    semilogy(nvars(38:49), ptaus(7,38:49), 'ob-');
    ax=axis; axis([ax(1) ax(2) 1e3 1e7]);
    subplot(3,4,9);
    semilogy(sqrt(nvars(50:61)), ptaus(7,50:61), 'ob-');
    ax=axis; axis([ax(1) ax(2) 1e3 1e7]);
    subplot(3,4,10);
    semilogy(nvars(50:61), ptaus(7,50:61), 'ob-');
    ax=axis; axis([ax(1) ax(2) 1e3 1e7]);
    subplot(3,4,11);
    newplot;
    subplot(3,4,12);
    newplot;
    
    # Run a series of simulations to calculate the pdfs.
    #      0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30 
    a0s=( 50  50  50  50  50  50  50  50  50  50  50  50  50  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100 105 110 200 ); n0s=( 4500  4525  4550  4575  4600  4625  4650  4675  4700  4725  4750  4775  4800  2850  3325  3800  4275  4750  5225  5700  6175  6650  7125  7600  8075  8550  9025  9500  9975 10450 19200 ); a1s=( 5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  3000  3500  4000  4500  5000  5500  6000  6500  7000  7500  8000  8500  9000  9500 10000 10500 11000 20000 );
    #            0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60 
    nreactions=( 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ); nvars=(0.00e+00 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 ); ntaus=(0.00e+00 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 );
    maxTime=1e4 writeInterval=1e0 noiseRecalcFraction=1e-3 parameterWriteInterval=1e0
    replicates="1-1000";
    is=`seq -f "%g" 4 4`;
    js=`seq -f "%g" 0 7`;
    for i in $is; do
        for j in $js; do
            n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            # Start in the on state.
            filename="pdf_on_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            echo "${filename}";
            cp srgs2.lm data/lm/${filename};
            lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${n0}" maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
            lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 4 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 10 8 0 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log ge1,ge2 15 2 0 erobert3;
        done;
    done;

    # Calculate the pdfs on the cluster.
    #      0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30 
    a0s=( 50  50  50  50  50  50  50  50  50  50  50  50  50  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100 105 110 200 ); n0s=( 4500  4525  4550  4575  4600  4625  4650  4675  4700  4725  4750  4775  4800  2850  3325  3800  4275  4750  5225  5700  6175  6650  7125  7600  8075  8550  9025  9500  9975 10450 19200 ); a1s=( 5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  3000  3500  4000  4500  5000  5500  6000  6500  7000  7500  8000  8500  9000  9500 10000 10500 11000 20000 );
    #            0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60 
    nreactions=( 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ); nvars=(0.00e+00 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 6.94e+03 2.78e+04 ); ntaus=(0.00e+00 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 );
    is=`seq -f "%g" 4 4`;
    js=`seq -f "%g" 0 7`;
    R=1000; ts=10000;
    for i in $is; do
        for j in $js; do
            n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};

            k=0;
            filename="pdf_off_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            if [ -e "data/lm/${filename}" ]; then
                echo "Processing $filename"
                matlab-submit calc_pdf "'data/matlab/pdf.dat'" "'data/lm/${filename}'" $((1)) ${R} ${ts} $((i+1)) $((j+1)) $((k+1)) "logs/calc_pdf_${filename}.log" sif 1 erobert3;
            fi
            
            k=1;
            filename="pdf_on_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            if [ -e "data/lm/${filename}" ]; then
                echo "Processing $filename"
                matlab-submit calc_pdf "'data/matlab/pdf.dat'" "'data/lm/${filename}'" $((1)) ${R} ${ts} $((i+1)) $((j+1)) $((k+1)) "logs/calc_pdf_${filename}.log" sif 1 erobert3;
            fi
        done;
    done;
    
    # Run a series of simulations to calculate the switching times.
    #      0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32 
    a0s=( 50  50  50  50  50  50  50  50  50  50  50  50  50  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100 105 110 200  60  50 ); n0s=( 4500  4525  4550  4575  4600  4625  4650  4675  4700  4725  4750  4775  4800  2850  3325  3800  4275  4750  5225  5700  6175  6650  7125  7600  8075  8550  9025  9500  9975 10450 19200  5580  4565 ); a1s=( 5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  3000  3500  4000  4500  5000  5500  6000  6500  7000  7500  8000  8500  9000  9500 10000 10500 11000 20000  6000  5000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100      101      102      103      104      105      106      107      108                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100      101      102      103      104      105      106      107      108 
    nreactions=(  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 ); nvars=(0.00e+00 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 ); ntaus=(0.00e+00 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 );
    maxTime=1e12 writeInterval=1e8 noiseRecalcFraction=1e-3 parameterWriteInterval=1e8
    replicates="1-250";
    is=`seq -f "%g" 32 32`;
    js=`seq -f "%g" 18 -1 0`;
    for i in $is; do
        for j in $js; do
            n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            # Start in the on state.
            filename="fpt_on_off_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            echo "${filename}";
            cp srgs2.lm data/lm/${filename};
            lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${a0}" maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
            lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 3 8 0 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log ge1,ge2 50 2 0 erobert3;
        done;
    done;
    
    # Calculate the fpts on the cluster.
    #      0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32             0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32 
    a0s=( 50  50  50  50  50  50  50  50  50  50  50  50  50  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100 105 110 200  60  50 ); n0s=( 4500  4525  4550  4575  4600  4625  4650  4675  4700  4725  4750  4775  4800  2850  3325  3800  4275  4750  5225  5700  6175  6650  7125  7600  8075  8550  9025  9500  9975 10450 19200  5580  4565 ); a1s=( 5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  5000  3000  3500  4000  4500  5000  5500  6000  6500  7000  7500  8000  8500  9000  9500 10000 10500 11000 20000  6000  5000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100      101      102      103      104      105      106      107      108                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100      101      102      103      104      105      106      107      108 
    nreactions=(  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 ); nvars=(0.00e+00 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 1.11e-01 2.78e+00 1.11e+01 6.94e+01 2.78e+02 6.25e+02 1.11e+03 1.74e+03 2.50e+03 3.40e+03 5.62e+03 6.94e+03 1.00e+04 1.56e+04 2.78e+04 4.00e+04 2.50e+05 1.00e+06 ); ntaus=(0.00e+00 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 );
    transitions=("on_off");
    is=`seq -f "%g" 0 32`;
    js=`seq -f "%g" 0 108`;
    ks="0";
    tf=1e12;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
                nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
                transition=${transitions[k]}
                filename="fpt_${transition}_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
                if [ -e "data/lm/${filename}" ]; then
                    echo "Processing $filename"
                    matlab-submit calc_mfpt "'data/matlab/mfpt.dat'" "'data/lm/${filename}'" 1 ${tf} ${a0} ${n0} ${a1} $((i+1)) $((j+1)) $((k+1)) "logs/calc_mfpt_${filename}.log" sif 1 erobert3;
                fi
            done;
        done;
    done;    
    
    % Load the data.
    pdfs=cellload('data/matlab/pdf.dat',30,8,2);
    mfpt=cellload('data/matlab/mfpt.dat',33,109,1);
    
    switchingNoise=cell(size(Ns,2),size(nvars,2),1);
    for i=[7]
        for j=[2:25]
            k=1;
            x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
            nvar=nvars(j); ntau=ntaus(j);
            filename=sprintf('data/lm/fpt_%s_%d_%d_%d_0_%8.2e_%8.2e.lm',transitions{k},n0,a0,a1,nvar,ntau);
            disp(sprintf('Loading %s',filename));
            data=[];
            for R=[1:200]
                tmp=cast(permute(h5read(filename,sprintf('/Simulations/%07d/ParameterValues/0000000',R)),[2,1]),'double');
                data(end+1)=tmp(end,2);
            end
            switchingNoise{i,j,k} = data;
        end
    end

    % Plot the pdfs.
    rows=2; cols=4; plotIndex=1;
    for i=[5]
        for j=[1:8]
            for k=[2]
                subplot(rows,cols,plotIndex);
                if size(pdfs{i,j,k},1) > 0
                    N=pdfs{i,j,k}(1,:);
                    X=pdfs{i,j,k}(2,:);
                    semilogy(N, X);
                    ax=axis; axis([4600 5500 1e-8 1e-1]); xlabel('n'); ylabel('P(n)'); title(sprintf('PDF'));
                else
                    newplot;
                end
                plotIndex=plotIndex+1;
                if plotIndex > rows*cols
                    plotIndex=1;
                    pause;
                end
            end
        end
    end
    
    % Plot the distribution of first passage times.
    i=33; j=16; k=1; ni=1; hi=1; Rs=[1:250]; tf=1e12;
    n0=n0s(i); a0=a0s(i); a1=a1s(i); p1i=n0+1; p2i=a0+1; p3i=a1+1;
    nvar=nvars(j); ntau=ntaus(j);
    filename=sprintf('data/lm/fpt_%s_%d_%d_%d_0_%8.2e_%8.2e.lm',transitions{k},n0,a0,a1,nvar,ntau);
    disp(sprintf('Loading %s',filename));
    fpts=ones(p3i,length(Rs)).*tf;
    for ri=[1:length(Rs)]
        R=Rs(ri);
        counts=cast(permute(h5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
        minCount=counts(1); maxCount=counts(end);
        fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
        bi=minCount+1; ei=maxCount+1;
        fpts(bi:ei,ri)=fpt;
    end
    [N,X]=hist(fpts(p2i,:),20);
    D=N./(sum(N)*(X(2)-X(1)));
    bar(X,D);
    m1=mean(fpts(p2i,:));
    [m2,c2]=expfit(fpts(p2i,:));
    hold('on');
    plot(X,exppdf(X,m1),'r');
    plot(X,exppdf(X,m2),'g');
    plot(X,exppdf(X,c2(1)),'g:');
    plot(X,exppdf(X,c2(2)),'g:');
    hold('off');
    legend('Data',sprintf('Mean: %0.04e',m1));%,sprintf('Fit: %0.04e',m2));

    % Plot the mfpts.
    rows=3; cols=3; plotIndex=1; tf=1e12;
    for i=[33]
        for j=[11:19]
            for k=[1]
                n0=n0s(i); a0=a0s(i); a1=a1s(i);
                n0i=n0+1; a0i=a0+1; a1i=a1+1;
                subplot(rows,cols,plotIndex);
                if size(mfpt{i,j,k},1) > 0
                    X=mfpt{i,j,k}(1,:);
                    semilogy(X, mfpt{i,j,k}(5,:), 'b');
                    hold('on');
                    loglog(X, mfpt{i,j,k}(3,:), 'b:');
                    loglog(X, mfpt{i,j,k}(4,:), 'b:');
                    loglog(X, mfpt{i,j,k}(5,:), 'g');
                    loglog(X, mfpt{i,j,k}(6,:), 'g:');
                    loglog(X, mfpt{i,j,k}(7,:), 'g:');
                    hold('off');
                    ax=axis; axis([0 10000 1e-2 tf*10]); ylabel('Time (s)'); title(sprintf('MFPT (%s,fpt_{n0}=%0.2e)',transitionStrings{k},mfpt{i,j,k}(5,n0i)));
                    vline(a0);
                    vline(n0);
                    vline(a1);                
                    %if fps{i,j,si}(1) > 0, vline(fps{i,j,si}(1),'g',sprintf('%d',fps{i,j,si}(1)));, end
                    %if fps{i,j,si}(2) > 0, vline(fps{i,j,si}(2),'r',sprintf('%d',fps{i,j,si}(2)));, end
                    %if fps{i,j,si}(3) > 0, vline(fps{i,j,si}(3),'g',sprintf('%d',fps{i,j,si}(3)));, end
                end
                plotIndex=plotIndex+1;
            end
        end
    end

    % Plot the mfpt as a function of x0.
    rows=1; cols=2; plotIndex=1;
    k=1;
    for j=[1]
        subplot(rows,cols,plotIndex);
        xs=[];
        ys=[];
        yfits=[];
        yl=[];
        yu=[];
        prefactors=[];
        prefactorX0s=[];
        is=[1:13]
        for i=is
            x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
            n0i=n0+1; a0i=a0+1; a1i=a1+1;
            if size(mfpt{i,j,k},1) > 0
                xs(end+1)=x0;
                ys(end+1)=mfpt{i,j,k}(2,n0i);
                yfits(end+1)=mfpt{i,j,k}(5,n0i);
                yl(end+1)=mfpt{i,j,k}(6,n0i);
                yu(end+1)=mfpt{i,j,k}(7,n0i);
                prefactors(end+1)=(yfits(end)./ptaus(i,j));
                prefactorX0s(end+1)=x0;
            end
        end
        semilogy(xs,yfits,'ro');
        hold('on');
        semilogy(x0s(is),ptaus(is,j),'m--');
        semilogy(x0s(is),prefactors(1).*ptaus(is,j),'b-');
        ploterrorbar(xs,yl,yu,'r','-');
        hold('off');
        ax=axis; axis([x0s(is(1))-0.01 x0s(is(end))+0.01 ax(3) ax(4)]); xlabel('x_0'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,a_0=%d)',N,a0)); legend('Simulation', 'Theory', sprintf('Theory \\times %0.4f',prefactors(1)), 'Location','Northeast');
        plotIndex=plotIndex+1;
        subplot(rows,cols,plotIndex);
        plot(prefactorX0s,prefactors);
        ax=axis; axis([x0s(is(1))-0.01 x0s(is(end))+0.01 ax(3) ax(4)]); xlabel('x_0'); ylabel(sprintf('Prefactor'));
        plotIndex=plotIndex+1;
        %disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
        %disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
        %disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
        %disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    end

    % Plot the mfpt as a function of N.
    rows=1; cols=2; plotIndex=1;
    for k=[1]
        subplot(rows,cols,plotIndex);
        xs=[];
        ys=[];
        yfits=[];
        yl=[];
        yu=[];
        prefactors=[];
        prefactorNs=[];
        is=[14:30]
        for i=is
            for j=[1]
                x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
                n0i=n0+1; a0i=a0+1; a1i=a1+1;
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=N;
                    ys(end+1)=mfpt{i,j,k}(2,n0i);
                    yfits(end+1)=mfpt{i,j,k}(5,n0i);
                    yl(end+1)=mfpt{i,j,k}(6,n0i);
                    yu(end+1)=mfpt{i,j,k}(7,n0i);
                    prefactors(end+1)=(yfits(end)./ptaus(i,j))
                    prefactorNs(end+1)=N;
                end
            end
        end
        semilogy(xs,yfits,'ro');
        hold('on');
        semilogy(Ns(is),ptaus(is,j),'m--');
        semilogy(Ns(is),prefactors(end).*ptaus(is,j),'b-');
        ploterrorbar(xs,yl,yu,'r','-');
        hold('off');
        ax=axis; axis([Ns(is(1))-0.01 Ns(is(end))+0.01 ax(3) ax(4)]); xlabel('N'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (x_0=%0.2f,a_0=N/100)',x0)); legend('Simulation', 'Theory', sprintf('Theory \\times %0.4f',prefactors(end)), 'Location','Southeast');
        plotIndex=plotIndex+1;
        subplot(rows,cols,plotIndex);
        plot(prefactorNs,prefactors);
        ax=axis; axis([Ns(is(1))-0.01 Ns(is(end))+0.01 ax(3) ax(4)]); xlabel('N'); ylabel(sprintf('Prefactor'))
        plotIndex=plotIndex+1;
        %disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
        %disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
        %disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
        %disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    end
    
    % Plot the mfpt as a function of the noise variance with each jset on the same plot.
    rows=3; cols=2; plotIndex=1; jsets={[1 2:19] [1 20:37] [1 38:55] [1 56:73] [1 74:91] [1 92:109]};
    colors=getplotcolors();
    symbols={'o','x','v','*','^'};
    k=1;
    for i=[7 32 33]
        legendHandles=[];
        legendStrings=cell(0,1);
        for jset=[1 2 3]
            xs=[];
            ys=[];
            yfits=[];
            yl=[];
            yu=[];
            %prefactors=[];
            %prefactorX0s=[];
            js=jsets{jset};
            for j=js
                x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
                n0i=n0+1; a0i=a0+1; a1i=a1+1;
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=nvar;
                    ys(end+1)=mfpt{i,j,k}(2,n0i);
                    yfits(end+1)=mfpt{i,j,k}(5,n0i);
                    yl(end+1)=mfpt{i,j,k}(6,n0i);
                    yu(end+1)=mfpt{i,j,k}(7,n0i);
                    %prefactors(end+1)=(yfits(end)./ptaus(i,j));
                    %prefactorX0s(end+1)=x0;
                end
            end
            if length(xs) > 0
                subplot(rows,cols,plotIndex);
                legendHandles(end+1,1)=semilogy(sqrt(xs),yfits,symbols{jset},'Color',colors{mod(jset-1,length(colors))+1});
                legendStrings{end+1}=sprintf('\\tau_{noise}=%8.2e',ntau);
                hold('on');
                legendHandles(end+1,1)=semilogy(sqrt(nvars(js)),ptaus(i,js),'--','Color',colors{mod(jset-1,length(colors))+1});
                legendStrings{end+1}='Theory';
                if jset==1, ploterrorbar(sqrt(xs),yl,yu,'r','-');, end
                subplot(rows,cols,plotIndex+1);
                loglog(sqrt(xs),yfits,symbols{jset},'Color',colors{mod(jset-1,length(colors))+1});
                hold('on');
                loglog(sqrt(nvars(js)),ptaus(i,js),'--','Color',colors{mod(jset-1,length(colors))+1});
                if jset==1, ploterrorbar(sqrt(xs),yl,yu,'r','-');, end
                disp(sprintf('N=%d,x_0=%0.3f,a_0=%d,\\tau_noise=%8.2e)',N,x0,a0,ntau));
                disp(sprintf('\\sigma^2_noise =(%s);',sprintf('%8.3e ',xs)));
                disp(sprintf('ln(tau_on_off) =(%s);',sprintf('%8.3e ',log(yfits))));
            end
        end
        subplot(rows,cols,plotIndex);
        hold('off');
        ax=axis; axis([sqrt(nvars(js(1)))-0.01 200 1e0 1e8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0)); legend(legendHandles(:,1), legendStrings, 'Location','Northeast');
        subplot(rows,cols,plotIndex+1);
        hold('off');
        ax=axis; axis([sqrt(nvars(js(1)))-0.01 200 1e0 1e8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0));
        plotIndex=plotIndex+2;
    end

    % Plot the mfpt as a function of the noise variance with each jset on a different plot.
    rows=3; cols=2; plotIndex=1; jsets={[1 2:19] [1 20:37] [1 38:55] [1 56:73] [1 74:91] [1 92:109]};
    k=1;
    for i=[7]
        for jset=[1:6]
            js=jsets{jset};
            xs=[];
            ys=[];
            yfits=[];
            yl=[];
            yu=[];
            prefactor=0.0;
            for j=js
                x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
                n0i=n0+1; a0i=a0+1; a1i=a1+1;
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=nvar;
                    ys(end+1)=mfpt{i,j,k}(2,n0i);
                    yfits(end+1)=mfpt{i,j,k}(5,n0i);
                    yl(end+1)=mfpt{i,j,k}(6,n0i);
                    yu(end+1)=mfpt{i,j,k}(7,n0i);
                    if prefactor==0.0, prefactor=mfpt{i,j,k}(5,n0i)/ptaus(i,j);, end
                end
            end
            subplot(rows,cols,plotIndex);
            semilogy(sqrt(xs),yfits,'ro');
            hold('on');
            semilogy(sqrt(nvars(js)),ptaus(i,js),'m--');
            semilogy(sqrt(nvars(js)),ptaus(i,js).*prefactor,'b-');
            ploterrorbar(sqrt(xs),yl,yu,'r','-');
            hold('off');
            ax=axis; axis([sqrt(nvars(js(1))) 200 1e3 1e6]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.2f,a_0=%d,\\tau_{noise}=%8.2e)',N,x0,a0,ntau)); legend('Simulation', 'Theory', sprintf('Theory \\times %0.4f',prefactor), 'Location','Southwest');
            plotIndex=plotIndex+1;
            
            subplot(rows,cols,plotIndex);
            loglog(sqrt(xs),(yfits),'ro');
            hold('on');
            semilogy(sqrt(nvars(js)),(ptaus(i,js)),'m--');
            semilogy(sqrt(nvars(js)),(ptaus(i,js)).*prefactor,'b-');
            ploterrorbar(sqrt(xs),(yl),(yu),'r','-');
            hold('off');
            ax=axis; axis([sqrt(nvars(js(1))) 200 1e3 1e6]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.2f,a_0=%d,\\tau_{noise}=%8.2e)',N,x0,a0,ntau)); legend('Simulation', 'Theory', sprintf('Theory \\times %0.4f',prefactor), 'Location','Southwest');
            plotIndex=plotIndex+1;
            disp(sprintf('N=%d,x_0=%0.2f,a_0=%d,\\tau_noise=%8.2e)',N,x0,a0,ntau));
            disp(sprintf('\\sigma^2_noise =(%s);',sprintf('%8.3e ',xs)));
            disp(sprintf('ln(tau_on_off) =(%s);',sprintf('%8.3e ',log(yfits))));
        end
    end
    
    % Plot the correlation time and variance of a parameter during a simulation.
    rows=3; cols=4; plotIndex=1;
    i=5; js=[4:8]; k=2; Rs=[10];
    for j=js
        for R=Rs
            x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
            n0i=n0+1; a0i=a0+1; a1i=a1+1;
            nvar=nvars(j); ntau=ntaus(j);
            dt=1.0;
            filename=sprintf('data/lm/pdf_%s_%d_%d_%d_0_%8.2e_%8.2e.lm',states{k},n0,a0,a1,nvar,ntau);
            disp(sprintf('Loading %s',filename));
            data=cast(permute(h5read(filename,sprintf('/Simulations/%07d/ParameterValues/0000000',R)),[2,1]),'double');
            subplot(rows,cols,plotIndex);
            plot(data(:,1),a1+data(:,2),'-');
            hold('on');
            plot([data(1,1) data(end,1)], [1 1].*mean(a1+data(:,2))-sqrt(var(data(:,2))), 'k--');
            plot([data(1,1) data(end,1)], [1 1].*mean(a1+data(:,2))+sqrt(var(data(:,2))), 'k--');
            hold('off');
            axis([data(1,1) data(end,1) mean(a1+data(:,2))-4*sqrt(var(data(:,2))) mean(a1+data(:,2))+4*sqrt(var(data(:,2)))]); title(sprintf('Strength (R=%d,N=%d,x_0=%0.2f,a_0=%d',R,N,x0,a0)); legend(sprintf('\\mu %d (%d)',round(mean(a1+data(:,2))),a1), sprintf('\\sigma^2 %8.2e (%8.2e)',var(data(:,2)),nvar), 'Location','Northeast');
            plotIndex=plotIndex+1;
            subplot(rows,cols,plotIndex);
            [cr,ct]=xcorr(data(:,2),'coeff');
            cr=cr(find(ct==0):end);
            ct=(ct(find(ct==0):end)).*dt;
            s = fitoptions('Method','NonlinearLeastSquares', 'Lower',[1e-3], 'Upper',[1e3], 'Startpoint',[ntau]);
            f = fittype('exp(-x/tau)','options',s,'coeff',{'tau'});
            [fo,gof]=fit(ct',cr,f);
            fitvalues=coeffvalues(fo);
            taufit=fitvalues(1);
            semilogx(ct,cr);
            hold('on');
            semilogx(ct, exp(-ct./taufit), 'r--');
            semilogx(ct, exp(-ct./ntau), 'k:');
            hold('off');
            ax=axis; axis([0 data(end,1) 0 1e0]);
            title(sprintf('Correlation (R=%d,N=%d,x_0=%0.2f,a_0=%d',R,N,x0,a0)); legend('Cross-correlation', sprintf('Fit (%8.2e)',taufit), sprintf('Exp (%8.2e)',ntau), 'Location','Northeast');
            plotIndex=plotIndex+1;
        end
    end
    
    % Plot the distribution of noise values when switching occurs.
    rows=4; cols=6; plotIndex=1; k=1;
    for i=[7]
        for j=[2:25]
            subplot(rows,cols,plotIndex);
            hist(switchingNoise{i,j,k},25);
            vline(mean(switchingNoise{i,j,k}), 'r', '-');
            nsigma=sqrt(nvars(j));
            axis([-4*nsigma 4*nsigma 0 25]); xlabel('\xi_0\cdotN'); ylabel('Count'); title(sprintf('\\tau=%8.2e,\\sigma=%8.2e,\\xi_0=%0.3f',ntaus(j),nsigma,mean(switchingNoise{i,j,k})/N));
            plotIndex=plotIndex+1;
        end
    end
    
    % Plot the noise at switching versus the variance.
    rows=1; cols=2; plotIndex=1; k=1; jsets={[2:13] [14:25]};
    for i=[7]
        x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
        for jset=[1 2]
            xs=[];
            ys=[];
            for j=jsets{jset}
                xs(end+1)=nvars(j);
                ys(end+1)=mean(switchingNoise{i,j,k})/N;
            end
            subplot(rows,cols,plotIndex);
            plot(sqrt(xs),ys,'ro');
            hold('on');
            plot(sqrt(xs),-(((1-x0).*(xs./N))./(1+(xs./N))));
            hold('off');
            plotIndex=plotIndex+1;
            axis([0 200 -0.07 0]); xlabel('\sigma_{noise}'); ylabel('\xi_0'); title(sprintf('\\tau=%8.2e',ntaus(j))); legend('Simulation', 'Theory', 'Location','Northeast');
        end
    end
    
    % Plot the predicted switching time based on the switching point.
    rows=1; cols=2; plotIndex=1; k=1; jsets={[2:13] [14:25]};
    for i=[7]
        x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
        n0i=n0+1; a0i=a0+1; a1i=a1+1;
        for jset=[1 2]
            xs=[];
            ys=[];
            ys2=[];
            ys3=[];
            for j=jsets{jset}
                xs(end+1)=nvars(j);
                xi0=mean(switchingNoise{i,j,k})/N;
                ys(end+1)=exp((N/2)*((1-x0+xi0)^2));
                ys2(end+1)=exp(sum((N/2).*((1-x0+(switchingNoise{i,j,k}/N)).^2))/length(switchingNoise{i,j,k}));
                ys3(end+1)=mfpt{i,j,k}(2,n0i);
            end
            subplot(rows,cols,plotIndex);
            loglog(sqrt(xs),ys3,'ro');
            hold('on');
            semilogy(sqrt(xs),ys,'rx');
            semilogy(sqrt(xs),ptaus(i,jsets{jset}));
            hold('off');
            plotIndex=plotIndex+1;
            axis([0 200 1e0 1e6]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('\\tau=%8.2e',ntaus(j))); legend('Simulation', 'Theory with Sim \xi_0', 'Theory', 'Location','Southwest');
        end
    end
    
    
                n0i=n0+1; a0i=a0+1; a1i=a1+1;
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=nvar;
                    
    
    
        


    #### srgs2_extrinsic_noise_hires ####

    # Create reaction model from the sbml file.
    rm -f srgs2.lm && lm_sbml_import srgs2.lm srgs2.sbml
    
    # Modify the birth reaction type.
    lm_setrm srgs2.lm "ReactionTypes(0)=6" "DependencyMatrix(0,0)=[1]" "ReactionRateConstants(0,0:2)=[0.0 0.0 0.0]"
    
    % Setup some parameters.
    states={'off','on'}; transitions={'on_off'}; transitionStrings={'on{\rightarrow}off'};
    x0s=[0.913 0.915 0.94 0.96 0.93]; Ns=[5000 5000 10000 20000 5000];
    a0s=Ns./100; n0s=round(Ns.*x0s); a1s=Ns;
    disp(sprintf('#    %s        %s        %s',sprintf('%3d ',[0:length(a0s)-1]),sprintf('%5d ',[0:length(n0s)-1]),sprintf('%5d ',[0:length(a1s)-1])));
    disp(sprintf('a0s=(%s); n0s=(%s); a1s=(%s);',sprintf('%3d ',a0s),sprintf('%5d ',n0s),sprintf('%5d ',a1s)));
    nvars=[0];
    ntaus=[0];
    for i=[1000.0 100.0 10.0 1e-1 5e-2 1e-2]
        for j=(10.^[0.1:0.1:3]).^2
            ntaus=[ntaus i];
            nvars=[nvars j];
        end
    end
    nreactions=zeros(size(nvars));
    disp(sprintf('#           %s          %s          %s',sprintf('%3d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nvars)-1]),sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('nreactions=(%s); nvars=(%s); ntaus=(%s);',sprintf('%3d ',nreactions),sprintf('%8.2e ',nvars),sprintf('%8.2e ',ntaus)));
    ptaus=zeros(length(Ns),length(nreactions));
    
    prefactor=0.7386; %mfpt{2,1,1}(5,n0i)/ptaus(2,1)
    
    % Calculate the predicted taus for no noise.
    ptaus(:,1) = prefactor.*exp((Ns.*((1-x0s).^2))./2);
    
    % Calculate the predicted taus for long correlation time.
    for i=[2:91]
        deltaS0=log(prefactor.*exp(((Ns.*((1-x0s).^2))./2)));
        lambda=log(ntaus(i));
        ptaus(:,i) = exp(lambda+(deltaS0-lambda)./((1+((nvars(i)./Ns))).^2));
        ptaus2(:,i) = exp(deltaS0 - (2.*(deltaS0-lambda).*(nvars(i)./Ns)));
        ptaus3(:,i) = exp(lambda+(deltaS0-lambda)./((nvars(i)./Ns).^2));
        %ptaus(:,i) = exp((deltaS0)./((1+((nvars(i)./Ns))).^2));
        %ptaus2(:,i) = exp(deltaS0.*(1 - 2.*(nvars(i)./Ns)));
        %ptaus3(:,i) = exp((deltaS0)./((nvars(i)./Ns).^2));
    end
    
    loglog(nvars(1:31), log(ptaus(3,1:31)), 'r');
    hold('on');
    loglog(nvars(1:31), log(ptaus2(3,1:31)), 'g');
    loglog(nvars(1:31), log(ptaus3(3,1:31)), 'b');
    hold('off');
    axis([0 1e6 1e-1 1e3]);

    # Run a series of simulations to calculate the switching times: 1-16,31-46,61-76:250; 17-30,47-60,77-90: 1000 reps
    #      0   1   2   3   4             0     1     2     3     4             0     1     2     3     4 
    a0s=( 50  50 100 200  50 ); n0s=( 4565  4575  9400 19200  4650 ); a1s=( 5000  5000 10000 20000  5000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100      101      102      103      104      105      106      107      108      109      110      111      112      113      114      115      116      117      118      119      120      121      122      123      124      125      126      127      128      129      130      131      132      133      134      135      136      137      138      139      140      141      142      143      144      145      146      147      148      149      150      151      152      153      154      155      156      157      158      159      160      161      162      163      164      165      166      167      168      169      170      171      172      173      174      175      176      177      178      179      180                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90       91       92       93       94       95       96       97       98       99      100      101      102      103      104      105      106      107      108      109      110      111      112      113      114      115      116      117      118      119      120      121      122      123      124      125      126      127      128      129      130      131      132      133      134      135      136      137      138      139      140      141      142      143      144      145      146      147      148      149      150      151      152      153      154      155      156      157      158      159      160      161      162      163      164      165      166      167      168      169      170      171      172      173      174      175      176      177      178      179      180 
    nreactionsnvars=(0.00e+00 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 ); ntaus=(0.00e+00 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 5.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 1.00e-02 );
    maxTime=1e12 writeInterval=1e8 noiseRecalcFraction=1e-3 parameterWriteInterval=1e8
    replicates="1-100";
    is=`seq -f "%g" 4 4`;
    js=`seq -f "%g" 180 -1 91`;
    for i in $is; do
        for j in $js; do
            n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            # Start in the on state.
            filename="fpt_on_off_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            echo "${filename}";
            cp srgs2.lm data/lm/${filename};
            lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${a0}" maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
            lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 3 12 4 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 13 8 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log thor 22 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log ge1,ge2 50 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log normal 8 16 6 erobert3 nqp-jobs 48:00:00;
        done;
    done;
    
    # Calculate the fpts on the cluster.
    #      0   1   2             0     1     2             0     1     2 
    a0s=( 50  50 100 ); n0s=( 4565  4575  9400 ); a1s=( 5000  5000 10000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45       46       47       48       49       50       51       52       53       54       55       56       57       58       59       60       61       62       63       64       65       66       67       68       69       70       71       72       73       74       75       76       77       78       79       80       81       82       83       84       85       86       87       88       89       90 
    nreactions=(  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 ); nvars=(0.00e+00 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 1.58e+00 2.51e+00 3.98e+00 6.31e+00 1.00e+01 1.58e+01 2.51e+01 3.98e+01 6.31e+01 1.00e+02 1.58e+02 2.51e+02 3.98e+02 6.31e+02 1.00e+03 1.58e+03 2.51e+03 3.98e+03 6.31e+03 1.00e+04 1.58e+04 2.51e+04 3.98e+04 6.31e+04 1.00e+05 1.58e+05 2.51e+05 3.98e+05 6.31e+05 1.00e+06 ); ntaus=(0.00e+00 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 1.00e+01 );
    transitions=("on_off");
    is=`seq -f "%g" 2 2`;
    js=`seq -f "%g" 30 -1 14`;
    ks="0";
    tf=1e12;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
                nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
                transition=${transitions[k]}
                filename="fpt_${transition}_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
                if [ -e "data/lm/${filename}" ]; then
                    echo "Processing $filename"
                    matlab-submit calc_mfpt "'data/matlab/mfpt.dat'" "'data/lm/${filename}'" 1 ${tf} ${a0} ${n0} ${a1} $((i+1)) $((j+1)) $((k+1)) "logs/calc_mfpt_${filename}.log" sif 1 erobert3;
                fi
            done;
        done;
    done;    
    
    % Load the data.
    mfpt=cellload('data/matlab/mfpt.dat',3,91,1);

    % Plot the distribution of first passage times.
    i=2; j=28; k=1; ni=1; hi=1; Rs=[1:1000]; tf=1e12;
    n0=n0s(i); a0=a0s(i); a1=a1s(i); p1i=n0+1; p2i=a0+1; p3i=a1+1;
    nvar=nvars(j); ntau=ntaus(j);
    filename=sprintf('data/lm/fpt_%s_%d_%d_%d_0_%8.2e_%8.2e.lm',transitions{k},n0,a0,a1,nvar,ntau);
    disp(sprintf('Loading %s',filename));
    fpts=ones(p3i,length(Rs)).*tf;
    for ri=[1:length(Rs)]
        R=Rs(ri);
        counts=cast(permute(h5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Counts',R)),[2,1]),'double');
        minCount=counts(1); maxCount=counts(end);
        fpt=cast(permute(hdf5read(filename,sprintf('/Simulations/%07d/FirstPassageTimes/00/Times',R)),[2,1]),'double');
        bi=minCount+1; ei=maxCount+1;
        fpts(bi:ei,ri)=fpt;
    end
    [N,X,W]=histlog(fpts(p2i,:),5);
    D=N./(sum(N).*W);
    semilogy(X,D,'x-');
    m1=mean(fpts(p2i,:));
    [m2,c2]=expfit(fpts(p2i,:));
    hold('on');
    plot(X,exppdf(X,m1),'r');
    plot(X,exppdf(X,m2),'g');
    plot(X,exppdf(X,c2(1)),'g:');
    plot(X,exppdf(X,c2(2)),'g:');
    hold('off');
    legend('Data',sprintf('Mean: %0.04e',m1));%,sprintf('Fit: %0.04e',m2));

    % Plot the mfpt as a function of the noise variance with each jset on the same plot.
    rows=2; cols=2; plotIndex=1; jsets={[1 2:31] [1 32:61] [1 62:91]};
    colors=getplotcolors();
    symbols={'o','x','v','*','^'};
    k=1;
    for i=[1 2]
        x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
        n0i=n0+1; a0i=a0+1; a1i=a1+1;
        legendHandles=[];
        legendStrings=cell(0,1);
        for jset=[1 2 3]
            xs=[];
            ys=[];
            yfits=[];
            yl=[];
            yu=[];
            %prefactors=[];
            %prefactorX0s=[];
            js=jsets{jset};
            for j=js
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=nvar;
                    ys(end+1)=mfpt{i,j,k}(2,n0i);
                    yfits(end+1)=mfpt{i,j,k}(5,n0i);
                    yl(end+1)=mfpt{i,j,k}(6,n0i);
                    yu(end+1)=mfpt{i,j,k}(7,n0i);
                    %prefactors(end+1)=(yfits(end)./ptaus(i,j));
                    %prefactorX0s(end+1)=x0;
                end
            end
            subplot(rows,cols,plotIndex);
            legendHandles(end+1,1)=semilogy(sqrt(xs),(yfits),symbols{jset},'Color',colors{mod(jset-1,length(colors))+1});
            legendStrings{end+1}=sprintf('\\tau_{noise}=%8.2e',ntau);
            hold('on');
            legendHandles(end+1,1)=semilogy(sqrt(nvars(js)),(ptaus(i,js)),'--','Color',colors{mod(jset-1,length(colors))+1});
            legendStrings{end+1}='Theory';
            if jset==1, ploterrorbar(sqrt(xs),(yl),(yu),'r','-');, end
            subplot(rows,cols,plotIndex+1);
            loglog(sqrt(xs),(yfits),symbols{jset},'Color',colors{mod(jset-1,length(colors))+1});
            hold('on');
            loglog(sqrt(nvars(js)),(ptaus(i,js)),'--','Color',colors{mod(jset-1,length(colors))+1});
            %loglog(sqrt(nvars(js)),(ptaus2(i,js)),':','Color',colors{mod(jset-1,length(colors))+1});
            %loglog(sqrt(nvars(js)),(ptaus3(i,js)),'-.','Color',colors{mod(jset-1,length(colors))+1});
            if jset==1, ploterrorbar(sqrt(xs),(yl),(yu),'r','-');, end
            disp(sprintf('N=%d,x_0=%0.3f,a_0=%d,\\tau_noise=%8.2e)',N,x0,a0,ntau));
            disp(sprintf('\\sigma^2_noise =(%s);',sprintf('%8.3e ',xs)));
            disp(sprintf('ln(tau_on_off) =(%s);',sprintf('%8.3e ',(yfits))));
        end
        subplot(rows,cols,plotIndex);
        hold('off');
        ax=axis; axis([sqrt(nvars(js(1)))-0.01 sqrt(nvars(js(end)))+0.01 1e0 1e8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0)); legend(legendHandles(:,1), legendStrings, 'Location','Northeast');
        subplot(rows,cols,plotIndex+1);
        hold('off');
        ax=axis; axis([sqrt(nvars(js(1)))-0.01 sqrt(nvars(js(end)))+0.01 1e0 1e8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0));
        plotIndex=plotIndex+2;
    end
    

    #### srgs2_extrinsic_noise_degradation ####

    # Create reaction model from the sbml file.
    rm -f srgs2.lm && lm_sbml_import srgs2.lm srgs2.sbml
    
    # Modify the birth reaction type.
    lm_setrm srgs2.lm "ReactionTypes(0)=6" "DependencyMatrix(0,0)=[1]" "ReactionRateConstants(0,0:2)=[0.0 0.0 0.0]"
    
    % Setup some parameters.
    states={'off','on'}; transitions={'on_off'}; transitionStrings={'on{\rightarrow}off'};
    x0s=[0.93]; Ns=[5000];
    a0s=Ns./100; n0s=round(Ns.*x0s); a1s=Ns;
    disp(sprintf('#    %s        %s        %s',sprintf('%3d ',[0:length(a0s)-1]),sprintf('%5d ',[0:length(n0s)-1]),sprintf('%5d ',[0:length(a1s)-1])));
    disp(sprintf('a0s=(%s); n0s=(%s); a1s=(%s);',sprintf('%3d ',a0s),sprintf('%5d ',n0s),sprintf('%5d ',a1s)));
    nvars=[];
    ntaus=[];
    for i=[100.0 1e-1]
        for j=[(10.^[-3:0.3:-2]).^2 (10.^[-2:0.07:-0.69]).^2]
            ntaus=[ntaus i];
            nvars=[nvars j];
        end
    end
    nreactions=zeros(size(nvars))+1;
    disp(sprintf('#           %s          %s          %s',sprintf('%3d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nvars)-1]),sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('nreactions=(%s); nvars=(%s); ntaus=(%s);',sprintf('%3d ',nreactions),sprintf('%8.2e ',nvars),sprintf('%8.2e ',ntaus)));
    ptaus=zeros(length(Ns),length(nreactions));
    
    % Calculate the predicted taus for long correlation time.
    for i=[1:23]
        lambda=log(ntaus(i));
        ptaus(:,i) = exp(lambda+(((Ns.*((1-x0s).^2))./2)-lambda)./((1+((nvars(i).*Ns))).^2));
    end

    % Calculate the predicted taus for short correlation time
    for i=[24:46]
        ptaus(:,i) = exp(((Ns.*((1-x0s).^2))./2)./(1+(nvars(i).*Ns).*ntaus(i)));
    end

    # Run a series of simulations to calculate the switching times: 
    #      0             0             0 
    a0s=( 50 ); n0s=( 4650 ); a1s=( 5000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45 
    nreactions=(  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 ); nvars=(1.00e-06 3.98e-06 1.58e-05 6.31e-05 1.00e-04 1.38e-04 1.91e-04 2.63e-04 3.63e-04 5.01e-04 6.92e-04 9.55e-04 1.32e-03 1.82e-03 2.51e-03 3.47e-03 4.79e-03 6.61e-03 9.12e-03 1.26e-02 1.74e-02 2.40e-02 3.31e-02 1.00e-06 3.98e-06 1.58e-05 6.31e-05 1.00e-04 1.38e-04 1.91e-04 2.63e-04 3.63e-04 5.01e-04 6.92e-04 9.55e-04 1.32e-03 1.82e-03 2.51e-03 3.47e-03 4.79e-03 6.61e-03 9.12e-03 1.26e-02 1.74e-02 2.40e-02 3.31e-02 ); ntaus=(1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 );
    maxTime=1e12 writeInterval=1e8 noiseRecalcFraction=1e-3 parameterWriteInterval=1e8
    replicates="1-100";
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 26 -1 23`;
    for i in $is; do
        for j in $js; do
            n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            # Start in the on state.
            filename="fpt_on_off_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            echo "${filename}";
            cp srgs2.lm data/lm/${filename};
            lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${a0}" maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
            lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 2 0 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 4 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 13 8 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log thor 22 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log ge1,ge2 50 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log normal 8 16 6 erobert3 nqp-jobs 48:00:00;
        done;
    done;
    
    # Calculate the fpts on the cluster.
    #      0             0             0 
    a0s=( 50 ); n0s=( 4650 ); a1s=( 5000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35       36       37       38       39       40       41       42       43       44       45 
    nreactions=(  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 ); nvars=(1.00e-06 3.98e-06 1.58e-05 6.31e-05 1.00e-04 1.38e-04 1.91e-04 2.63e-04 3.63e-04 5.01e-04 6.92e-04 9.55e-04 1.32e-03 1.82e-03 2.51e-03 3.47e-03 4.79e-03 6.61e-03 9.12e-03 1.26e-02 1.74e-02 2.40e-02 3.31e-02 1.00e-06 3.98e-06 1.58e-05 6.31e-05 1.00e-04 1.38e-04 1.91e-04 2.63e-04 3.63e-04 5.01e-04 6.92e-04 9.55e-04 1.32e-03 1.82e-03 2.51e-03 3.47e-03 4.79e-03 6.61e-03 9.12e-03 1.26e-02 1.74e-02 2.40e-02 3.31e-02 ); ntaus=(1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e+02 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 1.00e-01 );
    transitions=("on_off");
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 0 45`;
    ks="0";
    tf=1e12;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
                nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
                transition=${transitions[k]}
                filename="fpt_${transition}_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
                if [ -e "data/lm/${filename}" ]; then
                    echo "Processing $filename"
                    matlab-submit calc_mfpt "'data/matlab/mfpt.dat'" "'data/lm/${filename}'" 1 ${tf} ${a0} ${n0} ${a1} $((i+1)) $((j+1)) $((k+1)) "logs/calc_mfpt_${filename}.log" sif 1 erobert3;
                fi
            done;
        done;
    done;    
    
    % Load the data.
    mfpt=cellload('data/matlab/mfpt.dat',1,46,1);

    % Plot the mfpt as a function of the noise variance with each jset on the same plot.
    rows=1; cols=2; plotIndex=1; jsets={[1:23] [24:46]};
    colors=getplotcolors();
    symbols={'o','x','v','*','^'};
    k=1;
    for i=[1]
        x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
        n0i=n0+1; a0i=a0+1; a1i=a1+1;
        legendHandles=[];
        legendStrings=cell(0,1);
        for jset=[1 2]
            xs=[];
            ys=[];
            yfits=[];
            yl=[];
            yu=[];
            %prefactors=[];
            %prefactorX0s=[];
            js=jsets{jset};
            for j=js
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=nvar;
                    ys(end+1)=mfpt{i,j,k}(2,n0i);
                    yfits(end+1)=mfpt{i,j,k}(5,n0i);
                    yl(end+1)=mfpt{i,j,k}(6,n0i);
                    yu(end+1)=mfpt{i,j,k}(7,n0i);
                    %prefactors(end+1)=(yfits(end)./ptaus(i,j));
                    %prefactorX0s(end+1)=x0;
                end
            end
            subplot(rows,cols,plotIndex);
            legendHandles(end+1,1)=semilogy(sqrt(xs),(yfits),symbols{jset},'Color',colors{mod(jset-1,length(colors))+1});
            legendStrings{end+1}=sprintf('\\tau_{noise}=%8.2e',ntau);
            hold('on');
            legendHandles(end+1,1)=semilogy(sqrt(nvars(js)),(ptaus(i,js)),'--','Color',colors{mod(jset-1,length(colors))+1});
            legendStrings{end+1}='Theory';
            if jset==1, ploterrorbar(sqrt(xs),(yl),(yu),'r','-');, end
            subplot(rows,cols,plotIndex+1);
            loglog(sqrt(xs),(yfits),symbols{jset},'Color',colors{mod(jset-1,length(colors))+1});
            hold('on');
            loglog(sqrt(nvars(js)),(ptaus(i,js)),'--','Color',colors{mod(jset-1,length(colors))+1});
            loglog(sqrt(x1)./N, exp(y1), 'k--');
            loglog(sqrt(x2)./N, exp(y2), 'k--');
            %loglog(sqrt(nvars(js)),(ptaus2(i,js)),':','Color',colors{mod(jset-1,length(colors))+1});
            %loglog(sqrt(nvars(js)),(ptaus3(i,js)),'-.','Color',colors{mod(jset-1,length(colors))+1});
            if jset==1, ploterrorbar(sqrt(xs),(yl),(yu),'r','-');, end
            disp(sprintf('N=%d,x_0=%0.3f,a_0=%d,\\tau_noise=%8.2e)',N,x0,a0,ntau));
            disp(sprintf('\\sigma^2_noise =(%s);',sprintf('%8.3e ',xs)));
            disp(sprintf('ln(tau_on_off) =(%s);',sprintf('%8.3e ',(yfits))));
        end
        subplot(rows,cols,plotIndex);
        hold('off');
        ax=axis; axis([sqrt(nvars(js(1)))-0.01 sqrt(nvars(js(end)))+0.01 1e0 1e8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0)); legend(legendHandles(:,1), legendStrings, 'Location','Northeast');
        subplot(rows,cols,plotIndex+1);
        hold('off');
        ax=axis; axis([sqrt(nvars(js(1)))-0.01 sqrt(nvars(js(end)))+0.01 1e0 1e8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0));
        plotIndex=plotIndex+2;
    end

    
    #### srgs2_extrinsic_noise_linear ####

    # Create reaction model from the sbml file.
    rm -f srgs2.lm && lm_sbml_import srgs2.lm srgs2.sbml
    
    # Modify the birth reaction type.
    lm_setrm srgs2.lm "ReactionTypes(0)=6" "DependencyMatrix(0,0)=[1]" "ReactionRateConstants(0,0:2)=[0.0 0.0 0.0]"
    
    % Setup some parameters.
    states={'off','on'}; transitions={'on_off'}; transitionStrings={'on{\rightarrow}off'};
    x0s=[0.915 0.96]; Ns=[5000 20000];
    a0s=Ns./100; n0s=round(Ns.*x0s); a1s=Ns;
    disp(sprintf('#    %s        %s        %s',sprintf('%3d ',[0:length(a0s)-1]),sprintf('%5d ',[0:length(n0s)-1]),sprintf('%5d ',[0:length(a1s)-1])));
    disp(sprintf('a0s=(%s); n0s=(%s); a1s=(%s);',sprintf('%3d ',a0s),sprintf('%5d ',n0s),sprintf('%5d ',a1s)));
    nvars=[];
    ntaus=[];
    for i=[1000.0]
        for j=(10.^[1.6:0.02:2.3]).^2
            ntaus=[ntaus i];
            nvars=[nvars j];
        end
    end
    nreactions=zeros(size(nvars));
    disp(sprintf('#           %s          %s          %s',sprintf('%3d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nvars)-1]),sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('nreactions=(%s); nvars=(%s); ntaus=(%s);',sprintf('%3d ',nreactions),sprintf('%8.2e ',nvars),sprintf('%8.2e ',ntaus)));
    ptaus=zeros(length(Ns),length(nreactions));
    
    % Calculate the predicted taus for long correlation time.
    for i=[1:36]
        lambda=log(ntaus(i));
        deltaS0=((Ns.*((1-x0s).^2))./2);
        ptaus(:,i) = exp(lambda+(deltaS0-lambda)./((1+((nvars(i)./Ns))).^2));
        ptaus2(:,i) = exp(deltaS0 - (2.*(deltaS0-lambda).*(nvars(i)./Ns)));
        ptaus3(:,i) = exp(lambda+(deltaS0-lambda)./((nvars(i)./Ns).^2));
        ptaus4(:,i) = exp(deltaS0./(nvars(i)./Ns));
    end
    
    loglog(nvars, log(ptaus4(1,:)));

    # Run a series of simulations to calculate the switching times: 1-16,31-46,61-76:250; 17-30,47-60,77-90: 1000 reps
    #      0   1             0     1             0     1 
    a0s=( 50 200 ); n0s=( 4575 19200 ); a1s=( 5000 20000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35 
    nreactions=(  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 ); nvars=(1.58e+03 1.74e+03 1.91e+03 2.09e+03 2.29e+03 2.51e+03 2.75e+03 3.02e+03 3.31e+03 3.63e+03 3.98e+03 4.37e+03 4.79e+03 5.25e+03 5.75e+03 6.31e+03 6.92e+03 7.59e+03 8.32e+03 9.12e+03 1.00e+04 1.10e+04 1.20e+04 1.32e+04 1.45e+04 1.58e+04 1.74e+04 1.91e+04 2.09e+04 2.29e+04 2.51e+04 2.75e+04 3.02e+04 3.31e+04 3.63e+04 3.98e+04 ); ntaus=(1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 );
    maxTime=1e12 writeInterval=1e8 noiseRecalcFraction=1e-3 parameterWriteInterval=1e8
    replicates="1-100";
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 9 -1 0`;
    for i in $is; do
        for j in $js; do
            n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
            nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
            
            # Start in the on state.
            filename="fpt_on_off_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
            echo "${filename}";
            cp srgs2.lm data/lm/${filename};
            lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${a0}" maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
            lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" "ReactionRateNoise(${nreaction},:)=[${nvar},${ntau}]" > /dev/null;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 2 0 erobert3;
            lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 3 12 4 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 13 8 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log thor 22 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log ge1,ge2 50 2 0 erobert3;
            #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log normal 8 16 6 erobert3 nqp-jobs 48:00:00;
        done;
    done;
    
    # Calculate the fpts on the cluster.
    #      0   1             0     1             0     1 
    a0s=( 50 200 ); n0s=( 4575 19200 ); a1s=( 5000 20000 );
    #             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35                  0        1        2        3        4        5        6        7        8        9       10       11       12       13       14       15       16       17       18       19       20       21       22       23       24       25       26       27       28       29       30       31       32       33       34       35 
    nreactions=(  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 ); nvars=(1.58e+03 1.74e+03 1.91e+03 2.09e+03 2.29e+03 2.51e+03 2.75e+03 3.02e+03 3.31e+03 3.63e+03 3.98e+03 4.37e+03 4.79e+03 5.25e+03 5.75e+03 6.31e+03 6.92e+03 7.59e+03 8.32e+03 9.12e+03 1.00e+04 1.10e+04 1.20e+04 1.32e+04 1.45e+04 1.58e+04 1.74e+04 1.91e+04 2.09e+04 2.29e+04 2.51e+04 2.75e+04 3.02e+04 3.31e+04 3.63e+04 3.98e+04 ); ntaus=(1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 1.00e+03 );
    transitions=("on_off");
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 0 35`;
    ks="0";
    tf=1e12;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
                nreaction=${nreactions[j]}; nvar=${nvars[j]}; ntau=${ntaus[j]};
                transition=${transitions[k]}
                filename="fpt_${transition}_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
                if [ -e "data/lm/${filename}" ]; then
                    echo "Processing $filename"
                    matlab-submit calc_mfpt "'data/matlab/mfpt.dat'" "'data/lm/${filename}'" 1 ${tf} ${a0} ${n0} ${a1} $((i+1)) $((j+1)) $((k+1)) "logs/calc_mfpt_${filename}.log" sif 1 erobert3;
                fi
            done;
        done;
    done;    
    
    % Load the data.
    mfpt=cellload('data/matlab/mfpt.dat',2,36,1);

    % Plot the mfpt as a function of the noise variance with each jset on the same plot.
    rows=1; cols=2; plotIndex=1; jsets={[1:36]};
    colors=getplotcolors();
    symbols={'o','x','v','*','^'};
    k=1;
    for i=[1]
        legendHandles=[];
        legendStrings=cell(0,1);
        for jset=[1]
            xs=[];
            ys=[];
            yfits=[];
            yl=[];
            yu=[];
            %prefactors=[];
            %prefactorX0s=[];
            js=jsets{jset};
            for j=js
                x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
                n0i=n0+1; a0i=a0+1; a1i=a1+1;
                nvar=nvars(j); ntau=ntaus(j);
                if size(mfpt{i,j,k},1) > 0
                    xs(end+1)=nvar;
                    ys(end+1)=mfpt{i,j,k}(2,n0i);
                    yfits(end+1)=mfpt{i,j,k}(5,n0i);
                    yl(end+1)=mfpt{i,j,k}(6,n0i);
                    yu(end+1)=mfpt{i,j,k}(7,n0i);
                    %prefactors(end+1)=(yfits(end)./ptaus(i,j));
                    %prefactorX0s(end+1)=x0;
                end
            end
            subplot(rows,cols,plotIndex);
            plot(log10(sqrt(xs)),log10(log(yfits)),symbols{length(legendStrings)+1},'Color',colors{mod(jset-1,length(colors))+1});
            hold('on');
            plot(log10(sqrt(nvars(js))),log10(log(ptaus(i,js))),'--','Color',colors{mod(jset-1,length(colors))+1});
            plot(log10(sqrt(nvars(js))),log10(log(ptaus2(i,js))),':','Color',colors{mod(jset-1,length(colors))+1});
            plot(log10(sqrt(nvars(js))),log10(log(ptaus3(i,js))),'.-','Color',colors{mod(jset-1,length(colors))+1});
            %if jset==1, ploterrorbar(log10(sqrt(xs)),log10(yl),log10(yu),'r','-');, end
            hold('off');
            %ax=axis; axis([log10(sqrt(nvars(js(1))))-0.01 log10(sqrt(nvars(js(end))))+0.01 0 8]); xlabel('\sigma_{noise}'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.3f,a_0=%d)',N,x0,a0));
            subplot(rows,cols,plotIndex+1);
            plot(log10((xs)),log10(log(yfits)),symbols{length(legendStrings)+1},'Color',colors{mod(jset-1,length(colors))+1});
            hold('on');
            plot(log10((nvars(js))),log10(log(ptaus(i,js))),'--','Color',colors{mod(jset-1,length(colors))+1});
            plot(log10((nvars(js))),log10(log(ptaus2(i,js))),':','Color',colors{mod(jset-1,length(colors))+1});
            plot(log10((nvars(js))),log10(log(ptaus3(i,js))),'.-','Color',colors{mod(jset-1,length(colors))+1});
            %if jset==1, ploterrorbar(log10((xs)),log10(yl),log10(yu),'r','-');, end
            hold('off');
            disp(sprintf('N=%d,x_0=%0.3f,a_0=%d,\\tau_noise=%8.2e)',N,x0,a0,ntau));
            disp(sprintf('ln(\\sigma^2_noise) =(%s);',sprintf('%8.3e ',log(xs))));
            disp(sprintf('ln(tau_on_off)     =(%s);',sprintf('%8.3e ',log(yfits))));
        end
        plotIndex=plotIndex+2
    end

    #### srgs2_extrinsic_noise_pdf ####

    v1=1000;
    d1=1;
    sigma=0.2;
    d1vals=d1+[-5*sigma:0.01:5*sigma].*d1;
    p=v1./d1vals;
    subplot(3,1,1);
    semilogy(d1vals,p);
    ax=axis; axis([d1vals(1) d1vals(end) 0 p(1)]);
    subplot(3,1,2);
    d1pdf=normpdf(d1vals, d1, sigma);
    plot(d1vals, d1pdf);
    ax=axis; axis([d1vals(1) d1vals(end) 0 ax(4)]);
    subplot(3,1,3);
    x=[];
    y=[];
    for i=[1:length(d1vals)]
        x(end+1)=p(i);
        y(end+1)=d1pdf(i);
    end
    loglog(x, y);

    v1=1;
    d1=0.001;
    sigma=0.2;
    v1vals=v1+[-4*sigma:0.01:4*sigma].*v1;
    p=v1vals./d1;
    subplot(3,1,1);
    plot(v1vals,p);
    ax=axis; axis([v1vals(1) v1vals(end) 0 p(end)]);
    subplot(3,1,2);
    v1pdf=normpdf(v1vals, v1, sigma);
    plot(v1vals, v1pdf);
    ax=axis; axis([v1vals(1) v1vals(end) 0 ax(4)]);
    subplot(3,1,3);
    x=[];
    y=[];
    for i=[1:length(v1vals)]
        x(end+1)=p(i);
        y(end+1)=v1pdf(i);
    end
    semilogy(x, y);

    
    v1=1000;
    d1=1;
    sigma=0.5;
    x=[0:0.01:4];
    p=v1./x;
    subplot(3,1,1);
    semilogy(x,p);
    ax=axis; axis([x(1) x(end) 0 p(1)]);
    subplot(3,1,2);
    d1pdf=lognpdf(x, log(d1)-(sigma^2)/2, sigma);
    plot(x, d1pdf);
    subplot(3,1,3);
    x2=[];
    y=[];
    for i=[1:length(x)]
        x2(end+1)=p(i);
        y(end+1)=d1pdf(i);
    end
    semilogy(x2, y);
    axis([0 1e4 1e-5 1e1]);
    
    
    
    d1vals=d1+[-4*sigma:0.01:4*sigma].*d1;
    ax=axis; axis([d1vals(1) d1vals(end) 0 ax(4)]);


    # Create reaction model from the sbml file.
    rm -f srgs2.lm && lm_sbml_import srgs2.lm srgs2.sbml
    
    # Modify the birth reaction type.
    lm_setrm srgs2.lm "ReactionTypes(0)=6" "DependencyMatrix(0,0)=[1]" "ReactionRateConstants(0,0:2)=[0.0 0.0 0.0]"
    
    % Setup some parameters.
    states={'off','on'}; transitions={'on_off'}; transitionStrings={'on{\rightarrow}off'};
    x0s=[0.3]; Ns=[5000];
    a0s=Ns./100; n0s=round(Ns.*x0s); a1s=Ns;
    nvars=[0.0 ([1e-4 1e-3 1e-2 1e-1 2e-1]).^2];
    ntaus=[1e-2 1e0 1e3];
    nreactions=[0 1]; nmeans=[5000 1];
    disp(sprintf('#    %s        %s        %s',sprintf('%3d ',[0:length(a0s)-1]),sprintf('%5d ',[0:length(n0s)-1]),sprintf('%5d ',[0:length(a1s)-1])));
    disp(sprintf('a0s=(%s); n0s=(%s); a1s=(%s);',sprintf('%3d ',a0s),sprintf('%5d ',n0s),sprintf('%5d ',a1s)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(nvars)-1])));
    disp(sprintf('nvars=(%s);',sprintf('%8.2e ',nvars)));
    disp(sprintf('#     %s',sprintf('%8d ',[0:length(ntaus)-1])));
    disp(sprintf('ntaus=(%s);',sprintf('%8.2e ',ntaus)));
    disp(sprintf('#           %s           %s',sprintf('%1d ',[0:length(nreactions)-1]),sprintf('%8d ',[0:length(nmeans)-1])));
    disp(sprintf('nreactions=(%s); nmeans=(%s)',sprintf('%1d ',nreactions),sprintf('%8.2e ',nmeans)));
    
    # Run a series of simulations to calculate the pdfs.
    #      0             0             0 
    a0s=( 50 ); n0s=( 1500 ); a1s=( 5000 );
    #            0        1        2        3        4        5 
    nvars=(0.00e+00 1.00e-08 1.00e-06 1.00e-04 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(1.00e-02 1.00e+00 1.00e+03 );
    #           0 1                   0        1 
    nreactions=(0 1 ); nmeans=(5.00e+03 1.00e+00 )
    maxTime=1e4 writeInterval=1e0 noiseRecalcFraction=1e-3 parameterWriteInterval=1e0
    replicates="1-1000";
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 4 4`;
    ks=`seq -f "%g" 0 2`;
    ls=`seq -f "%g" 0 1`;
    Y0=0;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
                    nvar=${nvars[j]};
                    ntau=${ntaus[k]};
                    nreaction=${nreactions[l]}; nmean=${nmeans[l]};
                    nvarActual=`awk -v a="${nvar}" -v b="${nmean}" 'BEGIN{print (a * b * b)}'`
                    
                    # Run the simulations.
                    filename="pdf_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
                    echo "${filename} with $nvarActual";
                    cp srgs2.lm data/lm/${filename};
                    lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${n0}" maxTime=${maxTime} writeInterval=${writeInterval} noiseRecalcFraction=${noiseRecalcFraction} parameterWriteInterval=${parameterWriteInterval} > /dev/null;
                    lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" "ReactionRateNoise(${nreaction},:)=[${nvarActual},${ntau}]" > /dev/null;
                    #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
                    lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 10 8 0 erobert3;
                done;
            done;
        done;
    done;

    # Calculate the pdfs on the cluster.
    #      0             0             0 
    a0s=( 50 ); n0s=( 1500 ); a1s=( 5000 );
    #            0        1        2        3        4        5 
    nvars=(0.00e+00 1.00e-08 1.00e-06 1.00e-04 1.00e-02 4.00e-02 );
    #            0        1        2 
    ntaus=(1.00e-02 1.00e+00 1.00e+03 );
    #           0 1                   0        1 
    nreactions=(0 1 ); nmeans=(5.00e+03 1.00e+00 )
    is=`seq -f "%g" 0 0`;
    js=`seq -f "%g" 4 4`;
    ks=`seq -f "%g" 0 2`;
    ls=`seq -f "%g" 0 1`;
    R=1000; ts=10000;
    for i in $is; do
        for j in $js; do
            for k in $ks; do
                for l in $ls; do
                    n0=${n0s[i]}; a0=${a0s[i]}; a1=${a1s[i]};
                    nvar=${nvars[j]};
                    ntau=${ntaus[k]};
                    nreaction=${nreactions[l]}; nmean=${nmeans[l]};
                    
                    filename="pdf_${n0}_${a0}_${a1}_${nreaction}_${nvar}_${ntau}.lm";
                    if [ -e "data/lm/${filename}" ]; then
                        echo "Processing $filename"
                        matlab-submit calc_pdf "'data/matlab/pdf.dat'" "'data/lm/${filename}'" $((0+1)) ${R} ${ts} $((i+1)) $((j+1)) $((k+1)) $((l+1)) "logs/calc_pdf_${filename}.log" sif 1 erobert3;
                    fi
                done;
            done;
        done;
    done;
    
   
    % Load the data.
    pdfs=cellload('data/matlab/pdf.dat',1,6,3,2);

    % Plot the pdfs.
    rows=3; cols=3; plotIndex=1;
    colors=getplotcolors();
    for i=[1]
        for j=[4 5 6]
            for k=[1 2 3]
                for l=[1 2]
                    x0=x0s(i); N=Ns(i); n0=n0s(i); a0=a0s(i); a1=a1s(i);
                    nvar=nvars(j);
                    ntau=ntaus(k);
                    nreaction=nreactions(l);
                    subplot(rows,cols,plotIndex);
                    if size(pdfs{i,j,k,l},1) > 0
                        D=pdfs{i,j,k,l}(1,:);
                        X=pdfs{i,j,k,l}(2,:);
                        semilogy(D, X, 'Color', colors{l});
                        m=sum(D.*X);
                        v=sum(((D-m).^2).*X);
                        sqrt(v)/m
                        vline(4575);
                        ax=axis; axis([0 10000 1e-8 1e-2]); xlabel('x'); ylabel('P(x)'); title(sprintf('N=%d,\\sigma/\\mu=%8.2e,\\tau=%8.2e,reaction=%d)',N,sqrt(nvar),ntau,nreaction));
                    else
                        newplot;
                    end
                    hold('on');
                end
                plotIndex=plotIndex+1;
                if plotIndex > rows*cols
                    plotIndex=1;
                    pause;
                end
                hold('off');
            end
        end
    end

    
    #### srgs2_xi_dependence ####

    # Create reaction model from the sbml file.
    rm -f srgs2.lm && lm_sbml_import srgs2.lm srgs2.sbml
    
    # Modify the birth reaction type.
    lm_setrm srgs2.lm "ReactionTypes(0)=6" "DependencyMatrix(0,0)=[1]" "ReactionRateConstants(0,0:2)=[0.0 0.0 0.0]"
    
    % Setup some parameters.
    transitions={'on_off'}; transitionStrings={'on{\rightarrow}off'};
    N=5000; x0=0.93; xis=[-0.069:0.001:0.0];
    a0=N/100; n0=round(N.*x0); a1s=round((1+xis).*N);
    disp(sprintf('#                    %s',sprintf('%5d ',[0:length(a1s)-1])));
    disp(sprintf('a0=%d; n0=%d; a1s=(%s);',a0,n0,sprintf('%5d ',a1s)));
    
    % Plot some of the calculations.
    nvar=(([1:500]./3).^2)./N;
    ptau_xi=exp((N/2).*(1-x0+xis).^2);
    ptau_sample=zeros(size(nvar,2),size(ptau_xi,2));
    xi0=zeros(1,size(nvar,2));
    for i=[1:size(nvar,2)]
        ptau_sample(i,:)=exp(N.*(xis.^2)./(2*nvar(i)));
        xi0(i)=-((1-x0)*(nvar(i)))/(1+(nvar(i)));
    end
    rows=2; cols=3; plotIndex=1;
    i=150;
    subplot(rows,cols,plotIndex);
    semilogy(xis, ptau_xi, 'b-');
    vline(xi0(i));
    ax=axis; axis([xis(1) xis(end) 1e0 ax(4)]);
    plotIndex=plotIndex+1;
    subplot(rows,cols,plotIndex);
    semilogy(xis, ptau_sample(i,:), 'b-');
    vline(xi0(i));
    ax=axis; axis([xis(1) xis(end) 1e0 ax(4)]);
    plotIndex=plotIndex+1;
    subplot(rows,cols,plotIndex);
    semilogy(xis, ptau_xi+ptau_sample(i,:), 'b-');
    vline(xi0(i));
    ax=axis; axis([xis(1) xis(end) 1e0 ax(4)]);
    plotIndex=plotIndex+1;
    subplot(rows,cols,plotIndex);
    semilogy(xis, exp(log(ptau_xi)+log(ptau_sample(i,:))), 'b-');
    vline(xi0(i));
    ax=axis; axis([xis(1) xis(end) 1e0 ax(4)]);
    plotIndex=plotIndex+1;
    subplot(rows,cols,plotIndex);
    ptau=zeros(1,size(nvar,2));
    for j=[1:size(nvar,2)]
        minIndex=find(xis<=xi0(j),1,'last');
        ptau(j)=ptau_xi(minIndex);
    end
    semilogy(sqrt(nvar.*N), ptau, 'b-');
    vline(sqrt(nvars(i)));
    ax=axis; axis([ax(1) ax(2) 1e0 ax(4)]);
    plotIndex=plotIndex+1;
    subplot(rows,cols,plotIndex);
    ptau_theory=exp(((N*(1-x0)^2)/2)./(1+nvar).^2);
    semilogy(sqrt(nvar.*N), ptau_theory, 'b-');
    vline(sqrt(nvars(i)));
    ax=axis; axis([ax(1) ax(2) 1e0 ax(4)]);
    plotIndex=plotIndex+1;
    
    
    % Test OU mfpt.
    xs=[0:0.01:10];
    ys=[];
    for x=xs
        ys(end+1)=ou_mfpt(0.0, x, 100);
    end
    semilogy(xs, ys);
    
    
    
    semilogy(xis, ptau_sample+ptau_xi);
    vline(-((1-x0)*(nvar/N))/(1+(nvar/N)));
    plotIndex=plotIndex+1;
    subplot(rows, cols, plotIndex);
    semilogy(xis, log(ptau_sample)+log(ptau_xi));
    vline();
    plotIndex=plotIndex+1;
    
    
    
    
    
    # Run a series of simulations to calculate the switching times.
    #                        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64    65    66    67    68    69 
    a0=50; n0=4650; a1s=( 4655  4660  4665  4670  4675  4680  4685  4690  4695  4700  4705  4710  4715  4720  4725  4730  4735  4740  4745  4750  4755  4760  4765  4770  4775  4780  4785  4790  4795  4800  4805  4810  4815  4820  4825  4830  4835  4840  4845  4850  4855  4860  4865  4870  4875  4880  4885  4890  4895  4900  4905  4910  4915  4920  4925  4930  4935  4940  4945  4950  4955  4960  4965  4970  4975  4980  4985  4990  4995  5000 );
    maxTime=1e12 writeInterval=1e8;
    replicates="1-100";
    is=`seq -f "%g" 0 69`;
    for i in $is; do
        a1=${a1s[i]};
        
        # Start in the on state.
        filename="fpt_on_off_${n0}_${a0}_${a1}.lm";
        echo "${filename}";
        cp srgs2.lm data/lm/${filename};
        lm_setp data/lm/${filename} fptTrackingList=0 "speciesLowerLimitList=0:${a0}" maxTime=${maxTime} writeInterval=${writeInterval} > /dev/null;
        lm_setrm data/lm/${filename} "InitialSpeciesCounts(0)=${a1}" "ReactionRateConstants(0,0:2)=[$n0,$a0,$a1]" > /dev/null;
        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 0 logs/${filename}.log local 1 2 0 erobert3;
        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -gr 1/3 -ck 30:00 logs/${filename}.log eir 1 12 4 erobert3;
        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log odin 3 8 0 erobert3;
        lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log thor 22 2 0 erobert3;
        #lm-submit data/lm/${filename} -m lm::cme::FluctuatingNRSolver -r ${replicates} -cr 1 -ck 30:00 logs/${filename}.log ge1,ge2 20 2 0 erobert3;
    done;
    
    # Calculate the fpts on the cluster.
    #                        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64    65    66    67    68    69 
    a0=50; n0=4650; a1s=( 4655  4660  4665  4670  4675  4680  4685  4690  4695  4700  4705  4710  4715  4720  4725  4730  4735  4740  4745  4750  4755  4760  4765  4770  4775  4780  4785  4790  4795  4800  4805  4810  4815  4820  4825  4830  4835  4840  4845  4850  4855  4860  4865  4870  4875  4880  4885  4890  4895  4900  4905  4910  4915  4920  4925  4930  4935  4940  4945  4950  4955  4960  4965  4970  4975  4980  4985  4990  4995  5000 );
    transitions=("on_off");
    is=`seq -f "%g" 1 69`;
    j="0";
    k="0";
    R=100; tf=1e12;
    for i in $is; do
        a1=${a1s[i]};
        transition=${transitions[k]}
        filename="fpt_${transition}_${n0}_${a0}_${a1}.lm";
        if [ -e "data/lm/${filename}" ]; then
            echo "Processing $filename"
            matlab-submit calc_mfpt "'data/matlab/mfpt.dat'" "'data/lm/${filename}'" 1 ${R} ${tf} ${a0} ${n0} ${a1} $((i+1)) $((j+1)) $((k+1)) "logs/calc_mfpt_${filename}.log" sif 1 erobert3;
        fi
    done;    
    
    % Load the data.
    mfpt=cellload('data/matlab/mfpt.dat',70,1,1);

    % Plot the mfpt as a function of xi.
    rows=3; cols=2; plotIndex=1;
    j=1; k=1; nvar=(100/3)^2;
    subplot(rows,cols,plotIndex);
    xs=[];
    ys=[];
    yfits=[];
    yl=[];
    yu=[];
    is=[1:70]
    for i=is
        a1=a1s(i);
        n0i=n0+1; a0i=a0+1; a1i=a1+1;
        if size(mfpt{i,j,k},1) > 0
            xs(end+1)=a1;
            ys(end+1)=mfpt{i,j,k}(2,n0i);
            yfits(end+1)=mfpt{i,j,k}(5,n0i);
            yl(end+1)=mfpt{i,j,k}(6,n0i);
            yu(end+1)=mfpt{i,j,k}(7,n0i);
        end
    end
    semilogy(xis,yfits,'ro');
    hold('on');
    ptau_xi=exp((N/2).*(1-x0+((xs-N)./N)).^2);
    plot(xis, ptau_xi, 'b-');
    ploterrorbar(xis,yl,yu,'r','-');
    hold('off');
    ax=axis; axis([ax(1) ax(2) ax(3) ax(4)]); xlabel('\xi'); ylabel(sprintf('\\tau_{%s}',transitionStrings{k})); title(sprintf('MFPT (N=%d,x_0=%0.2f)',N,x0)); legend('Simulation', 'Theory', 'Location','Northwest');
    disp(sprintf('N=%d,x_0=%0.2f',N,x0));
    disp(sprintf('\\xi           =(%s);',sprintf('%8.3e ',xis)));
    disp(sprintf('ln(\\tau_on_off)=(%s);',sprintf('%8.3e ',log(yfits))));
    plotIndex=plotIndex+1;
    subplot(rows, cols, plotIndex);
    ptau_sample=exp(N.*(xis.^2)./(2*nvar/N));
    semilogy(xis, ptau_sample);
    plotIndex=plotIndex+1;
    subplot(rows, cols, plotIndex);
    semilogy(xis, ptau_sample+ptau_xi);
    vline(-((1-x0)*(nvar/N))/(1+(nvar/N)));
    plotIndex=plotIndex+1;
    subplot(rows, cols, plotIndex);
    semilogy(xis, log(ptau_sample)+log(ptau_xi));
    vline(-((1-x0)*(nvar/N))/(1+(nvar/N)));
    plotIndex=plotIndex+1;
    
    
    %disp(sprintf('x  =(%s);',sprintf('%0.3e ',xs)));
    %disp(sprintf('y  =(%s);',sprintf('%0.3e ',log10(ys))));
    %disp(sprintf('wkb=(%s);',sprintf('%0.3e ',cs)));
    %disp(sprintf('r  =(%s);',sprintf('%0.3e ',ys./(10.^cs))));
    
    
    
    
    
    
    
    
    
    
